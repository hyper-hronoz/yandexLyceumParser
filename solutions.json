{"1984":"amount = int(input())\n​\narray = [\"Остазия\", \"Евразия\"]\n​\nfor i in range(0, amount):\n    string = input()\n    if string == \"Меняем\":\n        array[0], array[1] = array[1], array[0]\n    if string == \"С кем война?\":\n        print(array[1])\n    if string == \"С кем мир?\":\n        print(array[0])\n​\n","Форматы дат":"class AmericanDate:\n \n    def __init__(self, y, m, d):\n        self.y = y\n        self.m = m\n        self.d = d\n \n    def get_year(self):\n        self.y = str(self.y)\n        return self.y\n \n    def get_month(self):\n        self.m = str(self.m)\n        return self.m\n \n    def get_day(self):\n        self.d = str(self.d)\n        return self.d\n \n    def set_year(self, ny):\n        self.y = ny\n        return self.y\n \n    def set_month(self, nm):\n        self.m = str(nm)\n        return str(self.m)\n \n    def set_day(self, nd):\n        self.d = str(nd)\n        return self.d\n \n    def format(self):\n        if len(self.get_day()) > 1 and len(self.get_month()) > 1:\n            return f'{self.get_month()}.{self.get_day()}.{self.get_year()}'\n        if len(self.get_day()) == 1 and len(self.get_month()) == 1:\n            return f'0{self.get_month()}.0{self.get_day()}.{self.get_year()}'\n        if len(self.get_day()) > 1 and len(self.get_month()) == 1:\n            return f'0{self.get_month()}.{self.get_day()}.{self.get_year()}'\n        if len(self.get_day()) == 1 and len(self.get_month()) > 1:\n            return f'{self.get_month()}.0{self.get_day()}.{self.get_year()}'\n \n \nclass EuropeanDate:\n \n    def __init__(self, y, m, d):\n        self.y = y\n        self.m = m\n        self.d = d\n \n    def get_year(self):\n        self.y = str(self.y)\n        return self.y\n \n    def get_month(self):\n        self.m = str(self.m)\n        return self.m\n \n    def get_day(self):\n        self.d = str(self.d)\n        return self.d\n \n    def set_year(self, ny):\n        self.y = ny\n        return self.y\n \n    def set_month(self, nm):\n        self.m = str(nm)\n        return str(self.m)\n \n    def set_day(self, nd):\n        self.d = str(nd)\n        return self.d\n \n    def format(self):\n        if len(self.get_day()) > 1 and len(self.get_month()) > 1:\n            return f'{self.get_day()}.{self.get_month()}.{self.get_year()}'\n        if len(self.get_day()) == 1 and len(self.get_month()) == 1:\n            return f'0{self.get_day()}.0{self.get_month()}.{self.get_year()}'\n        if len(self.get_day()) > 1 and len(self.get_month()) == 1:\n            return f'{self.get_day()}.0{self.get_month()}.{self.get_year()}'\n        if len(self.get_day()) == 1 and len(self.get_month()) > 1:\n            return f'0{self.get_day()}.{self.get_month()}.{self.get_year()}'\n​\n","Вывод предложений":"class Paragraph:\n    def __init__(self, width):\n        self.width = width\n        self.words = []\n \n    def add_word(self, word):\n        self.words.append(word)\n \n \nclass LeftParagraph(Paragraph):\n    def end(self):\n        line = ''\n        for word in self.words:\n            if not line:\n                line += word\n            elif len(line) + len(word) + 1 <= self.width:\n                line += ' ' + word\n            else:\n                print(line)\n                line = word\n        print(line)\n        self.words.clear()\n \n \nclass RightParagraph(Paragraph):\n    def end(self):\n        line = ''\n        for word in self.words:\n            if not line:\n                line += word\n            elif len(line) + len(word) + 1 <= self.width:\n                line += ' ' + word\n            else:\n                print(line.rjust(self.width, ' '))\n                line = word\n        print(line.rjust(self.width, ' '))\n        self.words.clear()\n","Выборки":"class Selector:\n    array = []\n​\n    def __init__(self, array):\n        self.array = array[:]\n​\n    def get_odds(self):\n        return list(filter(lambda x: int(x) % 2 != 0, self.array))\n​\n    def get_evens(self):\n        return list(filter(lambda x: int(x) % 2 == 0, self.array))\n​\n","Маленький колокольчик":"class LittleBell:\n    def sound(self):\n        print(\"ding\")\n​\n","Кнопка":"class Button:\n    def __init__(self):\n        self.counter = 0\n​\n    def click(self):\n        self.counter += 1\n​\n    def click_count(self):\n        return self.counter\n​\n    def reset(self):\n        self.counter = 0\n​\n","Весы":"class Balance:\n    def __init__(self):\n        self.left_bowl = 0\n        self.right_bowl = 0\n​\n    def add_right(self, num):\n        self.right_bowl += num\n​\n    def add_left(self, num):\n        self.left_bowl += num\n​\n    def result(self):\n        if self.left_bowl == self.right_bowl:\n            return '='\n        if self.left_bowl > self.right_bowl:\n            return 'L'\n        if self.left_bowl < self.right_bowl:\n            return 'R'\n​\n","Разбивка по чётности":"class OddEvenSeparator:\n    def __init__(self):\n        self.array = []\n​\n    def add_number(self, number):\n        self.array.append(number)\n​\n    def even(self):\n        return list(filter(lambda x: x % 2 == 0, self.array))\n​\n    def odd(self):\n        return list(filter(lambda x: x % 2 != 0, self.array))\n​\n","Большой колокольчик":"class BigBell:\n    first_message = \"ding\"\n    second_message = \"dong\"\n    last_message = \"\"\n​\n    def sound(self):\n        if self.last_message != self.first_message:\n            print(self.first_message)\n            self.last_message = self.first_message\n        else:\n            print(self.second_message)\n            self.last_message = self.second_message\n​\n","Самые короткие и самые длинные слова":"class MinMaxWordFinder:\n​\n    def __init__(self):\n        self.words_list = []\n​\n    def add_sentence(self, sentence: str):\n        self.words_list += sentence.split()\n​\n    def shortest_words(self):\n        minimal_length = 999999999999999999999999999999999999999999999999999999999999999\n        answer = []\n        for i in self.words_list:\n            if len(i) < minimal_length:\n                minimal_length = len(i)\n        for i in self.words_list:\n            if len(i) == minimal_length:\n                answer.append(i)\n        return sorted(answer)\n​\n    def longest_words(self):\n        maximal_length = 0\n        answer = []\n        for i in self.words_list:\n            if len(i) > maximal_length:\n                maximal_length = len(i)\n        for i in self.words_list:\n            if len(i) == maximal_length and i not in answer:\n                answer.append(i)\n        return sorted(answer)\n​\n","Ограничивающий прямоугольник":"class BoundingRectangle:\n    def __init__(self):\n        self.point_x = []\n        self.point_y = []\n​\n    def add_point(self, x: int, y: int):\n        self.point_x.append(x)\n        self.point_y.append(y)\n​\n    def top_y(self) -> int:\n        return max(self.point_y)\n​\n    def bottom_y(self) -> int:\n        return min(self.point_y)\n​\n    def left_x(self) -> int:\n        return min(self.point_x)\n​\n    def right_x(self) -> int:\n        return max(self.point_x)\n​\n    def width(self) -> int:\n        return max(self.point_x) - min(self.point_x)\n​\n    def height(self) -> int:\n        return max(self.point_y) - min(self.point_y)\n​\n","Морской бой":"class SeaMap:\n    sea_map = []\n​\n    def __init__(self):\n        self.sea_map = [\n            [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n            [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n            [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n            [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n            [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n            [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n            [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n            [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n            [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n            [\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"],\n        ]\n​\n    def cell(self, row: int, column: int):\n        return self.sea_map[column][row]\n​\n    def shoot(self, row: int, column: int, result: str):\n        # column =  column\n        if result == \"miss\":\n            self.sea_map[column][row] = \"*\"\n        if result == \"sink\" or result == \"hit\":\n            self.sea_map[column][row] = \"x\"\n        if result == \"sink\":\n            try:\n                if column - 1 >= 0:\n                    self.sea_map[column - 1][row + 1] = \"*\"\n            except Exception:\n                pass\n​\n            try:\n                if column - 1 >= 0:\n                    self.sea_map[column - 1][row] = \"*\"\n            except Exception:\n                pass\n​\n            try:\n                if row - 1 >= 0 and column - 1 >= 0:\n                    self.sea_map[column - 1][row - 1] = \"*\"\n            except Exception:\n                pass\n​\n            try:\n                if row - 1 >= 0:\n                    self.sea_map[column][row - 1] = \"*\"\n            except Exception:\n                pass\n​\n            try:\n                self.sea_map[column][row + 1] = \"*\"\n            except Exception:\n                pass\n​\n            try:\n                if row - 1 >= 0:\n                    self.sea_map[column + 1][row - 1] = \"*\"\n            except Exception:\n                pass\n​\n            try:\n                self.sea_map[column + 1][row] = \"*\"\n            except Exception:\n                pass\n​\n            try:\n                self.sea_map[column + 1][row + 1] = \"*\"\n            except Exception:\n                pass\n​\n","Страшдественский Пирог":"import random\n​\namount = int(input())\n​\nfillings = input().split(\"; \")\n​\nspan = list(map(lambda x: float(x), input().split(\" \")))\n​\nmax = int(input())\n​\nfor i in range(amount):\n    one_weight = round(random.uniform(span[0], span[1]), 2)\n    filling = fillings[random.randint(0, len(fillings))]\n    value = random.randint(1, max)\n​\n    print(f\"{filling} {one_weight} kg of the weight, quantity {value}, total weight {value * one_weight}\")\n​\n","Прорицательское Гумбо":"import datetime\nimport calendar\n​\ngetting_date = list(map(lambda x: int(x), input().split(\"/\")))\n​\nevery_day = int(input())\n​\nexept_dey = \"Monday\"\n​\nnew_date_format = datetime.date(getting_date[0], getting_date[1], getting_date[2])\n​\ncounter = 0\n​\nwhile counter != 3:\n    days = int(str(new_date_format)[-2:])\n    month = new_date_format.strftime(\"%B\")\n    week_day = calendar.day_name[new_date_format.weekday()]\n    if week_day != exept_dey and days % 7 != 0:\n        print(f\"{days if len(str(days)) == 2 else '0' + str(days)} {month[:3]}, {week_day}\")\n        counter += 1\n    new_date_format = new_date_format + datetime.timedelta(days=every_day)\n​\n","Формы глаголов":"import sys\nimport pymorphy2\nimport re\n​\nmorph = pymorphy2.MorphAnalyzer()\n​\ntext = sys.stdin.read()\n​\ntext = re.sub(r'[\\n]', '', text)\n​\ntext = re.sub(r'[^\\w\\s]', '', text)\n​\nword_list = text.split(\" \")\n​\n​\ncounter = 0\n​\narray = [\"видеть\", \"увидеть\", \"глядеть\", \"примечать\", \"узреть\"]\n​\nfor i in word_list:\n    if morph.parse(i)[0].normal_form in array:\n        counter += 1\n​\nprint(counter)\n​\n​\n","Противоположный цвет (разминка)":"import PIL\nprint(\" \".join(list(str(255 - int(i)) for i in input().split(\" \"))))\n​\n","Средний цвет фотографии":"from PIL import Image\n​\nim = Image.open(\"image.jpg\")\npixels = im.load()\nx, y = im.size\n​\nsize = x * y\n​\ncolors = [0, 0, 0]\n​\nfor i in range(x):\n    for j in range(y):\n        colors[0] += pixels[i, j][0]\n        colors[1] += pixels[i, j][1]\n        colors[2] += pixels[i, j][2]\n​\nprint(*(list(map(lambda x: x // size, colors))))\n​\n","Вертикальное отражение":"from PIL import Image\n​\n​\ndef mirror():\n    im = Image.open(\"image.jpg\")\n    im = im.transpose(Image.FLIP_LEFT_RIGHT)\n    im.save(\"res.jpg\")\n​\n","Бинго!":"def make_bingo():\n    import random\n    array = []\n    it_was = []\n    for i in range(5):\n        array.append([])\n        while len(array[i]) != 5:\n            number = random.randint(1, 75)\n            if number not in it_was:\n                array[i].append(number)\n                it_was.append(number)\n        try:\n            array[2][2] = 0\n        except Exception:\n            pass\n        array[i] = tuple(array[i])\n    return tuple(array)\n​\n","Выбор тайного друга":"import sys\nimport random\n​\nr = list\nK = map\nxO = str\nJ = range\nT = len\nV = print\nm = sys.stdin\n​\n​\nf = random.shuffle\nx1 = 1\nz = r(K(xO.strip, m))\nf(z)\nfor n in J(0, T(z)):\n    if n == T(z) - 1:\n        V(z[n], ' - ', z[0])\n    else:\n        V(z[n], ' - ', z[x1])\n        x1 += 1\n​\n","Генератор визуально различимых паролей (базовый)":"import random  # line:1\n​\nst1 = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'p', 'a', 's', 'd', 'f', 'g', 'h',\n       'j', 'k', 'z', 'x', 'c', 'v', 'b', 'n', 'm']  # line:4\nst2 = ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'P', 'A', 'S', 'D', 'F', 'G', 'H', 'J',\n       'K', 'L', 'Z', 'X', 'C', 'V', 'B', 'N', 'M']  # line:6\nst3 = ['1', '2', '3', '4', '5', '6', '7', '8', '9']  # line:7\nst4 = st1 + st2 + st3  # line:8\n​\n​\ndef generate_password(OOO0OOO000OOOOOOO):  # line:11\n    O00OOO0OO00OOO00O = []  # line:12\n    O00OOO0OO00OOO00O.append(random.choice(st1))  # line:13\n    O00OOO0OO00OOO00O.append(random.choice(st2))  # line:14\n    O00OOO0OO00OOO00O.append(random.choice(st3))  # line:15\n    for OO0OOO0OO0OOOOOO0 in range(0, OOO0OOO000OOOOOOO - 3):  # line:16\n        O00OOO0OO00OOO00O.append(random.choice(st4))  # line:17\n    random.shuffle(O00OOO0OO00OOO00O)  # line:18\n    return ''.join(O00OOO0OO00OOO00O)  # line:19\n​\n​\ndef main(OOOOO000OO00O00OO, OOOOO00OOO0OO00O0):  # line:22\n    OOO0OO0000OOOOO0O = set()  # line:23\n    while len(OOO0OO0000OOOOO0O) < OOOOO000OO00O00OO:  # line:24\n        OOO0OO0000OOOOO0O.add(generate_password(OOOOO00OOO0OO00O0))  # line:25\n    return OOO0OO0000OOOOO0O  # line:26\n​\n","Дни рождения друзей":"import datetime as dt\nY = int\nH = input\nU = print\nJ = dt.timedelta\np = dt.datetime\nL = p.now()\ndn = J(days=Y(H()))\nU((L + dn).day, (L + dn).month)\n​\n","Генератор визуально различимых паролей (A)":"import string\nfrom random import sample\n​\nV = set\nR = len\n​\ns = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789'\n​\n​\ndef generate_password(m):\n    return ''.join(sample(s, m))\n​\n​\ndef main(n, m):\n    a = V()\n    while R(a) < n:\n        a.add(generate_password(m))\n    return a\n​\n","Заветное слово":"def magic_word(numbers, backwards=True):\n    global variants\n    indexes = sorted(list(map(lambda x: int(x) - 1, list(numbers.split(\" \")))))\n    new_variants = []\n    for i in variants:\n        change_1 = i[indexes[0]]\n        change_2 = i[indexes[1]]\n        string = list(i)\n        string[indexes[0]] = change_2\n        string[indexes[1]] = change_1\n        if backwards:\n            reversed_string = list(reversed(string[indexes[0]:indexes[1]]))\n            first_part = string[0:indexes[0]]\n            second_part = string[indexes[1]:]\n            string = first_part + reversed_string + second_part\n        new_variants.append(\"\".join(string))\n    variants = tuple(new_variants)\n​\n","Длина списка":"def recursive_len(array, counter=0):\n    array = array.copy()\n    if len(array) == 0:\n        return counter\n    else:\n        counter += 1\n        array.pop()\n        return recursive_len(array, counter)\n​\n","косипс ьтунревереП":"def recursive_reverse(OO00OOO000O00OOO0):  # line:1\n    if not OO00OOO000O00OOO0:  # line:2\n        return []  # line:3\n    return [OO00OOO000O00OOO0.pop()] + recursive_reverse(OO00OOO000O00OOO0)  # line:4\n​\n","Трибоначчи":"numbers = [0, 0, 1]\n​\n​\ndef tribonacci(index):\n    global numbers\n    if index == 0:\n        return 0\n    if len(numbers) - 1 >= index:\n        return numbers[index]\n    numbers.append(numbers[-1] + numbers[-2] + numbers[-3])\n    return tribonacci(index)\n​\n","Сумма элементов списка":"def rec_linear_sum(OOOOOOO0OO0OOO00O):  # line:1\n    if OOOOOOO0OO0OOO00O == []:  # line:2\n        return 0  # line:3\n    else:  # line:4\n        return OOOOOOO0OO0OOO00O.pop(\n            len(OOOOOOO0OO0OOO00O) - 1) + rec_linear_sum(OOOOOOO0OO0OOO00O)  # line:5\n​\n","Словарный порядок":"import sys\n​\ndata = sys.stdin.read()\n​\nprint(*list(sorted(data.split(), key=lambda x: x.lower())))\n​\n","ОтличникиРУЧ":"array = []\nanswer = \"НЕТ\"\n​\nfor i in range(int(input())):\n    array.append([])\n    for j in range(int(input())):\n        mark = int(input()[-1])\n        array[i].append(mark if mark == 5 else 0)\n    if any(array[i]):\n        answer = \"ДА\"\n    else:\n        answer = \"НЕТ\"\n        break\n​\nprint(answer)\n​\n","Средний рост":"import sys\ntry:\n    data = list(map(lambda x: int(x), sys.stdin.read().split()))\n    print(sum(data) / len(data))\nexcept Exception:\n    print(-1)\n​\n","Ваши комментарииРУЧ":"import sys\n​\nprint(sum(list(map(lambda x: 1 if x[0] == \"#\" else 0, filter(None, map(str.strip, sys.stdin))))))\n​\n","Есть ли 0РУЧ":"import sys\nprint(not all([int(i) for i in sys.stdin.read().split()]))\n","Набор юного арифметика":"def arithmetic_operation(oper):\n    if oper == \"+\":\n        return lambda a, b: a + b\n    if oper == \"-\":\n        return lambda a, b: a - b\n    if oper == \"*\":\n        return lambda a, b: a * b\n    if oper == \"/\":\n        return lambda a, b: a / b\n​\n","Просто map":"def simple_map(transformation, values):\n    res = values[:]\n    for i in range(len(res)):\n        res[i] = transformation(res[i])\n    return res\n​\n","Комбинируй и властвуйРУЧ":"","Мимикрия":"transformation = lambda x: x\n","Коллбэки":"english_alphabet = set([chr(c) for c in range(ord(\"a\"), ord(\"z\") + 1)])\n​\nenglish_vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\nenglish_consonant = english_alphabet - english_vowels\n​\n​\ndef ask_password(login, password, success=True, failure=\"\"):\n    print()\n    if (len(list(filter(lambda x: x in english_vowels, password))) != 3):\n        failure = \"WRONG NUMBER OF VOWELS\"\n    if (\"\".join(filter(lambda x: x in english_consonant, password)) != \"\".join(\n            filter(lambda x: x in english_consonant, login))):\n        failure = \"WRONG CONSONANTS\"\n    if (len(list(filter(lambda x: x in english_vowels, password))) != 3 and \"\".join(\n            filter(lambda x: x in english_consonant, password)) != \"\".join(\n            filter(lambda x: x in english_consonant, login))):\n        failure = \"EVERYTHING IS WRONG\"\n    if failure:\n        return failure, False\n    else:\n        return login, True\n​\n​\ndef main(login, password):\n    data, isOk = ask_password(login, password)\n    if isOk:\n        print(f\"Привет, {login}!\")\n    else:\n        print(\n            f\"Кто-то пытался притвориться пользователем {login}, но в пароле допустил ошибку: {data}.\")\n​\n","Матрица":"def matrix(rows=1, columns=None, parameter=0):\n    array = []\n    columns = rows if not columns else columns\n    for i in range(int(rows)):\n        array.append([])\n        for j in range(int(columns)):\n            array[i].append(parameter)\n    return array\n​\n​\n","СпамогенераторРУЧ":"def spam_generator(name, email, date, destination=\"Калуга\"):\n    print(\n        f\"\"\"\n        To: {email} \\n\n        Здравствуйте, {name}! \\n\n        Были бы рады видеть вас на встрече начинающих программистов в\n        {destination}, которая пройдет {date}.\"\"\")\n​\n","Цезарь":"def encrypt_caesar(msg, shift=3):\n    alphabet = list([chr(c) for c in range(ord('а'), ord('я') + 1)])\n    new_msg = \"\"\n    for i in msg:\n        if i.lower() in alphabet:\n            index = (alphabet.index(i.lower()) + shift) % len(alphabet)\n        else:\n            new_msg += i\n            continue\n        new_msg += (alphabet[index] if not i.isupper() else alphabet[index].upper())\n    return new_msg\n​\n​\ndef decrypt_caesar(msg, shift=3):\n    alphabet = list([chr(c) for c in range(ord('а'), ord('я') + 1)])\n    new_msg = \"\"\n    for i in msg:\n        if i.lower() in alphabet:\n            index = (alphabet.index(i.lower()) - shift) % len(alphabet)\n        else:\n            new_msg += i\n            continue\n        new_msg += (alphabet[index] if not i.isupper() else alphabet[index].upper())\n    return new_msg\n​\n","Частичные суммыРУЧ":"def partial_sums(*args):\n    array = []\n​\n    transformed_args = list(map(lambda x: float(x), args))\n    for i in range(len(transformed_args) + 1):\n        total = sum(transformed_args[0:i])\n        array.append(int(total) if int(total) == total else total)\n    return array\n​\n","Электронный попугай":"used = []\n​\n​\ndef parrot(phrase):\n    if phrase in used:\n        print(phrase)\n    else:\n        used.append(phrase)\n​\n","Счёт за обед":"def count_food(index):\n    daily_food\n    summ = 0\n    for i in index:\n        summ += daily_food[i - 1]\n    return summ\n​\n","Числа в строке":"def from_string_to_list(string, list):\n    list += [int(i) for i in string.split(\" \") if i != \"\"]\n​\n​\n","Длина окружности и площадь круга":"PI = 3.14159\n​\n​\ndef circle_length(radius):\n    global PI\n    return 2 * PI * radius\n​\n​\ndef circle_area(radius):\n    global PI\n    return PI * radius ** 2\n​\n​\ndef main():\n    radius = float(input())\n    print(circle_length(radius), circle_area(radius))\n​\n","Заикание":"priveous_message = None\n​\n​\ndef print_without_duplicates(massage):\n    global priveous_message\n    if priveous_message != massage:\n        print(massage)\n    priveous_message = massage\n​\n​\n​\n","Я вас знаюРУЧ":"name = None\nage = None\n​\n​\ndef polite_input(question):\n    global name\n    if not name:\n        name = input(\"Как вас зовут?\\n\")\n    result = input(name + \", \" + question + \"\\n\")\n    return result\n​\n​\n","Вечеринка":"friends = ()\n​\n​\ndef add_friends(name_of_person, list_of_friends):\n    global friends\n    if name_of_person in friends:\n        friends[name_of_person].extend(list_of_friends)\n    else:\n        friends[name_of_person] = list_of_friends\n​\n​\ndef are_friends(name_of_person1, name_of_person2):\n    global friends\n    return name_of_person2 in friends[name_of_person1]\n​\n​\ndef print_friends(name_of_person):\n    global friends\n    x = friends[name_of_person]\n    x.sort()\n    print(*x)\n​\n","Бюрократия":"name = None\nterm = None\n​\n​\ndef setup_profile(nameArgument, termArgument):\n    global name, term\n    name = nameArgument\n    term = termArgument\n​\n​\ndef print_application_for_leave():\n    print(f\"Заявление на отпуск в период {term}. {name}\")\n​\n​\ndef print_holiday_money_claim(money_amount):\n    print(f\"Прошу выплатить {money_amount} отпускных денег. {name}\")\n​\n​\ndef print_attorney_letter(deputy):\n    print(f\"На время отпуска в период {term} моим заместителем назначается {deputy}. {name}\")\n​\n","НРЗБРЧВ":"translated_text = \"\"\n​\n​\ndef translate(text):\n    import re\n    global translated_text\n    y = [\"а\", \"е\", \"ё\", \"и\", \"у\", \"о\",\n         \"ы\", \"э\", \"ю\", \"я\", \"А\", \"Е\",\n         \"Ё\", \"И\", \"У\", \"О\", \"Ы\", \"Э\", \"Ю\", \"Я\"]\n    for i in y:\n        text = re.sub(r\"\" + i, \"\", text)\n    text = re.sub(r\"[^\\w\\s]\", \"\", text)\n    text = re.sub(r\"[\\s]+\", \" \", text)\n    translated_text = text.strip()\n​\n​\n","Число словами":"numbers = {\n    1: \"один\",\n    2: \"два\",\n    3: \"три\",\n    4: \"четыре\",\n    5: \"пять\",\n    6: \"шесть\",\n    7: \"семь\",\n    8: \"восемь\",\n    9: \"девять\",\n    10: \"десять\",\n    11: \"одиннадцать\",\n    12: \"двенадцать\",\n    13: \"тринадцать\",\n    14: \"четырнадцать\",\n    15: \"пятнадцать\",\n    16: \"шестнадцать\",\n    17: \"семнадцать\",\n    18: \"восемнадцать\",\n    19: \"девятнадцать\",\n    20: \"двадцать\",\n    30: \"тридцать\",\n    40: \"сорок\",\n    50: \"пятьдесят\",\n    60: \"шестьдесят\",\n    70: \"семьдесят\",\n    80: \"восемьдесят\",\n    90: \"девяносто\"\n}\n​\n​\ndef number_to_words(number):\n    answer = \"\"\n    if number > 9 and number < 20:\n        answer = numbers[number]\n    elif len(str(number)) > 1:\n        answer = numbers[int(str(number // 10) + \"0\")] + \" \"\n        answer = answer + numbers[number % 10] if number % 10 != 0 else answer\n    elif len(str(number)) < 2:\n        answer += numbers[number % 10]\n    return answer.strip()\n​\n​\n","Число цифр":"def num_digits(number):\n    return len(str(number))\n             \n    \n","Мелочь оставь себе":"def take_large_banknotes(array):\n    return [i for i in array if i >= 50]\n​\n​\n​\n","Среднее значение – 2":"from functools import reduce\n​\n​\ndef average(values):\n    try:\n        return reduce((lambda x, y: x + y), values) / len(values)\n    except Exception:\n        return 0\n​\n","Скажи словами":"import re\n​\nnumbers = {\n    0: \"zero\",\n    1: \"one\",\n    2: \"two\",\n    3: \"three\",\n    4: \"four\",\n    5: \"five\",\n    6: \"six\",\n    7: \"seven\",\n    8: \"eight\",\n    9: \"nine\",\n    10: \"ten\",\n    11: \"eleven\",\n    12: \"twelve\",\n    13: \"thirteen\",\n    14: \"foarteen\",\n    15: \"fiveteen\",\n    16: \"sixteen\",\n    17: \"seventeen\",\n    18: \"eighteen\",\n    19: \"nineteen\",\n    20: \"twenty\",\n    30: \"thirty\",\n    40: \"foarty\",\n    50: \"fivety\",\n    60: \"sixty\",\n    70: \"seventy\",\n    80: \"eighty\",\n    90: \"ninety\"\n}\n​\n​\ndef number_in_english(number):\n    number = str(number)\n    answer = \"\"\n    if len(number) == 3:\n        answer = numbers[int(number) // 100] + \" hundred\"\n        number = number[1:]\n        if len(answer) > 0 and int(number):\n            answer += \" and\"\n    if len(number) == 2:\n        if int(number) >= 10 and int(number) <= 20:\n            answer += \" \" + numbers[int(number)]\n            number = \"\"\n        else:\n            answer += \" \" + numbers[int(str(int(number) // 10) + \"0\")]\n            number = number[-1]\n    if len(number) == 1:\n        answer += \" \" + numbers[int(number)]\n    if len(answer) > 5:\n        answer = re.sub(r\"zero\", \"\", answer)\n        answer = re.sub(r\"  \", \" \", answer)\n    return answer.strip()\n​\n​\n","Секретные материалы":"def print_document(array):\n    for i in array:\n        if \"Секретно\" in i or \"секретно\" in i:\n            print(\"Дальнейшие материалы засекречены\")\n            return\n        else:\n            print(i)\n    print(\"Напечатано без купюр\")\n​\n","Месяц/Month":"def month_name(index, lan):\n    month_lst_en = ['January', 'February', 'March', 'April', 'May', 'June',\n                    'July', 'August', 'September', 'October', 'November', 'December']\n​\n    month_lst_ru = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль',\n                    'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']\n​\n    return month_lst_ru[index - 1] if lan == \"ru\" else month_lst_en[index - 1]\n​\n","Ход конём":"","Уравнения степени не выше второй":"from math import sqrt\n​\n​\ndef roots_of_quadratic_equation(a, b, c):\n    D = b ** 2 - 4 * a * c\n    if a == b == c == 0:\n        return [\"all\"]\n    if D < 0:\n        return []\n    if a == 0 and b == 0:\n        return []\n    if a == 0:\n        return [-1 * c / b]\n    x1 = (-1 * b + sqrt(D)) / (2 * a)\n    x2 = (-1 * b - sqrt(D)) / (2 * a)\n    if x1 == x2:\n        return [int(x1)]\n    return int(x1), int(x2)\n​\n","Палиндромы":"def palindrome(string):\n    array = [str(i).lower() for i in str(string) if str(i) != \" \"]\n    return \"Палиндром\" if array == list(reversed(array)) else \"Не палиндром\"\n​\n","Простые числа":"def prime(OOO00OOOO00000O0O):  # line:1\n    OOO0O00000O0O0O0O = OOO00OOOO00000O0O  # line:2\n    O00000O0O00OO0OO0 = 0  # line:3\n    for OO00000OOO0O000O0 in range(1, OOO0O00000O0O0O0O + 1):  # line:4\n        if OOO0O00000O0O0O0O % OO00000OOO0O000O0 == 0:  # line:5\n            O00000O0O00OO0OO0 += 1  # line:6\n    return 'Простое число' if O00000O0O00OO0OO0 == 2 else 'Составное число'  # line:7\n​\n","Формальное приветствие":"class greeting:\n    def __init__(self, NAME, SERNAME):\n        self.NAME = NAME\n        self.SERNAME = SERNAME\n​\n    def greet(self):\n        print(f\"Здравствуйте, {self.NAME} {self.SERNAME}.\")\n​\n​\ndef greet():\n    greeting(input(), input()).greet()\n​\n​\n","Какая четверть?":"class CheckCords:\n    XCord = None\n    YCord = None\n​\n    def __init__(self, XCord, YCord):\n        self.XCord = float(XCord)\n        self.YCord = float(YCord)\n​\n    def isFirst(self):\n        return True if self.YCord > 0 and self.XCord > 0 else False\n​\n    def isSecond(self):\n        return True if self.YCord > 0 and self.XCord < 0 else False\n​\n    def isThird(self):\n        return True if self.YCord < 0 and self.XCord < 0 else False\n​\n    def isFoarth(self):\n        return True if self.YCord < 0 and self.XCord > 0 else False\n​\n​\ndef quarter(XCord, YCord):\n    checkWord = CheckCords(XCord, YCord)\n    print(\n        \"I четверть\" if checkWord.isFirst() else \"II четверть\" if checkWord.isSecond() else\n        \"III четверть\" if checkWord.isThird() else \"IV четверть\"\n    )\n​\n","Привет, как тебя там?":"import re\n​\n​\nclass WhoAreYou:\n    phrase = None\n​\n    def __init__(self, phrase):\n        self.phrase = phrase\n​\n    def checkForm(self):\n        return True if re.findall(r\"^[A-ZА-ЯЁ][a-zа-яё]+$\", self.phrase) else False\n​\n​\ndef who_are_you_and_hello():\n    whoAreYou = WhoAreYou(input())\n    if whoAreYou.checkForm():\n        print(f\"Привет, {whoAreYou.phrase}!\")\n    else:\n        who_are_you_and_hello()\n​\n​\n","Треугольник?":"def triangle(*args):\n    if max(args) < sum(args) - max(args):\n        print(\"Это треугольник\")\n    else:\n        print(\"Это не треугольник\")\n​\n​\n","Среднее значение":"def print_average(arr):\n    print(sum(arr) / len(arr) if len(arr) != 0 else 0)\n","Статистики":"def print_statistics(array):\n    print(len(array))\n    print(sum(array) / len(array) if len(array) != 0 else 0)\n    print(float(min(array)) if len(array) != 0 else 0)\n    print(float(max(array)) if len(array) != 0 else 0)\n    print(float(median(array)) if len(array) != 0 else 0)\n​\n​\ndef median(array):\n    array.sort()\n    array_length = len(array)\n    if array_length % 2 == 0:\n        first = array[len(array) // 2]\n        second = array[(len(array) // 2) - 1]\n        median = (first + second) / 2\n        return median\n    if array_length % 2 != 0:\n        return array[len(array) // 2]\n​\n","Улыбайтесь, господа!":"def print_shrug_smile():\n    print(\"¯\\_(ツ)_/¯\")\n​\n​\ndef print_ktulhu_smile():\n    print(\"{:€\")\n​\n​\ndef print_happy_smile():\n    print(\"(͡° ͜ʖ ͡°)\")\n","Скажи «пароль» и проходи":"isLogin = True\ncounter = 0\n​\n​\ndef ask_password():\n    global isLogin, counter\n    counter += 1\n    if isLogin and input() == \"password\":\n        print(\"Пароль принят\")\n        isLogin = False\n    if counter == 3 and isLogin:\n        print(\"В доступе отказано\")\n        isLogin = False\n    counter += 1\n    if isLogin and input() == \"password\":\n        print(\"Пароль принят\")\n        isLogin = False\n    if counter == 3 and isLogin:\n        print(\"В доступе отказано\")\n        isLogin = False\n    counter += 1\n    if isLogin and input() == \"password\":\n        print(\"Пароль принят\")\n        isLogin = False\n    if counter == 3 and isLogin:\n        print(\"В доступе отказано\")\n        isLogin = False\n​\n​\n","Золотое сечение":"def golden_ratio(index):\n    first_integer = -1\n    last_integer = -2\n    summa = -1\n    array = []\n    array.append(1)\n    while len(array) != index + 1:\n        first_integer = summa - first_integer\n        last_integer = summa\n        summa = first_integer + last_integer\n        array.append(summa * -1)\n    print(array[index] / array[index - 1])\n​\n","Правильная скобочная последовательность":"import re\n​\n​\ndef bracket_check(string):\n    for i in string:\n        string = re.sub(\"(\\(\\))\", \"\", string)\n    print(\"NO\" if string != \"\" else \"YES\")\n​\n​\n","Уравнение прямой":"def equation(coordinate1, coordinate2):\n    try:\n        x1, y1 = map(lambda x: float(x), coordinate1.split(\";\"))\n        x2, y2 = map(lambda x: float(x), coordinate2.split(\";\"))\n        k = (y1 - y2) / (x1 - x2)\n        b = y2 - k * x2\n        k = k if k != 0.0 else \"\"\n        # b = b if b != 0.0 else \"\"\n        print((str(k) + \" \" + str(b)).strip())\n    except Exception:\n        print(\"0.0\")\n​\n","ДлинношеееРУЧ":"import re\n​\nenglish_lovels = {'a', 'e', 'i', 'o', 'u', 'y'}\nrussian_lovels = {'а', 'о', 'э', 'и', 'у', 'ы', 'е', 'ё', 'ю', 'я'}\n​\nlo = english_lovels ^ russian_lovels\n​\n​\ndef print_long_words(t):\n    [print(i.lower()) for i in list(filter(lambda word: len(list(\n        filter(lambda x: x in lo, word))) >= 4, re.sub(r\"[^\\w\\s]\", \"\", t).split(\" \")))]\n​\n","Некто":"main_word = input()\nuser_input = int(input())\nwhile user_input != 42:\n    print(f\"{main_word} заглядывает в окно {user_input // 42}!\")\n    user_input = int(input())\n​\n","Всё вокруг":"start = int(input())\nend = int(input())\nstep = int(input())\n​\narray = []\n​\nif start < end:\n    for i in range(start, end + 1, step // 3):\n        array.append(i)\nelse:\n    for i in range(start, end + 1, -(step // 3)):\n        array.append(i)\n​\nfinal_answer = []\nfor i in array:\n    if i % step == 0:\n        break\n    final_answer.append(str(i))\n​\nprint(\" \".join(final_answer))\n​\n​\n​\n","Мечты":"check_words = [i for i in input().split(\" \")]\nsecond_string = [i for i in input().split(\"-#-\")]\nthird_string = [i for i in input().split(\"+++\")]\n​\nfor i in check_words:\n    i = i.lower()\n    print(i + \":\")\n    local_second_string = []\n    for j in second_string:\n        j = j.lower()\n        if len(set(list(i.lower())) | set(list(j.lower()))) >= 4 and len(j) >= len(i):\n            local_second_string.append(j.capitalize())\n    print(\", \".join(local_second_string))\n    local_third_string = []\n    for j in third_string:\n        if len(set(list(j.lower())) - set(list(i.lower()))) >= 2 and (j.isalnum() or j.isalpha()):\n            local_third_string.append(j)\n    separator = f\" {i[-1].capitalize()} \"\n    print(separator.join(local_third_string))\n​\n​\n","Считать и вывести таблицу":"array = []\namount = int(input())\npeer = int(input())\nfor i in range(amount):\n    array.append([input()])\n    for j in range(peer - 1):\n        array[i].append(input())\n​\nfor i in range(len(array)):\n    for j in array[i]:\n        print(j, end=\"\\t\")\n    print()\n​\n​\n","Считать и вывести таблицу — 2":"array = []\namount = int(input())\npeer = int(input()) - 1\nfor i in range(amount):\n    array.append([input()])\n    for j in range(peer):\n        array[i].append(input())\n​\nfor i in range(len(array)):\n    for j in array[i]:\n        print(j, end=\"\\t\")\n    print()\n​\nprint()\n​\nfor i in range(len(array[0])):\n    for j in range(len(array)):\n        print(array[j][i], end=\"\\t\")\n    print()\n​\n","Окно":"array = [int(input()) for i in range(int(input()))]\nmin = int(input())\nmax = int(input())\narray = [i for i in array if i <= max and i >= min]\n[print(i) for i in array]\n​\n","bf--":"fucking = [0] * 30000\npointer = 0\nfor i in input():\n    if i == \">\":\n        pointer = (pointer + 1) % 30000\n    if i == \"<\":\n        pointer = (pointer - 1) % 30000\n    if i == \"+\":\n        fucking[pointer] = (fucking[pointer] + 1) % 256\n    if i == \"-\":\n        fucking[pointer] = (fucking[pointer] - 1) % 256\n    if i == \".\":\n        print(fucking[pointer])\n​\n​\n","Сборка текста":"numbers = input().split(\" \")\nwords = input().split(\" \")\nanswer = \"\"\nfor i in numbers:\n    for j in range(len(words)):\n        if j + 1 == int(i):\n            answer += words[j] + ' '\n​\nanswer = answer.lower()\nanswer = answer.capitalize()\nprint(answer)\n​\n","Все смешалось":"important_string = input()\ndreams = input().split(\" -- \")\nanswer = []\nfor i in range(len(dreams)):\n    dreams[i] = list(dreams[i])\n​\nfor i in dreams:\n    counter = 0\n    matched = []\n    for j in important_string:\n        if j in i and j not in matched:\n            counter += 1\n            matched.append(j)\n    if counter >= 4:\n        answer.append(\"\".join(i))\n​\nprint(\" = \".join(answer))\n​\n","Список драгоценностей":"numbers = input().split(\" \")\nanswer = []\nmatched = []\nfor i in numbers:\n    if len(i) == 3 and int(i) > int(numbers[-1]) and i not in matched:\n        answer.append(i)\n        matched.append(i)\n​\nprint(\" \".join(answer))\n​\n","Весна в Старгороде":"couple_amount = int(input())\ncouples = []\n​\nfor i in range(couple_amount):\n    couples.append([input(), input()])\n​\nfor i in couples:\n    for j in i:\n        first_set = set(i[0])\n        second_set = set(i[1])\n    print(\" \".join(first_set - second_set))\n​\n","Макс и решение задач":"days = int(input())\nhours = int(input()) * 60\nminutes = int(input())\none_task_time = int(input())\n​\nprint((days * (hours + minutes)) // one_task_time)\n​\n","Конек-Горбунок и испытание":"humpbacked = float(input())\nhumpbacked_brother_1 = float(input())\nhumpbacked_brother_2 = float(input())\n​\nhours = int(input())\n​\nspoiled = float(input())\n​\narray = []\n​\nif humpbacked * hours >= spoiled:\n    array.append(\"Конек-Горбунок\")\n​\nif humpbacked_brother_1 * hours >= spoiled:\n    array.append(\"Лошадиный брат - 1\")\n​\nif humpbacked_brother_2 * hours >= spoiled:\n    array.append(\"Лошадиный брат - 2\")\n​\nprint(\"Не они!\" if array == [] else \" \".join(array))\n​\n​\n","Найди кота — 6":"array = [input() for i in range(int(input()))]\nnew_array_1 = list(map(lambda x: \"кот\" in x, array))\nfor i in range(len(new_array_1)):\n    if new_array_1[i]:\n        print(i + 1, array[i].index(\"кот\") + 1)\n​\n​\n","Слово для Гиннесса":"print(len(max(input().split(\" \"), key=lambda x: len(x))))\n[i for i in range(len(\"Hello\"))]\n","От и до — 2":"from functools import reduce\narray = [int(i) for i in input().split(\" \")]\nsplice = [int(i) for i in input().split(\" \")]\nprint(reduce(lambda x, y: x + y, array[splice[0]:splice[1] + 1]))\n​\n","От и до — 3":"from functools import reduce\narray = [int(i) for i in input().split(\" \")]\nsplice = [int(i) for i in input().split(\" \")]\nprint(sum(map(lambda x: x * x, array[splice[0]:splice[1] + 1])))\n​\n","Комментарии в программе":"import re\n​\nstrings_amount = input()\nstrings_amount_pattern = r\"#\"\ncomment_string_pattern = r\"#.+\"\n​\nstrings_amount = int(re.sub(strings_amount_pattern, \"\", strings_amount))\n​\nfor i in range(strings_amount):\n    print(re.sub(r\"\\s+$\", \"\", re.sub(comment_string_pattern, \"\", input() + \" \")))\n​\n​\n","М-И-Р Б-У-Д-Е-Т Н-А-Ш":"import re\nstring = input().upper()\n​\nstring = \"-\".join(string)\n​\nprint(re.sub(r\"-\\s-\", \" \", string))\n​\n​\n​\n​\n","Польский калькулятор":"import re\n​\nstring = input()\n​\narray = string.split(\" \")\n​\n​\nstack = []\n​\nfor i in range(len(array)):\n    if re.findall(r\"[0-9]\", array[i]):\n        stack.append(int(array[i]))\n    if array[i] == \"-\" or array[i] == \"+\" or array[i] == \"*\" or array[i] == \"/\":\n        while stack:\n            # print(\"На вход\" + \" \" + str(stack))\n            if array[i] == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            if array[i] == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            if array[i] == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            if array[i] == \"/\":\n                stack.append(stack.pop() / stack.pop())\n            array[i] = \"\"\n            # print(\"На выход\" + \" \" + str(stack))\n            break\n​\nprint(stack[0])\n​\n​\n","Маленький частотный анализ":"import re  # максимально тупое решение\n​\nword = input()\n​\nindexes = []\n​\nfor i in range(len(word)):\n    counter = 0\n    for j in range(len(word)):\n        if word[i].lower() == word[j].lower() and word[j] != \" \" and word[i] != \" \":\n            counter += 1\n    indexes.append(counter)\n​\ncandidates = []\n​\nfor i in range(len(indexes)):\n    candidates.append(word[indexes.index(max(indexes))])\n    indexes[i] = 0\n​\n​\ncandidates = \"\".join(sorted(candidates))\nanswer = candidates\n​\ntry:\n    dno = re.findall(r\"(\\W+)\", candidates)[0]\n    answer = re.sub(dno, \"\", candidates) + dno\nexcept Exception:\n    pass\n​\nprint(answer[0].lower())\n​\n","Знаков без пробелов":"import re\n​\nprint(len(re.findall(r\"(?![\\s]+)\", input())) - 1)\n​\n","Пирамида из кубиков":"print(\"Hello wolrd\")\n​\n","Длинношеееед":"string = sorted(input().lower())\n​\nit_was = []\n​\narray = []\n​\nfor i in string:\n    counter = 0\n    if i in it_was:\n        continue\n    for j in string:\n        if i == j:\n            counter += 1\n    it_was.append(i)\n    array.append(counter)\n​\nprint(max(array))\n​\n","Глория Скотт":"user_string = input().split()\nanswer = \"\"\ncounter = 0\n​\nfor i in range(len(user_string)):\n    counter += 1\n    if counter % 3 == 0:\n        answer += user_string[i] + \" \"\n​\nprint(answer)\n​\n","Горизонтальная диаграмма":"for i in [int(i) for i in input().split()]:\n    for j in range(i):\n        print(\"*\", end=\"\")\n    print()\n​\n","Списочная квадратура":"[print(i ** 2) for i in range(int(input()))]\n","Списочная квадратура — 2РУЧ":"print(\" \".join([str(i ** 2) for i in range(int(input()))]))\n​\n","Списочная квадратура — 3РУЧ":"print(\" \".join([str(int(i) ** 2) for i in input().split()]))\n​\n","Списочная квадратура — 4РУЧ":"print(\" \".join([str(int(i) ** 2) for i in input().split() \n                if str(int(i) ** 2)[-1] != \"9\" and int(i) % 2 != 0]))\n​\n","Список строк":"import re\narray = [i for i in input().split(\" \")]\narray = [i for i in array if i != \"\"]\nstring = str(array)\nstring = re.sub(r\"'\", \"\\\"\", string)\nprint(string)\n​\n","Только без лука!":"print(\", \".join(list(filter(lambda x: \"лук\" not in x, [input() for i in range(int(input()))]))))\n","Произведение":"numbers = []\nfor i in range(int(input())):\n    numbers.append(int(input()))\n​\nnumber = int(input())\nanswer = \"НЕТ\"\n​\nfor i in range(len(numbers)):\n    for j in range(len(numbers)):\n        if i == j:\n            continue\n        if numbers[j] * numbers[i] == number:\n            answer = \"ДА\"\n​\nprint(answer)\n​\n","Числа Трибоначчи":"numbers = [1, 1, 1]\nsumma = 0\n​\nfor i in range(int(input())):\n    summa = 0\n    if i == len(numbers) - 1:\n        number = (numbers[i] + numbers[i - 1] + numbers[i - 2])\n        numbers.append(number)\n    print(numbers[i])\n​\n","Отбор":"amount = int(input())\ngood_pupils = []\npupils = []\n​\nfor i in range(amount):\n    pupil = input()\n    if \"4\" in pupil or \"5\" in pupil:\n        good_pupils.append(pupil)\n    pupils.append(pupil)\n​\nfor i in pupils:\n    print(i)\n​\nprint()\n​\nfor i in good_pupils:\n    print(i)\n​\n","Сортировка по алфавиту":"array = [(input(),) for i in range(int(input()))]\nfor i in range(len(array) - 1):\n    for j in range(len(array) - i - 1):\n        if array[j] > array[j + 1]:\n            array[j], array[j + 1] = array[j + 1], array[j]\n[print(i[0]) for i in array]\n​\n","Сортировка по длине":"array = [input() for i in range(int(input()))]\nfor i in range(len(array) - 1):\n    for j in range(len(array) - i - 1):\n        if len(array[j]) > len(array[j + 1]):\n            array[j], array[j + 1] = array[j + 1], array[j]\n        else:\n            comparison = (array[j], array[j + 1])\n            if (comparison[0],) < (comparison[1],):\n                pass\n            else:\n                array[j], array[j + 1] = array[j + 1], array[j]\n[print(i) for i in array]\n​\n","Децимация":"array = [input() for i in range(int(input()))]\nevery = int(input())\n​\nfor i in range(int(input())):\n    losers = []\n    for j in range(every - 1, len(array), every):\n        array[j] = \"\"\n        losers.append(array[j])\n    for j in losers:\n        array.remove(j)\n​\n[print(i) for i in array]\n​\n","Напёрстки":"thimbles = [(i + 1, input()) for i in range(int(input()))]\n​\nfor i in range(int(input())):\n    remains = int(input())\n    permutation = [int(input()) for i in range(remains)]\n    new_thimbles = []\n    for j in range(len(permutation)):\n        for k in thimbles:\n            if permutation[j] == k[0]:\n                new_thimbles.append((j + 1, k[1]))\n    thimbles = new_thimbles\n​\n[print(i[1]) for i in new_thimbles]\n​\n","Сортировка в обратном порядке":"a = [int(input()) for i in range(int(input()))]\nN = len(a)\n​\nfor i in range(N - 1):\n    for j in range(N - i - 1):\n        if a[j] < a[j + 1]:\n            a[j], a[j + 1] = a[j + 1], a[j]\n​\n[print(i) for i in a]\n​\n","Список покупок":"array = []\n​\nfor i in range(int(input())):\n    array.append(input())\n​\nfor i in array:\n    print(i)\n​\n","Пра-пра-пра-Яндекс":"array = []\nfor i in range(int(input())):\n    array.append(input())\n​\nsearch_string = input()\n​\nfor i in array:\n    if search_string in i:\n        print(i)\n​\n","Буква каждого слова":"array = []\nfor i in range(int(input())):\n    array.append(input())\n​\nindex = int(input())\n​\nfor i in array:\n    if len(i) < index:\n        continue\n    print(i[index - 1], end=\"\")\n​\n","Автоматическое объявление":"array = []\narray_of_indexes = []\nfor i in range(int(input())):\n    array.append(input())\n​\nfor i in range(int(input())):\n    array_of_indexes.append(int(input()))\n​\nfor i in array_of_indexes:\n    print(array[i - 1])\n​\n​\n","Пра-пра-пра-Яндекс — 2":"array = []\nsearch_strings = []\narray_hz = []\nfor i in range(int(input())):\n    array.append(input())\n​\nfor i in range(int(input())):\n    search_strings.append(input())\n​\nfor i in array:\n    answer = i\n    isGood = True\n    for j in search_strings:\n        if j in answer and isGood:\n            isGood = True\n        else:\n            isGood = False\n            continue\n​\n    if isGood:\n        print(answer)\n​\n​\n","Супы":"array = [\"щи\", \"борщ\", \"щавелевый суп\", \"овсяный суп\", \"суп по-чабански\"]\ncounter = int(input())\n​\n​\ndef function(index, counter):\n    if counter == 0:\n        return\n    print(array[index])\n    # print(counter, index)\n    counter -= 1\n    index += 1\n    if index == len(array):\n        index = 0\n    function(index, counter)\n​\n​\nfunction(0, counter)\n​\n","Инвестиционный фонд":"array = []\n​\nfor i in range(int(input())):\n    array.append(int(input()))\n​\nfor i in array:\n    print(i)\n​\nprint()\n​\nfor i in array:\n    print(i * 3)\n​\n","От и до":"array = []\nsumm = 0\nfor i in range(int(input())):\n    array.append(input())\n​\nstart_index = int(input())\nlast_index = int(input())\n​\nfor i in range(start_index - 1, last_index):\n    summ += int(array[i])\n​\nprint(summ)\n​\n​\n","Слова и буквы":"user_input = input()\nmin_word = \"jsdlfjsadjfksadjfksajfjsdlkfjlsakdjflksajfkjsadlfjsdlkfjk\"\nmax_word = \"\"\nanswer = \"ДА\"\n​\nwhile user_input != \"стоп\":\n    if len(min_word) > len(user_input):\n        min_word = user_input\n    if len(max_word) < len(user_input):\n        max_word = user_input\n    user_input = input()\n​\nfor i in min_word:\n    if i in max_word:\n        answer = \"ДА\"\n    else:\n        answer = \"НЕТ\"\n        break\n​\nprint(answer)\n​\n","Быки и коровы":"match = 0\nnot_match = 0\nword1 = input()\nword2 = input()\n​\nfor i in range(len(word1)):\n    if word1[i] == word2[i]:\n        match += 1\n    else:\n        if word1[i] in word2:\n            not_match += 1\n​\nprint(match, not_match)\n​\n","Имя пользователя":"letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n           'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1', '2',\n           '3', '4', '5', '6', '7', '8', '9', '0', '_']\n​\nanswer = \"OK\"\n​\nfor i in input():\n    if i not in letters:\n        answer = \"Неверный символ: \" + i\n        break\n​\nprint(answer)\n​\n","Шах и мат, программисты":"letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]\n​\nsize = int(input())\nfor i in reversed(range(size + 1)):\n    if i == 0:\n        continue\n    for j in range(size):\n        print(letters[j] + str(i), end=\" \")\n    print(\"\")\n​\n","Вредные советы":"amount = int(input())\n​\nfor i in range(amount):\n    advice = input()\n    if (advice[0] == \"Н\" or advice[0] == \"н\") and advice[1] == \"е\" and advice[2] == \" \":\n        print(advice[3:len(advice)])\n    else:\n        print(advice)\n​\n","Анонс новости":"max_length_of_string = int(input())\namount_of_strings = int(input())\n​\nfor i in range(amount_of_strings):\n    string = input()\n    length = max_length_of_string\n    print(string if len(string) <= length else string[0:length - 3] + \"...\")\n","Найди кота — 5":"amount = int(input())\n​\nfor i in range(amount):\n    user_string = input()\n    for j in range(len(user_string)):\n        if j + 2 < len(user_string):\n            if user_string[j] == \"к\" and user_string[j + 1] == \"о\" and user_string[j + 2] == \"т\":\n                print(i + 1, j + 1)\n                break\n​\n","Розенкранц и Гильденстерн меняют профессию":"string = input()\nstring = \"р\" + string + \"р\"\nmaximal = 0\ncounter = 0\n​\nfor i in string:\n    if i == \"о\":\n        counter += 1\n    else:\n        if maximal < counter:\n            maximal = counter\n        counter = 0\n​\nprint(maximal)\n​\n","Пятая буква":"user_input = input()\n​\nif len(user_input) - 1 >= 4:\n    print(user_input[4])\nelse:\n    print(\"НЕТ\")\n","Скажите а":"user_input = input()\n​\nif user_input[0] == \"а\":\n    print(\"ДА\")\nelse:\n    print(\"НЕТ\")\n","Последняя буква":"print(input()[-1])\n","Игра в города: один раунд":"word1 = input()\nword2 = input()\n​\nif word1[-1] == word2[0]:\n    print(\"ВЕРНО\")\nelse:\n    print(\"НЕВЕРНО\")\n","Игра в города":"town = input()\nwhile True:\n    nextTown = input()\n    if town[-1] == nextTown[0]:\n        town = nextTown\n        continue\n    else:\n        print(nextTown)\n        break\n​\n","Сколько-то букв по вертикали":"word = input()\n​\nfor i in word:\n    print(i)\n","Начинающий шифровальщик":"word = input()\ncounter = 0\n​\nfor i in word:\n    counter += 1\n    print(str(ord(i)) + \", \", end=\"\") if counter != len(word) else print(str(ord(i)), end=\"\")\n","Бурсацкое развлечение":"number = int(input())\nwhile str(number)[0] != \"1\":\n    if number > 1000000000:\n        break\n    number *= int(str(number)[0])\nprint(number)\n","Какая-то там буква":"string = input()\npart = int(input())\n​\ntry:\n    if part < 0 or part == 0:\n        part = -10000000000000000000000000\n    print(string[part - 1])\nexcept IndexError:\n    print(\"ОШИБКА\")\n​\n","Цезарь его знает":"alpha1 = \"абвгдежзийклмнопрстуфхцчшщъыьэюя\"\nalpha2 = \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ\"\nanswer = \"\"\nshift = int(input())\nstring = input()\nfor i in string:\n    if i.islower():\n        answer += alpha1[(alpha1.index(i) + shift) % len(alpha1)]\n    elif i.isupper():\n        answer += alpha2[(alpha2.index(i) + shift) % len(alpha2)]\n    else:\n        answer += i\n​\nprint(answer)\n","Поездка на автобусе":"first_list = set()\nsecond_list = set()\n​\nuser_input = input()\nwhile user_input != \"\":\n    first_list.add(user_input)\n    user_input = input()\n​\nuser_input = input()\nwhile user_input != \"\":\n    second_list.add(user_input)\n    user_input = input()\n​\nfinal_list = first_list & second_list\n​\nif len(final_list):\n    for i in final_list:\n        print(i)\nelse:\n    print(\"EMPTY\")\n​\n","Города":"cities = set()\namount = int(input())\n​\nfor i in range(amount):\n    town = input()\n    cities.add(town)\n​\nnewTown = input()\n​\nif newTown in cities:\n    print(\"TRY ANOTHER\")\nelse:\n    print(\"OK\")\n","Языки – 0":"english = set()\ngerman = set()\n​\nenglish_amount = int(input())\ngerman_amount = int(input())\n​\nfor i in range(english_amount):\n    english.add(input())\n​\nfor i in range(german_amount):\n    german.add(input())\n​\none_language = german ^ english\n​\nprint(len(one_language) if len(one_language) else \"NO\")\n​\n","Языки – 1":"english = set()\ngerman = set()\n​\nenglish_amount = int(input())\ngerman_amount = int(input())\n​\nfor i in range(english_amount + german_amount):\n    newPerson = input()\n    if newPerson not in english:\n        english.add(newPerson)\n    else:\n        german.add(newPerson)\n​\none_language = german ^ english\n​\nprint(len(one_language) if len(one_language) else \"NO\")\n​\n","Языки – 2":"english = set()\ngerman = set()\nspanish = set()\n​\nenglish_amount = int(input())\ngerman_amount = int(input())\nspanish_amount = int(input())\n​\nfor i in range(english_amount + german_amount + spanish_amount):\n    newPerson = input()\n    if newPerson not in english:\n        english.add(newPerson)\n    elif newPerson not in german:\n        german.add(newPerson)\n    else:\n        spanish.add(newPerson)\n​\nthree_language_persons = english & spanish & german\n​\nfor i in range(3):\n    for j in three_language_persons:\n        english.discard(j)\n        german.discard(j)\n        english.discard(j)\n​\ntwo_language_persons = len(english & german) + len(english & spanish) + len(spanish & german)\n​\nprint(two_language_persons if two_language_persons else \"NO\")\n​\n","Книги на лето":"home_library = []\nlist_of_books = []\n​\nhome_library_amount = int(input())\nlist_of_books_amount = int(input())\n​\nfor i in range(home_library_amount):\n    newBook = input()\n    home_library.append(newBook)\n​\nfor i in range(list_of_books_amount):\n    newBook = input()\n    list_of_books.append(newBook)\n​\nfor i in list_of_books:\n    if i in home_library:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n​\n","Посещаемость":"amount_of_lists = int(input())\n​\nlist_of_ideal_pupil = set()\n​\nfor i in range(amount_of_lists):\n    list_length = int(input())\n    list_of_names = set()\n    for j in range(list_length):\n        list_of_names.add(input())\n    if i == 0:\n        list_of_ideal_pupil = list_of_names\n    else:\n        list_of_ideal_pupil = list_of_names & list_of_ideal_pupil\n​\nfor i in list_of_ideal_pupil:\n    print(i)\n​\n","Однофамильцы":"amount = int(input())\n​\npeople = []\n​\nwhile amount != 0:\n    people.append(input())\n    amount -= 1\n​\nmaximal_value = []\nit_was = []\n​\n# print(people)\n​\nfor i in people:\n    counter = 0\n    for j in people:\n        if i == j:\n            counter += 1\n    # print(it_was)\n    if counter != 1 and counter != 0 and i not in it_was:\n        it_was.append(i)\n        maximal_value.append(counter)\n​\n# print(maximal_value)\nprint(sum(maximal_value))\n​\n","Таблица умножения":"number = int(input())\n​\nfor i in range(1, number + 1):\n    for j in range(1, number + 1):\n        print(i * j, end=\"\\t\")\n    print()\n","Таблица не в виде таблицы":"number = int(input())\n​\nfor i in range(1, number + 1):\n    for j in range(1, number + 1):\n        print(str(i) + \" * \" + str(j) + \" = \" + str(j * i))\n","Ёлочный счёт":"number = int(input())\ncounter = 0\n​\nfor i in range(1, number + 1):\n    for j in range(i):\n        if number <= counter:\n            break\n        counter += 1\n        print(counter, end=\" \")\n    print()\n","Логистический максимин":"roads = int(input())\nfinalAnswer = 0\nfinalRoad = 0\n​\nfor i in range(1, roads + 1):\n    answer = 0\n    road = 0\n    min = 9999999999999\n    tunnels = int(input())\n    for j in range(tunnels):\n        height = int(input())\n        if height < min:\n            min = height\n        if height == min:\n            answer = height\n            road = i\n    if answer > finalAnswer:\n        finalAnswer = answer\n        finalRoad = road\n​\n​\nprint(finalRoad, finalAnswer)\n","Таблица деления":"width = int(input())\nheight = int(input())\n​\nfor i in range(1, height + 1):\n    for j in range(1, width + 1):\n        print(j / i, end=\" \")\n    print()\n​\n","Рисуем прямоугольник":"width = int(input())\nheight = int(input())\nsymbol = input()\n​\nfor i in range(0, width):\n    for j in range(0, height):\n        if i == 0 or i == width - 1 or j == 0 or j == height - 1:\n            print(symbol, end=\"\")\n        else:\n            print(\" \", end=\"\")\n        if j == height - 1:\n            print()\n​\n","FizzBuzz":"number1 = int(input())\nnumber2 = int(input())\n​\nfor i in range(number1, number2 + 1):\n    string = \"\"\n    number = i\n    if(number % 3 == 0):\n        string += \"Fizz\"\n    if(number % 5 == 0):\n        string += \"Buzz\"\n    if(string == \"\"):\n        string = number\n​\n    print(string)\n​\n","Найди кота":"amount = int(input())\nmessage = \"НЕТ\"\n​\nfor i in range(0, amount):\n    string = input()\n    if (\"Кот\" in string or \"кот\" in string):\n        message = \"МЯУ\"\n​\nprint(message)\n​\n","Найди кота — 2":"amount = 999999999999999\nmessage = \"\"\ncounter = 1\n​\nfor i in range(0, amount):\n    string = input()\n    if (\"Кот\" in string or \"кот\" in string):\n        print(counter)\n        break\n    if (\"СТОП\" in string):\n        print(-1)\n        break\n    counter += 1\n​\n​\n","Найди кота (break)":"amount = int(input())\nmessage = \"НЕТ\"\n​\nfor i in range(0, amount):\n    string = input()\n    if (\"Кот\" in string or \"кот\" in string):\n        message = \"МЯУ\"\n        break\n​\nprint(message)\n​\n","Найди кота — 2 (break)":"amount = 999999999999999\nmessage = \"\"\ncounter = 1\n​\nfor i in range(0, amount):\n    string = input()\n    if (\"Кот\" in string or \"кот\" in string):\n        print(counter)\n        break\n    if (\"СТОП\" in string):\n        print(-1)\n        break\n    counter += 1\n​\n​\n","Найди кота — 3":"user_input = input()\nall = 0\ncounter = 1\nfirst = 0\n​\nwhile user_input != \"СТОП\":\n    if \"кот\" in user_input or \"КОТ\" in user_input or \"Кот\" in user_input:\n        all += 1\n        if first == 0:\n            first = counter\n    user_input = input()\n    counter += 1\n​\nprint(all, -1 if first == 0 else first)\n​\n","Найди кота — 4":"answer = \"\"\n​\nfor i in range(int(input())):\n    user_input = input()\n    if \"Кот\" in user_input or \"кот\" in user_input:\n        answer = \"МЯУ\"\n    if \"Пёс\" in user_input or \"пёс\" in user_input:\n        answer = \"\"\n​\nprint(answer if answer != \"\" else \"НЕТ\")\n​\n","Школа танцев":"patience = int(input())\n​\ncounter = 0\n​\npriveouse_word = \"\"\n​\n​\ndef main():\n    global patience, priveouse_word, counter   \n    if patience == 0:\n        print(\"На сегодня хватит.\")\n        return\n    word = input()\n    if counter == 0:\n        priveouse_word = word\n    if (\n        (word == \"раз\" and priveouse_word == \"раз\")\n        or (word == \"раз\" and priveouse_word == \"четыре\")\n        or (word == \"два\" and priveouse_word == \"раз\")\n        or (word == \"три\" and priveouse_word == \"два\")\n        or (word == \"четыре\" and priveouse_word == \"три\")\n    ):\n        counter += 1\n        priveouse_word = word\n    else:\n        print(f\"Правильных отсчётов было {counter}, но теперь вы ошиблись.\")\n        counter = 0\n        patience -= 1\n    main()\n​\n​\nmain()\n","Биржевой роботРУЧ":"usr_input = int(input())\n​\nearnings = \"\"\n​\nis_bought = False\n​\nwhile usr_input != 0:\n    new_usr_input = int(input())\n    if new_usr_input > usr_input and not is_bought:\n        earnings += str(new_usr_input)\n        is_bought = True\n        continue\n    if new_usr_input < usr_input and is_bought:\n        earned = int(new_usr_input) - int(earnings)\n        earnings += \" \" + str(new_usr_input) + \" \" + str(earned)\n        break\n    usr_input = new_usr_input\n​\nprint(earnings)\n","Ждём потепления":"deg = float(input())\ncounter = 0\n​\nwhile not deg >= 22:\n    counter += 1\n    deg = float(input())\n​\nprint(counter // 7)\n​\n","Повторение - мать учения: ultimate edition":"string = str(input())\ndelay = int(input())\n​\n​\nfor i in range(0, delay):\n    print(string)\n​\n","Кубизм":"int = int(input())\n​\nfor i in range(0, int + 1):\n    print(\"Куб числа {} равен {}\".format(i, i * i * i))\n","Факториал":"int = int(input())\nint2 = 1\n​\nfor i in range(1, int + 1):\n    int2 *= i\n​\nprint(int2)\n​\n","Перемножить без трюков":"composition = 1\ncounter = 0\n​\nwhile counter != 6:\n    number = int(input())\n    if (number != 0):\n        composition *= number\n    counter += 1\n​\nprint(composition)\n​\n","Вышел зайчик погулять":"number = int(input())\ncounter = 0\n​\nwhile counter != number + 1:\n    print(str(counter) + \" \", end=\"\")\n    counter += 1\n​\n","Делите ли":"number = int(input())\naddDeviders = \"\"\n​\nfor i in range(1, number + 1):\n    if number % i == 0:\n        addDeviders += str(i) + \" \"\n​\nif addDeviders != (\"1\" + \" \" + str(number) + \" \"):\n    print(addDeviders)\n    print(\"НЕТ\")\nelse:\n    print(addDeviders)\n    print(\"ПРОСТОЕ\")\n","Обратный отсчёт":"number = int(input())\n​\nfor i in reversed(range(0, number + 1)):\n    print(\"Осталось секунд: \" + str(i))\n​\nprint(\"Пуск\")\n​\n","Пирамида":"number = int(input())\n​\nfor i in range(0, number):\n    print((\" \" * (number - i - 1)) + (\"*\" * (i * 2)) + \"*\" + (\" \" * (number - i - 1)))\n​\n","Тест на делимость":"for i in range(17):\n    number = int(input())\n    if i % number != 0:\n        print(\"НЕТ\")\n    else:\n        print(\"ДА\")\n​\n","Умнее среднего":"summ = 0\n​\npeople = int(input())\n​\nfor i in range(1, people + 1):\n    iq = int(input())\n    summ += iq\n    if i == 1 or (summ / i) == iq:\n        print(0)\n        continue\n    elif (summ / i) > iq:\n        print(\">\")\n    elif (summ / i) < iq:\n        print(\"<\")\n​\n","Шварценеггер против Годзиллы":"amount = int(input())\nsumm = 0\n​\nfor i in range(amount):\n    numerator = int(input())\n    denomination = int(input())\n    summ += numerator / denomination\n​\nnumber = 1000000\nsumm = int(summ * number)\ncounter = 2\n​\n​\ndef toOften(counter, summ, number):\n    if counter == summ and number % counter == 0:\n        print(str(summ // counter) + \"/\" + str(number // counter))\n        exit()\n    elif counter == summ:\n        print(str(summ) + \"/\" + str(number))\n        exit()\n    if summ % counter == 0 and number % counter == 0:\n        number = number // counter\n        summ = summ // counter\n        counter = 2\n        toOften(counter, summ, number)\n    counter += 1\n    toOften(counter, summ, number)\n​\n​\ntoOften(counter, summ, number)\n​\n","Дзета-функция Римана":"from math import pi\nnumber = int(input())\nsumm = 0\nPI = pi\n​\nfor i in range(1, number + 1):\n    summ += (1 / (i * i))\n​\nprint((pi * pi) / summ)\n​\n​\n","Сумма ряда":"amount = int(input())\nsumm = 0\ncounter = 1\n​\nwhile counter != amount + 1:\n    number = int(input())\n    while counter % 2 == 0:\n        summ -= number\n        break\n    while counter % 2 != 0:\n        summ += number\n        break\n    counter += 1\n​\nprint(summ)\n​\n","Псевдоним v2.0":"","Банк":"amount = int(input(\"Добро пожаловать в интернет-банк!\\n\\\nУ нас фантастические процентные ставки!\\n\\\nДля вкладов до 10 тысяч ₽ включительно прибыль составит 10%,\\n\\\nдля вкладов на сумму до 100 тысяч включительно - 20%,\\n\\\nдля более 100 тысяч - 30%!\\n\\\nНа какую сумму желаете сделать вклад?\\n\"))\n​\nprofit = 0\n​\nif amount <= 10000:\n    profit = amount / 100 * 10 + amount\nelif amount <= 100000:\n    profit = amount / 100 * 20 + amount\nelse:\n    profit = amount / 100 * 30 + amount\n​\nprint(\"Вы получаете \" + str(profit) + \" ₽, поздравляем!\")\n​\n","Фибоначчи":"amount = int(input())\nfirst_integer = -1\nlast_integer = -2\nsumma = -1\n​\nwhile summa * -1 <= amount:\n    print(summa * - 1)\n    first_integer = summa - first_integer\n    last_integer = summa\n    summa = first_integer + last_integer\n​\n","Ним-пасьянс":"amount = int(input())\n​\n​\ndef nim(num, counter):\n    if not counter == 0:\n        print(num)\n    takes = int(input())\n    if takes >= num:\n        print(0)\n        return\n    counter += 1\n    nim(num - takes, counter)\n​\n​\nnim(amount, 0)\n","Псевдоним-пасьянс":"amount = int(input())\n​\nwhile amount != 0:\n    takes = int(input())\n    if takes > 3 or takes < 1 or takes > amount:\n        print(amount)\n        continue\n    if takes == amount:\n        amount = 0\n        print(amount)\n    else:\n        amount = amount - takes\n        print(amount)\n​\n","Остров невезения":"d = int(input('Введите день: '))\nm = int(input('Введите месяц: '))\ne = int(input('Введите год: ')) - 1\n \nc  = e / 100\ny = ((e - 1) % 100) + 1\n \nr = d + ((13*m - 1) // 5 ) + y + (y //4 + c // 4 - 2*c + 777)\nr %= 7\nprint( str(int(r)) )\n","Вспомнить всё: if":"number = float(input())\n​\nif number < 15.5:\n    print(\"ХОЛОДНО\")\nelif number > 28:\n    print(\"ЖАРКО\")\nelse:\n    print(\"НОРМАЛЬНО\")\n","password123":"password = input()\npassword2 = input()\npassword_length = len(password)\n​\nif password_length < 8:\n    print(\"Короткий!\")\nelif password2 != password:\n    print(\"Различаются.\")\nelse:\n    print(\"OK\")\n​\n","Числа до нуля":"number = int(input())\n​\nwhile number != 0:\n    print(number)\n    number = int(input())\n","Строки до пустой":"string = input()\n​\nwhile string != \"\":\n    print(string)\n    string = input()\n","Учитель":"num = int(input())\n​\nwhile num // 8:\n    num //= 8\n​\nprint(num)\n​\n","Скидки":"num = float(input())\nsum = 0\n​\nwhile num > 0:\n    if num > 1000:\n        sum += num - (num / 100 * 5)\n    else:\n        sum += num\n    num = float(input())\n​\nprint(sum)\n","Таких берут в космонавты":"height = input()\ncounter = 0\nmin = 99999999999999999999999\nmax = 0\n​\nwhile height != \"!\":\n    height = int(height)\n    if not (height > 190 or height < 150):\n        counter += 1\n        if (min > height):\n            min = height\n        if (max < height):\n            max = height\n    height = input()\n​\nprint(counter)\nprint(min, max)\n","Сколько строк?":"counter = 0\n​\nwhile True:\n    str = input()\n    counter += 1\n    if str == \"Спасибо.\":\n        break\n​\nprint(counter)\n","Среднее":"counter = 0\nsum_temperature = 0\n​\nwhile True:\n    temperature = float(input())\n    if (temperature < - 300):\n        break\n    else:\n        sum_temperature += temperature\n    counter += 1\n​\nprint(sum_temperature / counter)\n","1024 и все-все-все":"number = int(input())\nresult = 1\ncounter = 0\n​\nwhile not result >= number:\n    result *= 2\n    counter += 1\n​\n​\nprint(counter if result == number else \"НЕТ\")\n​\n","password123456":"password1 = input()\npassword2 = input()\nresult = \"OK\"\n​\nif len(password1) < 8:\n    result = \"Короткий!\"\nelif \"123\" in password1:\n    result = \"Простой!\"\nelif password1 != password2:\n    result = \"Различаются.\"\n​\nprint(result)\n​\n","Лабиринт с правом на ошибкуРУЧ":"print('я проснулся в темном лесу, в небе сквозь темные облака пробивался свет полной луны')\n​\n​\ndef where_to_go_function():\n    where_to_go = input('выбор \"остаться на месте\" \"на юг\" \"на север\" \"на запад\" \"на восток\": ')\n    if where_to_go == 'на юг':\n        print('отлично я вышел к реке, теперь хотябы не умру от жажды')\n        is_drink = input('выпить воды из реки? \"да\" \"нет\" ')\n        if is_drink == 'да':\n            print('вы выпели воду и отравились')\n            exit_game(False)\n        elif is_drink == 'нет':\n            print('вы не стали пить воду')\n            where_to_go_function()\n        else:\n            exit_game('gg')\n    elif where_to_go == 'на восток':\n        print('здесь вы увидели деревню')\n        is_come_in = input('Войти в деревню \"да\" \"нет\": ')\n        if is_come_in == 'да':\n            print('вы успешно стали обедом для людоедов')\n            exit_game(False)\n        elif is_come_in == 'нет':\n            where_to_go_function()\n        else:\n            exit_game('gg')\n    elif where_to_go == 'на север':\n        print('вы увидели большую стену')\n        is_climb_over = input('вы хотите \"перелезть\" или \"пройти под стеной в туннеле\" ')\n        if is_climb_over == 'перелезть':\n            print('пока вы лезли вы услышали шум лопастей')\n            exit_game(True)\n        elif is_climb_over == 'пройти под стеной в туннеле':\n            print('вы попали в армию белых ходаков')\n            exit_game(False)\n        else:\n            exit_game('gg')\n    elif where_to_go == 'на запад':\n        print('вы нашли три сосны в чистом поле')\n        is_climb_to_tree = input('вы полезите на верхушку \"да полезу\" \"нет не полезу\" ')\n        if is_climb_to_tree == 'да полезу':\n            print('в вас кинула желудем белка и вы упали с дерева и разбились')\n            exit_game(False)\n        elif is_climb_to_tree == 'нет не полезу':\n            where_to_go_function()\n        else:\n            exit_game('gg')\n    else:\n        exit_game('gg')\n​\n​\ndef exit_game(result):\n    if result == 'gg':\n        print('вас съели волки из-за вашего бездействия')\n    elif not result:\n        print('Вы погибли в гордом одиночестве')\n    else:\n        print('Вы успешно прошли игру, вас забрал верталет спасателей')\n    is_restart = input('начать игру сначала \"да\" \"нет\" ')\n    if is_restart == 'да':\n        where_to_go_function()\n    else:\n        print('хорошего вам дня, спасибо за игру')\n​\n​\nwhere_to_go_function()\n​\n","Круглые":"number = int(input())\n​\nwhile number % 10 == 0:\n    print(number)\n    number = int(input())\n","password":"def func():\n    password1 = input()\n    password2 = input()\n    if len(password1) < 8:\n        print(\"Короткий!\")\n        func()\n    elif \"123\" in password1:\n        print(\"Простой!\")\n        func()\n    elif password1 != password2:\n        print(\"Различаются.\")\n        func()\n    else:\n        print(\"OK\")\n​\n​\nfunc()\n​\n​\n","Ищем клад — 1":"treasureXCord = int(input())\ntreasureYCord = int(input())\n​\npirateXCord = 0\npirateYCord = 0\n​\ncommand = \"\"\nh = \"С\"\ncounter = 0\ngive_answ = True\n​\nwhile True:\n    command = input()\n    counter += 1\n    if command == \"стоп\" or \"\":\n        if give_answ:\n            print(counter - 1 if treasureYCord != 0 and treasureXCord != 0 else 0)\n            print(\"запад\" if h == \"З\" else \"восток\" if h == \"В\" else \"север\" if h == \"С\" else \"юг\")\n        break\n    if command == \"разворот\":\n        h = \"С\" if h == \"Ю\" else \"Ю\" if h == \"С\" else \"З\" if h == \"В\" else \"В\"\n    if command == \"вперёд\":\n        stepsAmount = int(input())\n        if h == \"С\":\n            pirateYCord += stepsAmount\n        if h == \"Ю\":\n            pirateYCord -= stepsAmount\n        if h == \"З\":\n            pirateXCord -= stepsAmount\n        if h == \"В\":\n            pirateXCord += stepsAmount\n    if command == \"налево\":\n        h = \"С\" if h == \"В\" else \"З\" if h == \"С\" else \"Ю\" if h == \"З\" else \"В\"\n    if command == \"напрово\":\n        h = \"С\" if h == \"З\" else \"В\" if h == \"С\" else \"Ю\" if h == \"В\" else \"З\"\n    if treasureYCord == pirateYCord and pirateXCord == treasureXCord and give_answ:\n        print(counter)\n        print(\"запад\" if h == \"З\" else \"восток\" if h == \"В\" else \"север\" if h == \"С\" else \"юг\")\n        give_answ = False\n        break\n​\n","Бинарная угадайкаРУЧ":"minimal = 0\nmaximal = 1000\ncounter = 0\nuser_sign = \"\"\nguess = 500\n​\nwhile not counter >= 10:\n    guess = (maximal - minimal) // 2 + minimal\n    print(guess)\n    user_sign = input()\n    if user_sign == \"<\":\n        maximal = guess\n    elif user_sign == \">\":\n        minimal = guess\n    else:\n        break\n    counter += 1\n​\n","Каникулы капризного ребёнка":"town1 = input()\ntown2 = input()\n​\ncond1 = not town1 == town2\ncond2 = town1 == 'Тула' or town2 == 'Пенза'\ncond3 = town1 == 'Пенза' or town2 == 'Пенза' or town2 == 'Тула' or town1 == 'Тула'\ncond4 = not (town1 == 'Тула' and town2 == 'Пенза')\ncond5 = not (town2 == 'Тула' and town1 == 'Пенза')\n​\nif cond1 and cond2 and cond3 and cond4 and cond5:\n    print('ДА')\nelse:\n    print('НЕТ')\n","Факториал: первое знакомство":"print(1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9)\n","Полтора землекопа":"moat_length = 1400\nwork_days = 2\nkpd = 3\n​\n​\ndef calculation(length, days, work):\n    return length // (days * work) + 1\n​\n​\nprint(calculation(moat_length, work_days, kpd))\n​\n","Количество минут в году":"days_per_year = 365\nhours_per_day = 24\nminutes_per_hour = 60\n​\nprint(days_per_year * hours_per_day * minutes_per_hour)\n","Сложить два числа":"int1 = int(input())\nint2 = int(input())\n​\nprint(int1 + int2)\n","Сложить ещё два числа":"int1 = float(input())\nint2 = float(input())\n​\nprint(int1 + int2)\n","Одно число":"int1 = float(input())\nif int1 < 0.000001 and int1 > -0.000001:\n    print(1000000)\nelse:\n    print(1 / int1)\n","Длина":"word = input()\nword_length = len(word)\ntemplate = 'Слово {} имеет длину {}'\nprint(template.format(word, word_length))\n​\n","На раз-два-три, рассчитайсь!":"height1 = int(input())\nheight2 = int(input())\nheight3 = int(input())\n​\nN = 3\n​\na = [height1, height2, height3]\n​\nfor i in range(N - 1):\n    for j in range(N - i - 1):\n        if a[j] > a[j + 1]:\n            a[j], a[j + 1] = a[j + 1], a[j]\n​\nprint(a[2])\nprint(a[1])\nprint(a[0])\n​\n","Плюс-минус":"number = float(input())\n​\nnegative = '-' if number < 0 else ''\npositive = '+' if number > 0 else ''\nnull = '0' if number == 0 else ''\n​\nprint(negative + positive + null)\n​\n","Калькулятор":"num1 = float(input())\nnum2 = float(input())\nsign = input()\nresult = 888888\n​\nprint(\n    num1 / num2 if sign == \"/\" and num2 != 0 else\n    num1 + num2 if sign == \"+\" else\n    num1 - num2 if sign == \"-\" else\n    num1 * num2 if sign == \"*\" else\n    result\n)\n","Високосность":"year = int(input())\n​\nif(year % 4 == 0 and year % 100 != 0 or year % 400 == 0):\n    print(\"Високосный\")\nelse:\n    print(\"Не високосный\")\n","Четырехзначный минимум":"number = input()\nnewNumber = int(''.join(sorted(number)))\n​\nif len(str(newNumber)) == 1:\n    newNumber *= 1000\nelif len(str(newNumber)) == 2:\n    theEnd = newNumber % 10\n    newNumber = newNumber // 10\n    newNumber = newNumber * 1000\n    newNumber += theEnd\nelif len(str(newNumber)) == 3:\n    theEnd = newNumber % 100\n    newNumber = newNumber // 100\n    newNumber = newNumber * 1000\n    newNumber += theEnd\nelse:\n    newNumber = newNumber\n​\nprint(newNumber)\n","Уравнение":"a = 999999\nb = 142857\nprint(a - b)\n","Пополам":"number = int(input())\nprint(\"чётное\" if number % 2 == 0 else \"нечётное\")\n","Верстаем визитную карточку":"name = input()\nprint(len(name) * 2 + 3)\n​\n","Красивое число":"number = int(input())\nfirst = number // 100\nsecond = number // 10 % 10\nlast = number % 10\n​\na = [first, second, last]\n​\nN = len(a)\n​\nfor i in range(N - 1):\n    for j in range(N - i - 1):\n        if a[j] > a[j + 1]:\n            a[j], a[j + 1] = a[j + 1], a[j]\n​\nprint(\"Вы ввели красивое число\" if (a[0] + a[2]) / 2 == a[1] else \"Жаль, вы ввели обычное число\")\n","Собери число":"number = int(input())\nfirst = number // 100\nsecond = number // 10 % 10\nlast = number % 10\nres1 = second + last\nres2 = first + second\nresult = str(res1) + str(res2) if res1 > res2 else str(res2) + str(res1)\nprint(result)\n","Вспомнить всё":"string = input()\nprint(string + \" ? Конечно, помню, ведь мы проходили это на прошлом занятии!\")\n","Ёлочка, гори!":"word_1 = input()\nword_2 = input()\nword_3 = input()\n​\nif word_1 == 'раз' and word_2 == 'два' and word_3 == 'три':\n    print('ГОРИ')\nelse:\n    print('НЕ ГОРИ')\n​\n","Ёлочка-2":"word_1 = input()\nword_2 = input()\nword_3 = input()\n​\ncondition_1 = (word_1 == 'раз')\ncondition_2 = (word_2 == 'два')\ncondition_3 = (word_3 == 'три')\ncondition_4 = (word_1 == '1')\ncondition_5 = (word_2 == '2')\ncondition_6 = (word_3 == '3')\n​\nif condition_1 and condition_2 and condition_3:\n    print('ГОРИ')\nelif condition_4 and condition_5 and condition_6:\n    print('ГОРИ')\nelse:\n    print('НЕ ГОРИ')\n​\n​\n","Ёлочка-3":"word_1 = input()\nword_2 = input()\nword_3 = input()\n​\ncondition_1 = (word_1 == 'раз' or word_1 == 'один')\ncondition_2 = (word_2 == 'два')\ncondition_3 = (word_3 == 'три')\ncondition_4 = (word_1 == '1')\ncondition_5 = (word_2 == '2')\ncondition_6 = (word_3 == '3')\n​\nif condition_1 and condition_2 and condition_3:\n    print('ГОРИ')\nelif condition_4 and condition_5 and condition_6:\n    print('ГОРИ')\nelse:\n    print('НЕ ГОРИ')\n​\n​\n","Личностный тестРУЧ":"import re\nqualitys = []\nperson_qualitiys = []\nprint('Зравствуй юный подаван')\nis_programmer = input('Умеешь ли ты программировать(да/нет): ')\nif re.search(is_programmer, 'да', re.IGNORECASE):\n    qualitys.append('программист')\nelse:\n    qualitys.append('junior')\nis_cotan = input('Любишь ли та котиков(да/нет): ')\nif re.search(is_cotan, 'да', re.IGNORECASE):\n    qualitys.append('котан')\nelse:\n    qualitys.append('не котан')\nis_kind = 'да'\nif re.search(is_kind, 'да', re.IGNORECASE):\n    person_qualitiys.append('добрый')\nelse:\n    person_qualitiys.append('злой')\nfinal_qualitis = ''\nfinal_person_qualitis = ''\nfor i in qualitys:\n    final_qualitis += i + ', '\nfor i in person_qualitiys:\n    final_person_qualitis += i + ' и '\nprint('Вы ' + final_qualitis + 'а также вы просто ' + final_person_qualitis + 'пожалуй все.')\n​\n","Эхо-2":"word = input()\nprint(word * 4)\n​\n","Мяу":"import re\nphrase = input()\nis_cat = re.findall('кот', phrase)\nif is_cat:\n    print('МЯУ')\nelse:\n    print('ГАВ')\n​\n","ЛабиринтРУЧ":"print('я проснулся в темном лесу, в небе сквозь темные облака пробивался свет полной луны')\n​\n​\ndef where_to_go_function():\n    where_to_go = input('перед вами встал выбор \"остаться на месте\" пойти \"на юг\" \"на север\" \"на запад\" \"на восток\": ')\n    if where_to_go == 'на юг':\n        print('отлично я вышел к реке, теперь хотябы не умру от жажды')\n        is_drink = input('выпить воды из реки? \"да\" \"нет\" ')\n        if is_drink == 'да':\n            print('вы выпели воду и отравились')\n            exit_game(False)\n        elif is_drink == 'нет':\n            print('вы не стали пить воду')\n            where_to_go_function()\n        else:\n            exit_game('gg')\n    elif where_to_go == 'на восток':\n        print('здесь вы увидели деревню')\n        is_come_in = input('Войти в деревню \"да\" \"нет\": ')\n        if is_come_in == 'да':\n            print('вы успешно стали обедом для людоедов')\n            exit_game(False)\n        elif is_come_in == 'нет':\n            where_to_go_function()\n        else:\n            exit_game('gg')\n    elif where_to_go == 'на север':\n        print('вы увидели большую стену')\n        is_climb_over = input('вы хотите \"перелезть\" или \"пройти под стеной в туннеле\" ')\n        if is_climb_over == 'перелезть':\n            print('пока вы лезли вы услышали шум лопастей')\n            exit_game(True)\n        elif is_climb_over == 'пройти под стеной в туннеле':\n            print('вы попали в армию белых ходаков')\n            exit_game(False)\n        else:\n            exit_game('gg')\n    elif where_to_go == 'на запад':\n        print('вы нашли три сосны в чистом поле')\n        is_climb_to_tree = input('вы полезите на верхушку \"да полезу\" \"нет не полезу\" ')\n        if is_climb_to_tree == 'да полезу':\n            print('в вас кинула желудем белка и вы упали с дерева и разбились')\n            exit_game(False)\n        elif is_climb_to_tree == 'нет не полезу':\n            where_to_go_function()\n        else:\n            exit_game('gg')\n    else:\n        exit_game('gg')\n​\n​\ndef exit_game(result):\n    if result == 'gg':\n        print('вас съели волки из-за вашего бездействия')\n    elif not result:\n        print('Вы погибли в гордом одиночестве')\n    else:\n        print('Вы успешно прошли игру, вас забрал верталет спасателей')\n    is_restart = input('начать игру сначала \"да\" \"нет\" ')\n    if is_restart == 'да':\n        where_to_go_function()\n    else:\n        print('хорошего вам дня, спасибо за игру')\n​\n​\nwhere_to_go_function()\n​\n​\n","Регистрация почты":"import re\nlogin = input()\nemail = input()\n​\nis_correct_login = re.findall('@', login)\nis_correct_email = re.findall('@', email)\n​\nif not is_correct_login and is_correct_email:\n    print('OK')\nelif is_correct_login:\n    print('Некорректный логин')\nelse:\n    print('Некорректный адрес')\n​\n","Короткая светская беседаРУЧ":"mood = input(\"Какое у вас настроение? \")\n​\nif \"хорошее\" in mood or \"прекрасно\" in mood:\n    print(\"У меня тоже все хорошо\")\nelif \"не\" in mood or \"?\" in mood:\n    print(\"Извините я вас не понимать\")\nelif \"плохо\" in mood or \"ужасно\" in mood:\n    print(\"Ничего, все вскоре наладится\")\nelse:\n    print(\"Извините я вас не понимать\")\n​\n","Эхо-0":"print(input())\n","Да или нет?!":"word1 = input()\nword2 = input()\nprint('ВЕРНО' if word1 == 'да' == word2 == 'да'\n      or word1 == 'нет' == word2 == 'нет' or\n      word1 == 'нет' and word2 == 'да' or\n      word1 == 'да' and word2 == 'нет' else 'НЕВЕРНО')\n​\n","Личностный тест 2РУЧ":"class Err(object):\n    pass\n​\n​\ntry:\n    template = \"Вы {} програмист, который занает {} и который использует {}\"\n    language = input(\"На каком языке вы программируете?(scala, java, c++, assembler, python): \")\n    if not (language == \"scala\" or language == \"java\" or language == \"c++\" or\n            language == \"assembler\" or language == \"python\"):\n        exit()\n    framework = input(\"Какие фреймворки вы знаете? (spring, django, express, flask, dino): \")\n    if not (framework == \"spring\" or framework == \"django\" or\n            framework == \"express\" or framework == \"flask\" or framework == \"dino\"):\n        exit()\n    os = input(\"Каую операционную систему вы используется для разработки? (пингвин, винда, макос): \")\n    if not (os == \"пингвин\" or os == \"винда\" or os == \"макос\"):\n        exit()\n    print(template.format(language, framework, os))\n​\nexcept Err as err:\n    print(\"Вы допустили ошибку\")\n","Приветствие":"print('Привет, Яндекс!')\n","Знакомство":"print('Привет, Яндекс!')\nprint('Приятно познакомиться.')\n​\n","Эхо-1":"word = 'Ауууу!'\nprint(word)\nprint(word)\n​\n","Эхо-1.1":"word = 'Ауууууу!'\nprint(word)\nprint(word)\n​\n","Взлом «планетной» угадайкиРУЧ":"print(planet)\n​\n","Попугай":"first_word = input()\nsecond_word = input()\nthird_word = input()\nprint(first_word)\nprint(second_word)\nprint(third_word)\n​\n","Билетная касса":"film_name = input()\ncinema_name = input()\nfilm_date = input()\nprint('Билет на \" ' + film_name + ' \" в \" ' + cinema_name + ' \" на ' + film_date + ' забронирован.')\n​\n","Гороскоп":"name = input()\nsername = input()\nanimal = input()\nzodiac = input()\ntemplate = '''Индивидуальный гороскоп для пользователя {} {}\nКем вы были в прошлой жизни: {}\nВаш знак зодиака - {} , поэтому вы - тонко чувствующая натура.'''\nprint(template.format(name, sername, animal, zodiac))\n​\n","Бит или не бит?":"print('1 бит - минимальная единица количества информации.')\nprint('1 байт = 8 бит.')\nprint('1 Килобит = 1024 бита.')\nprint('1 Килобайт = 1024 байта.')\nprint('1 Килобайт = ' + str(8 * 1024) + ' бит.')\n​\n","Обратный попугай":"first_word = input()\nsecond_word = input()\nthird_word = input()\nprint(third_word)\nprint(second_word)\nprint(first_word)\n​\n","Отчет о приветствии":"print('''Моя первая программа напечатала \"Привет, Яндекс!\" :)''')\n​\n","Эхо-1.2":"human_word = 'Ауууу!'\necho_word = human_word\nprint('Человек: ' + human_word)\nprint('Эхо: ' + echo_word)\n​\n","Взлом планетной угадайки — 2РУЧ":"warning = planet\n","Взлом планетной угадайки — 3РУЧ":"answer = planet\n"}