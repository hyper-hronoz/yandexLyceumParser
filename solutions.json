{"1984":"N = int(input())\nwar = 'Евразия'\npeace = 'Остазия'\nfor i in range(N):\n    a = input()\n    if a == 'С кем война?':\n        print(war)\n    elif a == 'С кем мир?':\n        print(peace)\n    else:\n        war, peace = peace, war\n","Калорийность":"class FoodInfo:\n    def __init__(self, proteins, fats, carbohydrates):\n        self.proteins = proteins\n        self.fats = fats\n        self.carbohydrates = carbohydrates\n​\n    def get_proteins(self):\n        return self.proteins\n​\n    def get_fats(self):\n        return self.fats\n​\n    def get_carbohydrates(self):\n        return self.carbohydrates\n​\n    def get_kcalories(self):\n        return self.proteins * 4 + self.fats * 9 + self.carbohydrates * 4\n​\n    def __add__(self, self1):\n        p = self.proteins + self1.proteins\n        f = self.fats + self1.fats\n        c = self.carbohydrates + self1.carbohydrates\n        return FoodInfo(p, f, c)\n​\n","Список в обратном порядке":"class ReversedList:\n    def __init__(self, list):\n        list.reverse()\n        self.list = list.copy()\n​\n    def __len__(self):\n        return len(self.list)\n​\n    def __setitem__(self, key, value):\n        self.list[key] = value\n​\n    def __getitem__(self, i):\n        return self.list[i]\n","Квадратичная функция":"class SquareFunction:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n​\n    def __call__(self, x):\n        return self.a * x ** 2 + self.b * x + self.c\n","Вычитание дат":"import datetime\n​\n​\nclass Date:\n    def __init__(self, month, day, year=2019):\n        self.info = datetime.date(year, month, day)\n​\n    def __sub__(self, other):\n        return (self.info - other.info).days\n","Точки на плоскости":"class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n​\n    def __eq__(self, other):\n        if self.x == other.x and self.y == other.y:\n            return True\n        return False\n​\n    def __ne__(self, other):\n        if self.x != other.x or self.y != other.y:\n            return True\n        return False\n​\n","Разреженный массив":"class SparseArray:\n    def __init__(self):\n        self.d = dict()\n​\n    def __setitem__(self, key, v):\n        self.d[key] = v\n​\n    def __getitem__(self, key):\n        if key in self.d:\n            return self.d[key]\n        return 0\n","Сложение многочленов":"class Polynomial:\n    def __init__(self, coefficients):\n        self.coefficients = coefficients\n​\n    def __call__(self, x):\n        answer = 0\n        count = 0\n        for i in self.coefficients:\n            answer += i * x ** count\n            count += 1\n        return answer\n​\n    def __add__(self, other):\n        mas = []\n        if len(self.coefficients) > len(other.coefficients):\n            n = len(self.coefficients)\n        else:\n            n = len(other.coefficients)\n        for i in range(n):\n            if i < len(self.coefficients):\n                a = self.coefficients[i]\n            else:\n                a = 0\n            if i < len(other.coefficients):\n                b = other.coefficients[i]\n            else:\n                b = 0\n            mas.append(a + b)\n        return Polynomial(mas)\n​\n    def __repr__(self):\n        return 'Polynomial({})'.format(self.coefficients)\n","Очередь и все-все-всеРУЧ":"class Queue:\n    def __init__(self, *mas):\n        self.mas = list(mas)\n​\n    def append(self, *values):\n        self.mas.extend(values)\n​\n    def copy(self):\n        return Queue(*self.mas)\n​\n    def pop(self):\n        if len(self.mas) >= 1:\n            x = self.mas[0]\n            del self.mas[0]\n            return x\n        return None\n​\n    def extend(self, queue):\n        self.mas.extend(queue.mas)\n​\n    def next(self):\n        return Queue(*self.mas[1:])\n​\n    def __add__(self, other):\n        return Queue(*self.mas + other.mas)\n​\n    def __iadd__(self, other):\n        self.mas.extend(other.mas)\n        return self\n​\n    def __eq__(self, other):\n        if self.mas == other.mas:\n            return True\n        return False\n​\n    def __rshift__(self, n):\n        if n > len(self.mas):\n            return Queue(*[])\n        return Queue(*self.mas[n:])\n​\n    def __str__(self):\n        if self.mas == list():\n            return '[]'\n        return '[' + ' -> '.join(list(map(str, self.mas))) + ']'\n​\n    def __next__(self):\n        return Queue(*self.mas[1:])\n","Выборки":"class Selector:\n    def __init__(self, mas):\n        self.object = mas.copy()\n        self.e = []\n        self.o = []\n​\n    def get_evens(self):\n        for i in self.object:\n            if i % 2 == 0:\n                self.e.append(i)\n        return self.e\n​\n    def get_odds(self):\n        for i in self.object:\n            if i % 2 != 0:\n                self.o.append(i)\n        return self.o\n","Вывод предложений":"class LeftParagraph:\n    def __init__(self, w):\n        self.mas = []\n        self.w = w\n​\n    def add_word(self, word):\n        self.mas.append(word)\n​\n    def end(self):\n        answer = ''\n        count = 0\n        for i in self.mas:\n            if len(answer + ' ' * count + i) <= self.w:\n                if count == 0:\n                    answer = answer + i\n                else:\n                    answer = answer + ' ' + i\n            else:\n                print(answer + ' ' * (self.w - len(answer)))\n                answer = i\n            if count == 0:\n                count += 1\n        print(answer + ' ' * (self.w - len(answer)))\n        self.mas = []\n​\n​\nclass RightParagraph:\n    def __init__(self, w):\n        self.mas = []\n        self.w = w\n​\n    def add_word(self, word):\n        self.mas.append(word)\n​\n    def end(self):\n        answer = ''\n        count = 0\n        for i in self.mas:\n            if len(answer + ' ' * count + i) <= self.w:\n                if count == 0:\n                    answer = answer + i\n                else:\n                    answer = answer + ' ' + i\n            else:\n                print(' ' * (self.w - len(answer)) + answer)\n                answer = i\n            if count == 0:\n                count += 1\n        print(' ' * (self.w - len(answer)) + answer)\n        self.mas = []\n","Форматы дат":"class AmericanDate:\n    def __init__(self, year, month, day):\n        self.year = year\n        self.month = month\n        self.day = day\n​\n    def set_year(self, year):\n        self.year = year\n​\n    def set_month(self, month):\n        self.month = month\n​\n    def set_day(self, day):\n        self.day = day\n​\n    def get_year(self):\n        return self.year\n​\n    def get_month(self):\n        return self.month\n​\n    def get_day(self):\n        return self.day\n​\n    def format(self):\n        return f\"{str(self.month).rjust(2, '0')}.{str(self.day).rjust(2, '0')}.{str(self.year)}\"\n​\n​\nclass EuropeanDate:\n    def __init__(self, year, month, day):\n        self.year = year\n        self.month = month\n        self.day = day\n​\n    def set_year(self, year):\n        self.year = year\n​\n    def set_month(self, month):\n        self.month = month\n​\n    def set_day(self, day):\n        self.day = day\n​\n    def get_year(self):\n        return self.year\n​\n    def get_month(self):\n        return self.month\n​\n    def get_day(self):\n        return self.day\n​\n    def format(self):\n        return f\"{str(self.day).rjust(2, '0')}.{str(self.month).rjust(2, '0')}.{str(self.year)}\"\n","Статистика":"class MinStat:\n    def __init__(self):\n        self.mas = []\n​\n    def add_number(self, n):\n        self.mas.append(n)\n​\n    def result(self):\n        if self.mas:\n            return min(self.mas)\n        else:\n            return None\n​\n​\nclass MaxStat:\n    def __init__(self):\n        self.mas = []\n​\n    def add_number(self, n):\n        self.mas.append(n)\n​\n    def result(self):\n        if self.mas:\n            return max(self.mas)\n        else:\n            return None\n​\n​\nclass AverageStat:\n    def __init__(self):\n        self.mas = []\n​\n    def add_number(self, n):\n        self.mas.append(n)\n​\n    def result(self):\n        if self.mas:\n            return sum(self.mas) / len(self.mas)\n        else:\n            return None\n","Таблица":"class Table:\n    def __init__(self, rows, cols):\n        self.r = rows\n        self.c = cols\n        self.mas = [[0 for _ in range(cols)] for _ in range(rows)]\n​\n    def get_value(self, row, col):\n        if 0 <= row <= self.r - 1 and 0 <= col <= self.c - 1:\n            return self.mas[row][col]\n        else:\n            return None\n​\n    def set_value(self, row, col, value):\n        self.mas[row][col] = value\n​\n    def n_rows(self):\n        return self.r\n​\n    def n_cols(self):\n        return self.c\n","Прямоугольники":"class Rectangle:\n    def __init__(self, x, y, w, h):\n        self.x = x\n        self.y = y\n        self.w = w\n        self.h = h\n        self.mas = [(x, y), (x, y + h), (x + w, y + h), (x + w, y)]\n​\n    def get_x(self):\n        return self.x\n​\n    def get_y(self):\n        return self.y\n​\n    def get_w(self):\n        return self.w\n​\n    def get_h(self):\n        return self.h\n​\n    def intersection(self, self1):\n        count = []\n        for i in range(4):\n            if self1.x < self.mas[i][0] < self1.x + self1.w \\\n                    and self1.y < self.mas[i][1] < self1.y + self1.h:\n                count.append(i)\n        if len(count) == 1:\n            if count[0] == 0:\n                return Rectangle(self.x, self.y, self1.x + self1.w - self.x, \n                                 self1.y + self1.h - self.y)\n            elif count[0] == 1:\n                return Rectangle(self.x, self1.y, self1.x + self1.w - self.x, \n                                 self.y + self.h - self1.y)\n            elif count[0] == 2:\n                return Rectangle(self1.x, self1.y, self.x + self.w - self1.x, \n                                 self.y + self.h - self1.y)\n            elif count[0] == 3:\n                return Rectangle(self1.x, self.y, self.x + self.w - self1.x, \n                                 self1.y + self1.h - self.y)\n        elif len(count) == 2:\n            if count == [0, 1]:\n                return Rectangle(self.x, self.y, self1.x + self1.w - self.x, self.h)\n            elif count == [1, 2]:\n                return Rectangle(self.x, self1.y, self.w, self.y + self.h - self1.y)\n            elif count == [2, 3]:\n                return Rectangle(self1.x, self.y, self.x + self.w - self1.x, self.h)\n            elif count == [3, 0]:\n                return Rectangle(self.x, self.y, self.w, self1.y + self1.h - self.y)\n        elif len(count) == 4:\n            return Rectangle(self.x, self.y, self.w, self.h)\n        count = []\n        for i in range(4):\n            if self.x < self1.mas[i][0] < self.x + self.w \\\n                    and self.y < self1.mas[i][1] < self.y + self.h:\n                count.append(i)\n        if len(count) == 4:\n            return Rectangle(self1.x, self1.y, self1.w, self1.h)\n        return None\n","Таблица с изменяемым размером":"class Table:\n    def __init__(self, rows, cols):\n        self.r = rows\n        self.c = cols\n        self.mas = [[0 for _ in range(cols)] for _ in range(rows)]\n​\n    def get_value(self, row, col):\n        if 0 <= row <= self.r - 1 and 0 <= col <= self.c - 1:\n            return self.mas[row][col]\n        else:\n            return None\n​\n    def set_value(self, row, col, value):\n        self.mas[row][col] = value\n​\n    def n_rows(self):\n        return self.r\n​\n    def n_cols(self):\n        return self.c\n​\n    def delete_row(self, row):\n        mas1 = []\n        for i in range(len(self.mas)):\n            if i != row:\n                mas1.append(self.mas[i])\n        self.mas = mas1.copy()\n        self.r -= 1\n​\n    def delete_col(self, col):\n        self.mas = list(zip(*self.mas))\n        mas1 = []\n        for i in range(len(self.mas)):\n            if i != col:\n                mas1.append(self.mas[i])\n        self.mas = [list(i) for i in zip(*mas1)]\n        self.c -= 1\n​\n    def add_row(self, row):\n        mas1 = self.mas[:row]\n        mas1.append([0 for _ in range(self.c)])\n        mas1.extend(self.mas[row:])\n        self.mas = mas1.copy()\n        self.r += 1\n​\n    def add_col(self, col):\n        self.mas = [list(i) for i in list(zip(*self.mas))]\n        mas1 = self.mas[:col]\n        mas1.append([0 for _ in range(self.r)])\n        mas1.extend(self.mas[col:])\n        self.mas = [list(i) for i in zip(*mas1)]\n        self.c += 1\n","СМС-рассылкаРУЧ":"class Person:\n    def __init__(self, name, middle_name, surname, d):\n        self.name = name\n        self.middle_name = middle_name\n        self.surname = surname\n        self.d = d\n​\n    def get_phone(self):\n        if self.d.get('private'):\n            return self.d['private']\n        else:\n            return None\n​\n    def get_name(self):\n        return self.surname + ' ' + self.name + ' ' + self.middle_name\n​\n    def get_work_phone(self):\n        if self.d.get('work'):\n            return self.d['work']\n        else:\n            return None\n​\n    def get_sms_text(self):\n        return f'Уважаемый {self.name} {self.middle_name}! Примите участие ' \\\n               f'в нашем беспроигрышном конкурсе для физических лиц'\n​\n​\nclass Company:\n    def __init__(self, company, t, d, *workers):\n        self.company = company\n        self.type = t\n        self.d = d\n        self.workers = workers\n​\n    def get_phone(self):\n        if self.d.get('contact'):\n            return self.d['contact']\n        else:\n            for i in self.workers:\n                x = i.get_work_phone()\n                if x:\n                    return x\n            return None\n​\n    def get_name(self):\n        return self.company\n​\n    def get_sms_text(self):\n        return f'Для компании {self.company} есть супер предложение! ' \\\n               f'Примите участие в нашем беспроигрышном конкурсе для {self.type}'\n​\n​\ndef send_sms(*objects):\n    for i in objects:\n        if i.get_phone():\n            print(f'Отправлено СМС на номер {i.get_phone()} с текстом: {i.get_sms_text()}')\n        else:\n            print(f'Не удалось отправить сообщение абоненту: {i.get_name()}')\n","Маленький колокольчик":"class LittleBell:\n    def sound(self):\n        print('ding')\n","Кнопка":"class Button:\n    def __init__(self):\n        self.n = 0\n​\n    def click(self):\n        self.n += 1\n​\n    def click_count(self):\n        return self.n\n​\n    def reset(self):\n        self.n = 0\n","Весы":"class Balance:\n    def __init__(self):\n        self.left = []\n        self.right = []\n​\n    def add_right(self, n):\n        self.right.append(n)\n​\n    def add_left(self, n):\n        self.left.append(n)\n​\n    def result(self):\n        if sum(self.right) > sum(self.left):\n            return 'R'\n        elif sum(self.right) < sum(self.left):\n            return 'L'\n        else:\n            return '='\n","Разбивка по чётности":"class OddEvenSeparator:\n    def __init__(self):\n        self.e = []\n        self.o = []\n​\n    def add_number(self, n):\n        if n % 2 == 0:\n            self.e.append(str(n))\n        else:\n            self.o.append(str(n))\n​\n    def even(self):\n        return self.e\n​\n    def odd(self):\n        return self.o\n","Большой колокольчик":"class BigBell:\n    def __init__(self):\n        self.count = 0\n​\n    def sound(self):\n        self.count += 1\n        if self.count % 2 != 0:\n            print('ding')\n        else:\n            print('dong')\n","Самые короткие и самые длинные слова":"class MinMaxWordFinder:\n    def __init__(self):\n        self.lines = []\n​\n    def add_sentence(self, line):\n        self.lines.extend(line.split())\n​\n    def shortest_words(self):\n        if self.lines:\n            length = len(min(self.lines, key=lambda x: len(x)))\n            return sorted(list(filter(lambda x: len(x) == length, self.lines)))\n        return '\\n'\n​\n    def longest_words(self):\n        if self.lines:\n            length = len(max(self.lines, key=lambda x: len(x)))\n            return sorted(list(set(filter(lambda x: len(x) == length, self.lines))))\n        return '\\n'\n","Ограничивающий прямоугольник":"class BoundingRectangle:\n    def __init__(self):\n        self.x = []\n        self.y = []\n​\n    def add_point(self, a, b):\n        self.x.append(a)\n        self.y.append(b)\n​\n    def width(self):\n        return max(self.x) - min(self.x)\n​\n    def height(self):\n        return max(self.y) - min(self.y)\n​\n    def bottom_y(self):\n        return min(self.y)\n​\n    def top_y(self):\n        return max(self.y)\n​\n    def left_x(self):\n        return min(self.x)\n​\n    def right_x(self):\n        return max(self.x)\n","Морской бой":"class SeaMap:\n    def __init__(self):\n        self.matrix = [['.' for i in range(10)] for j in range(10)]\n        self.count = 0\n​\n    def shoot(self, row, col, result):\n        def control(row, col):\n            if 0 <= row <= 9 and 0 <= col <= 9:\n                return True\n            return False\n​\n        def missed_for_sink(row, col):\n            special_signs = ((1, 1), (-1, -1), (0, 1), (1, 0), (-1, 0), (0, -1), (-1, 1), (1, -1))\n            for i in special_signs:\n                if control(row + i[0], col + i[1]):\n                    if self.matrix[row + i[0]][col + i[1]] == '&':\n                        self.matrix[row + i[0]][col + i[1]] = 'x'\n                        missed_for_sink(row + i[0], col + i[1])\n                    elif self.matrix[row + i[0]][col + i[1]] != 'x':\n                        self.matrix[row + i[0]][col + i[1]] = '*'\n​\n        if result == 'miss':\n            self.matrix[row][col] = '*'\n        elif result == 'hit':\n            self.matrix[row][col] = '&'\n        elif result == 'sink':\n            self.matrix[row][col] = 'x'\n            missed_for_sink(row, col)\n​\n    def cell(self, row, col):\n        if self.count == 0:\n            for i in range(10):\n                for j in range(10):\n                    if self.matrix[i][j] == '&':\n                        self.matrix[i][j] = 'x'\n        self.count += 1\n        return self.matrix[row][col]\n","Класс крестики-ноликиРУЧ":"class TicTacToeBoard:\n    def __init__(self):\n        self.field = [['-' for i in range(3)] for i in range(3)]\n        self.turn = True\n        self.game = True\n​\n    def new_game(self):\n        self.field = [['-' for i in range(3)] for i in range(3)]\n        self.turn = True\n        self.game = True\n​\n    def get_field(self):\n        return self.field\n​\n    def check_field(self):\n        for i in range(3):\n            if self.field[i][0] == self.field[i][1] == self.field[i][2] and \\\n                    self.field[i][0] != '-':\n                self.game = False\n                return self.field[i][0]\n            if self.field[0][i] == self.field[1][i] == self.field[2][i] \\\n                    and self.field[0][i] != '-':\n                self.game = False\n                return self.field[0][i]\n        if self.field[0][0] == self.field[1][1] == self.field[2][2] and \\\n                self.field[0][0] != '-':\n            self.game = False\n            return self.field[0][0]\n        elif self.field[0][2] == self.field[1][1] == self.field[2][0] and \\\n                self.field[0][2] != '-':\n            self.game = False\n            return self.field[0][0]\n        if '-' in self.field[0] or '-' in self.field[1] or '-' in self.field[2]:\n            return None\n        self.game = False\n        return 'D'\n​\n    def make_move(self, row, col):\n        row -= 1\n        col -= 1\n        if self.game:\n            if 0 <= row <= 2 and 0 <= col <= 2:\n                if self.field[row][col] == '-':\n                    if self.turn:\n                        self.field[row][col] = 'X'\n                    else:\n                        self.field[row][col] = '0'\n                    self.turn = not self.turn\n                else:\n                    return 'Клетка {}, {} уже занята'.format(row + 1, col + 1)\n            for i in range(3):\n                if (self.field[i][0] == self.field[i][1] == self.field[i][2]) and \\\n                        self.field[i][0] != '-':\n                    if self.field[i][0] == 'X':\n                        self.game = False\n                        return 'Победил игрок X'\n                    else:\n                        self.game = False\n                        return 'Победил игрок 0'\n                if (self.field[0][i] == self.field[1][i] == self.field[2][i]) \\\n                        and self.field[0][i] != '-':\n                    if self.field[0][i] == 'X':\n                        self.game = False\n                        return 'Победил игрок X'\n                    else:\n                        self.game = False\n                        return 'Победил игрок 0'\n            if (self.field[0][0] == self.field[1][1] == self.field[2][2]) and \\\n                    self.field[0][0] != '-':\n                if self.field[0][0] == 'X':\n                    self.game = False\n                    return 'Победил игрок X'\n                else:\n                    self.game = False\n                    return 'Победил игрок 0'\n            elif (self.field[0][2] == self.field[1][1] == self.field[2][0]) and \\\n                    self.field[0][2] != '-':\n                if self.field[0][2] == 'X':\n                    self.game = False\n                    return 'Победил игрок X'\n                else:\n                    self.game = False\n                    return 'Победил игрок 0'\n            if '-' in self.field[0] or '-' in self.field[1] or '-' in self.field[2]:\n                return 'Продолжаем играть'\n            self.game = False\n            return 'Ничья'\n        else:\n            return 'Игра уже завершена'\n","Шахматная доскаРУЧ":"import numpy as np\n​\n​\ndef make_field(size):\n    x = np.ones(size * size, dtype=np.int8).reshape(size, size)\n    x[1::2, ::2] -= 1\n    x[::2, 1::2] -= 1\n    return x\n","ЗмейкаРУЧ":"import numpy as np\n​\n​\ndef snake(rows, cols):\n    x = np.array(range(1, rows * cols + 1)).reshape(rows, cols)\n    x[1::2, :] = x[1::2, ::-1]\n    return x\n​\n","Сортировка столбцовРУЧ":"import numpy as np\n​\n​\ndef super_sort(rows, cols):\n    a = np.random.randint(1, 100, (rows, cols))\n    b = a.copy()\n    b = np.sort(b, axis=0)\n    b[:, 1::2] = b[::-1, 1::2]\n    return a, b\n","Расстановка ферзейРУЧ":"import numpy as np\nimport itertools\n​\n​\ndef check(variant):\n    flag = True\n    for i in range(len(variant)):\n        for j in range(len(variant)):\n            if i != j:\n                if abs(int(variant[i]) - int(variant[j])) == abs(i - j):\n                    flag = False\n                    break\n    return flag\n​\n​\ndef queens(size):\n    num = ''.join(map(str, (range(1, size + 1))))\n    x = map(lambda i: ''.join(i), itertools.permutations(num))\n    answer = np.fromiter(filter(lambda i: check(i), x), dtype=np.int32)\n    print(*answer, sep='\\n')\n​\n","Одномерный клеточный автоматРУЧ":"import numpy as np\n​\n​\ndef generation(line1):\n    line = np.fromstring(' '.join(list(line1)), sep=' ', dtype=np.int8)\n    for i in range(10):\n        n_left = np.roll(line, 1, 0)\n        n = line.copy()\n        n_right = np.roll(line, -1, 0)\n        line = (((n_left == 1) & (n == 0) & (n_right == 0)) |\n                ((n_left == 0) & (n == 1) & (n == 1)) |\n                ((n_left == 0) & (n == 1) & (n_right == 0)) |\n                ((n_left == 0) & (n == 0) & (n_right == 1))) | np.zeros(len(n), dtype=np.uint8)\n    line = ''.join(np.array(line, dtype='<U32'))\n    return line\n","Чёрно-белое изображениеРУЧ":"from PIL import Image\nimport numpy as np\n​\n​\ndef bw_convert():\n    image = np.asarray(Image.open('image.jpg'))\n    x = np.uint8(image)[:, :, 0] * 0.2989 + \\\n        np.uint8(image)[:, :, 1] * 0.5870 + \\\n        np.uint8(image)[:, :, 2] * 0.1140\n    x = np.round(x).reshape(np.size(x, axis=0), np.size(x, axis=1), 1)\n    x = np.uint8(x)\n    x = np.concatenate((x, x, x), axis=2)\n    Image.fromarray(np.uint8(x)).save('res.jpg')\n​\n","Суставной бутерброд":"import random\n​\nn = int(input())\nfw = input().split()\nsw = input().split()\ns1, s2 = map(int, input().split(', '))\nfw = list(set(fw))\nsw = list(set(sw))\nfor i in range(n):\n    fw1 = random.choice(fw)\n    sw2 = random.choice(sw)\n    while fw1 == sw2:\n        fw1 = random.choice(fw)\n        sw2 = random.choice(sw)\n    a1 = random.randint(s1, s2)\n    a2 = random.randrange(10, 750) / 100\n    print(\n        f'Sandwich {fw1} and {sw2}, {a1} cm, thickness {a2} cm, usefulness {round(a1 ** 2 * a2, 2)}.')\n","ПриглашенияРУЧ":"from docx import Document\nfrom sys import stdin\nfrom docx.shared import Pt\n​\ndocument = Document()\nplace, time, *name = map(str.strip, stdin)\nsize_text = Pt(36)\ntext = document.add_paragraph('')\nfor i in name:\n    if len(i) > 13:\n        f = f'\\n\\n\\n\\n\\nДорогая {i}!\\nПриглашаем тебя отлично провести ' \\\n            f'время\\n{place}\\n{time}.\\n\\n\\n'\n    else:\n        f = f'\\n\\n\\n\\n\\n\\nДорогая {i}!\\nПриглашаем тебя отлично провести ' \\\n            f'время\\n{place}\\n{time}.\\n\\n\\n'\n    text.add_run(f).font.size = size_text\n    text.alignment = 1\ndocument.save('text.docx')\n","ПрезентацияРУЧ":"from pptx import Presentation\nfrom pptx.util import Pt\n​\n​\nx = dict()\nx['randint'] = '''Help on method randint in module random:\n​\nrandint(a, b) method of random.Random instance\n    Return random integer in range [a, b], including both end points.'''\nx['randrange'] = '''Help on method randrange in module random:\n​\nrandrange(start, stop=None, step=1) method of random.Random instance\n    Choose a random item from range(start, stop[, step]).\n​\n    This fixes the problem with randint() which includes the\n    endpoint; in Python this is usually not what you want.'''\nx['choices'] = '''Help on method choices in module random:\n​\nchoices(population, weights=None, *, cum_weights=None, k=1) method of random.Random instance\n    Return a k sized list of population elements chosen with replacement.\n​\n    If the relative weights or cumulative weights are not specified,\n    the selections are made with equal probability.'''\nx['sample'] = '''Help on method sample in module random:\n​\nsample(population, k, *, counts=None) method of random.Random instance\n    Chooses k unique random elements from a population sequence or set.\n​\n    Returns a new list containing elements from the population while\n    leaving the original population unchanged.  The resulting list is\n    in selection order so that all sub-slices will also be valid random\n    samples.  This allows raffle winners (the sample) to be partitioned\n    into grand prize and second place winners (the subslices).\n​\n    Members of the population need not be hashable or unique.  If the\n    population contains repeats, then each occurrence is a possible\n    selection in the sample.\n​\n    Repeated elements can be specified one at a time or with the optional\n    counts parameter.  For example:\n​\n        sample(['red', 'blue'], counts=[4, 2], k=5)\n​\n    is equivalent to:\n​\n        sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)\n​\n    To choose a sample from a range of integers, use range() for the\n    population argument.  This is especially fast and space efficient\n    for sampling from a large population:\n​\n        sample(range(10000000), 60)'''\nx['shuffle'] = '''Help on method shuffle in module random:\n​\nshuffle(x, random=None) method of random.Random instance\n    Shuffle list x in place, and return None.\n​\n    Optional argument random is a 0-argument function returning a\n    random float in [0.0, 1.0); if it is the default None, the\n    standard random.random will be used.'''\n​\nprs = Presentation()\nfor i in x:\n    slide = prs.slides.add_slide(prs.slide_layouts[1])\n    slide.placeholders[0].text = i\n    slide.placeholders[1].text = x[i]\n    for paragraph in slide.placeholders[0].text_frame.paragraphs:\n        for run in paragraph.runs:\n            run.font.name = 'Courier New'\n    for paragraph in slide.placeholders[1].text_frame.paragraphs:\n        for run in paragraph.runs:\n            run.font.size = Pt(16)\n            run.font.name = 'Courier New'\nprs.save('res.pptx')\n","Учебная ведомостьРУЧ":"from docxtpl import DocxTemplate\n​\n​\ndef create_training_sheet(class_name, subject_name, tpl_name='tpl.docx', *mas):\n    mas = list(enumerate(sorted(list(mas), key=lambda x: x[0])))\n    marks = []\n    for i in mas:\n        d = dict()\n        d['num'] = i[0] + 1\n        d['fio'] = i[1][0]\n        d['mark'] = i[1][1]\n        marks.append(d)\n​\n    doc = DocxTemplate(tpl_name)\n    context = {\n        'class_name': class_name,\n        'subject_name': subject_name,\n        'marks': marks\n    }\n    doc.render(context)\n    doc.save(\"res.docx\")\n​\n","Круговая диаграммаРУЧ":"import xlsxwriter\nimport sys\n​\nworkbook = xlsxwriter.Workbook('res.xlsx')\nworksheet = workbook.add_worksheet()\n​\ndata = []\nfor i in sys.stdin:\n    data.append(tuple(i.strip().split()))\nn = len(data)\n​\nfor row, (item, price) in enumerate(data):\n    worksheet.write(row, 0, item)\n    worksheet.write(row, 1, int(price))\n​\n# Тип диаграммы\nchart = workbook.add_chart({'type': 'pie'})\n​\n# Строим по нашим данным\nchart.add_series({'categories': f'=Sheet1!A1:A{n}',\n                  'values': f'=Sheet1!B1:B{n}'})\n​\nworksheet.insert_chart('C3', chart)\nworkbook.close()\n​\n","Простая документация в дорогу":"from docx import Document\n​\n​\ndef markdown_to_docx(text):\n    lines = text.split('\\n')\n    name = lines[0]\n    lines = lines[1:]\n    document = Document()\n    document.add_heading(name, level=0)\n    for i in lines:\n        if i:\n            if i.startswith('* ') or i.startswith('- ') or i.startswith('+ '):\n                document.add_paragraph(i[2:], style='List Bullet')\n            elif i[0].isdigit() and i[1] == '.':\n                document.add_paragraph(i[3:], style='List Number')\n            elif i.startswith('***') or i.startswith('___'):\n                a = document.add_paragraph().add_run(i[3:-3])\n                a.bold = True\n                a.italic = True\n            elif i.startswith('**') or i.startswith('__'):\n                document.add_paragraph().add_run(i[2:-2]).bold = True\n            elif i.startswith('*') or i.startswith('_'):\n                document.add_paragraph().add_run(i[1:-1]).italic = True\n            elif i.startswith('#'):\n                n = i.count('#')\n                document.add_heading(i[n + 1:], level=n)\n            else:\n                document.add_paragraph(i)\n        else:\n            document.add_paragraph(i)\n    document.save('res.docx')\n​\n","Документация в дорогуРУЧ":"from docx import Document\n​\n​\ndef markdown_to_docx(text):\n    lines = text.split('\\n')\n    name = lines[0]\n    lines = lines[1:]\n    document = Document()\n    document.add_heading(name, level=0)\n    main_count = 0\n    for i in lines:\n        if i:\n            if i.startswith('#'):\n                count = i.count('#')\n                document.add_heading(i[count + 1:], level=count)\n            else:\n                s = None\n                if i.startswith('* ') or i.startswith('- ') or i.startswith('+ '):\n                    line = i[2:]\n                    s = 'List Bullet'\n                elif i[0].isdigit() and i[1] == '.':\n                    line = i[3:]\n                    s = 'List Number'\n                else:\n                    line = i\n                a = document.add_paragraph(style=s)\n                if line.count('***') % 2 == 0:\n                    line = line.replace('***', '^')\n                if line.count('___') % 2 == 0:\n                    line = line.replace('___', '^')\n                if line.count('**') % 2 == 0:\n                    line = line.replace('**', '№')\n                if line.count('__') % 2 == 0:\n                    line = line.replace('__', '№')\n                if line.count('_') % 2 == 0:\n                    line = line.replace('_', '*')\n​\n                flag1 = False\n                flag2 = False\n                flag3 = False\n                n = 0\n                for j in line:\n                    if j == ' ':\n                        n += 1\n                    else:\n                        if j == '*' and line.count('*') % 2 == 0:\n                            if not flag1:\n                                flag1 = True\n                            else:\n                                flag1 = False\n                        elif j == '№':\n                            if not flag2:\n                                flag2 = True\n                            else:\n                                flag2 = False\n                        elif j == '^':\n                            if not flag3:\n                                flag3 = True\n                            else:\n                                flag3 = False\n                        else:\n                            string = a.add_run(n * ' ' + j)\n                            if flag1:\n                                string.italic = True\n                            if flag2:\n                                string.bold = True\n                            if flag3:\n                                string.italic = True\n                                string.bold = True\n                            n = 0\n        else:\n            if not lines[main_count - 1]:\n                document.add_paragraph(i)\n        main_count += 1\n​\n    document.save(name + '.docx')\n​\n","Чек":"import xlsxwriter\n​\n​\ndef export_check(text):\n    text = [i.split() for i in text.split('\\n')]\n    for i in text:\n        if len(i) == 4:\n            i[0] = i[0] + ' ' + i[1]\n            del i[1]\n    workbook = xlsxwriter.Workbook('res.xlsx')\n    worksheet = workbook.add_worksheet()\n​\n    for row, (item, price, amount) in enumerate(text):\n        worksheet.write(row, 0, item)\n        worksheet.write(row, 1, float(price))\n        worksheet.write(row, 2, int(amount))\n        worksheet.write(row, 3, f'=B{row + 1}*C{row + 1}')\n​\n    row += 1\n    worksheet.write(row, 0, 'Итого')\n    worksheet.write(row, 3, f'=SUM(D1:D{row})')\n​\n    workbook.close()\n","Чеки":"import xlsxwriter\n​\n​\ndef check(text, workbook):\n    text = [i.split() for i in text.strip().split('\\n')]\n    for i in text:\n        if len(i) == 4:\n            i[0] = i[0] + ' ' + i[1]\n            del i[1]\n    text.sort(key=lambda x: x[0])\n    d = {}\n    for i in text:\n        d[(i[0], i[1])] = d.get((i[0], i[1]), 0) + int(i[2])\n    text1 = []\n    for i in d:\n        text1.append([i[0], i[1], str(d[i])])\n    text = text1\n​\n    worksheet = workbook.add_worksheet()\n​\n    for row, (item, price, amount) in enumerate(text):\n        worksheet.write(row, 0, item)\n        worksheet.write(row, 1, float(price))\n        worksheet.write(row, 2, int(amount))\n        worksheet.write(row, 3, f'=B{row + 1}*C{row + 1}')\n​\n    row += 1\n    worksheet.write(row, 0, 'Итого')\n    worksheet.write(row, 3, f'=SUM(D1:D{row})')\n​\n​\ndef export_check(text):\n    text = text.split('---')\n    workbook = xlsxwriter.Workbook('res.xlsx')\n    for i in text:\n        check(i, workbook)\n    workbook.close()\n","Формы глаголов":"import pymorphy2\nimport sys\n​\ndata = sys.stdin.read()\nset_ = filter(lambda x: not x.isalpha(), set(list(data)))\nfor i in set_:\n    data = data.replace(i, ' ')\ndata = data.split()\nmorph = pymorphy2.MorphAnalyzer()\ndata = map(lambda x: morph.parse(x)[0].normal_form, data)\ncount = 0\nfor i in data:\n    if i in ['видеть', 'увидеть', 'глядеть', 'примечать', 'узреть']:\n        count += 1\nprint(count)\n​\n","Существительные":"import pymorphy2\nimport sys\n​\ndata = sys.stdin.read()\nset_ = filter(lambda x: not x.isalpha(), set(list(data)))\nfor i in set_:\n    data = data.replace(i, ' ')\ndata = data.split()\nmorph = pymorphy2.MorphAnalyzer()\ndata = map(lambda x: morph.parse(x)[0], data)\ndata = filter(lambda x: 'NOUN' in x.tag and x.score > 0.5, data)\ndata = map(lambda x: x.normal_form, data)\ndata2 = {}\nfor i in data:\n    if i not in data2:\n        data2[i] = 1\n    else:\n        data2[i] += 1\ndata = sorted(data2.items(), reverse=True, key=lambda x: [x[1], x[0]])\ndata = list(map(lambda x: x[0], data))\nprint(*data[:10])\n","99 бутылок квасаРУЧ":"import pymorphy2\n​\nmorph = pymorphy2.MorphAnalyzer()\nword = morph.parse('бутылка')[0]\nfor i in range(99, -1, -1):\n    w = word.make_agree_with_number(i).word\n    if str(i)[-1] == '1' and i != 11:\n        w1 = 'Осталась'\n    else:\n        w1 = 'Осталось'\n    if i == 99:\n        print(f'''В холодильнике {i} {w} кваса.\nВозьмём одну и выпьем.''')\n    elif i == 0:\n        print(f'{w1} {i} {w} кваса.')\n    else:\n        print(f'''{w1} {i} {w} кваса.\nВ холодильнике {i} {w} кваса.\nВозьмём одну и выпьем.''')\n","Склоняй меня полностью":"import pymorphy2\n​\nmorph = pymorphy2.MorphAnalyzer()\nword = input()\nword = morph.parse(word)[0]\nif 'NOUN' in word.tag:\n    print(f'''Единственное число:\nИменительный падеж: {word.inflect({'sing', 'nomn'}).word}\nРодительный падеж: {word.inflect({'sing', 'gent'}).word}\nДательный падеж: {word.inflect({'sing', 'datv'}).word}\nВинительный падеж: {word.inflect({'sing', 'accs'}).word}\nТворительный падеж: {word.inflect({'sing', 'ablt'}).word}\nПредложный падеж: {word.inflect({'sing', 'loct'}).word}\nМножественное число:\nИменительный падеж: {word.inflect({'plur', 'nomn'}).word}\nРодительный падеж: {word.inflect({'plur', 'gent'}).word}\nДательный падеж: {word.inflect({'plur', 'datv'}).word}\nВинительный падеж: {word.inflect({'plur', 'accs'}).word}\nТворительный падеж: {word.inflect({'plur', 'ablt'}).word}\nПредложный падеж: {word.inflect({'plur', 'loct'}).word}''')\nelse:\n    print('Не существительное')\n","Спрягай меня полностью":"import pymorphy2\n​\nmorph = pymorphy2.MorphAnalyzer()\nword = input()\nword = morph.parse(word)[0]\nif 'VERB' in word.tag or 'INFN' in word.tag:\n    print(f'''Прошедшее время:\n{word.inflect({'past', 'sing', 'masc'}).word}\n{word.inflect({'past', 'sing', 'femn'}).word}\n{word.inflect({'past', 'sing', 'neut'}).word}\n{word.inflect({'past', 'plur'}).word}\nНастоящее время:\n{word.inflect({'pres', 'sing', '1per'}).word}\n{word.inflect({'pres', 'plur', '1per'}).word}\n{word.inflect({'pres', 'sing', '2per'}).word}\n{word.inflect({'pres', 'plur', '2per'}).word}\n{word.inflect({'pres', 'sing', '3per'}).word}\n{word.inflect({'pres', 'plur', '3per'}).word}''')\nelse:\n    print('Не глагол')\n​\n","Оно живое!":"","Графический миксер":"from PIL import Image\n​\n​\ndef twist_image(input_ﬁle_name, output_ﬁle_name):\n    im = Image.open(input_ﬁle_name)\n    pixels = im.load()\n    x, y = im.size\n    for i in range(x // 2):\n        for j in range(y):\n            pixels[i, j], pixels[i + x // 2, j] = pixels[i + x // 2, j], pixels[i, j]\n    im.save(output_ﬁle_name)\n​\n​\n​\n​\n","Прозрачность":"from PIL import Image\n​\n​\ndef transparency(ﬁlename1, ﬁlename2):\n    im1 = Image.open(ﬁlename1)\n    im2 = Image.open(ﬁlename2)\n    x, y = im1.size\n    pixels1 = im1.load()\n    pixels2 = im2.load()\n    for i in range(x):\n        for j in range(y):\n            r1, g1, b1, = pixels1[i, j]\n            r2, g2, b2 = pixels2[i, j]\n            pixels2[i, j] = int(0.5 * r1 + 0.5 * r2), int(0.5 * g1 + 0.5 * g2), int(\n                0.5 * b1 + 0.5 * b2)\n    im2.save('res.jpg')\n","Чип и Дейл":"import wave\nimport struct\n​\n​\ndef chip_and_dale(number):\n    source = wave.open(\"in.wav\", mode=\"rb\")\n    dest = wave.open(\"out.wav\", mode=\"wb\")\n​\n    dest.setparams(source.getparams())\n​\n    # найдем количество фреймов\n    frames_count = source.getnframes()\n​\n    data = struct.unpack(\"<\" + str(frames_count) + \"h\",\n                         source.readframes(frames_count))\n​\n    # собственно, основная строка программы - переворот списка\n​\n    newdata = data[::number]\n    newframes = struct.pack(\"<\" + str(len(newdata)) + \"h\", *newdata)\n​\n    # записываем содержимое в преобразованный файл.\n    dest.writeframes(newframes)\n    source.close()\n    dest.close()\n","Поворот с размытием":"from PIL import Image, ImageFilter\n​\n​\ndef motion_blur(n):\n    im = Image.open('image.jpg')\n    im1 = im.transpose(Image.ROTATE_270).filter(ImageFilter.GaussianBlur(n))\n    im1.save('res.jpg')\n","Убрать тишину":"import wave\nimport struct\n​\n​\ndef break_the_silence():\n    source = wave.open(\"in.wav\", mode=\"rb\")\n    dest = wave.open(\"out.wav\", mode=\"wb\")\n​\n    dest.setparams(source.getparams())\n​\n    # найдем количество фреймов\n    frames_count = source.getnframes()\n​\n    data = struct.unpack(\"<\" + str(frames_count) + \"h\",\n                         source.readframes(frames_count))\n​\n    # собственно, основная строка программы - переворот списка\n​\n    newdata = list(filter(lambda x: abs(x) > 5, data))\n    newframes = struct.pack(\"<\" + str(len(newdata)) + \"h\", *newdata)\n​\n    # записываем содержимое в преобразованный файл.\n    dest.writeframes(newframes)\n    source.close()\n    dest.close()\n","Миниатюра для сайта":"from PIL import Image, ImageFilter\n​\n​\ndef make_preview(size, n_colors):\n    im = Image.open('image.jpg')\n    im1 = im.resize(size).quantize(n_colors)\n    im1.save('res.bmp')\n","«Минифотошоп»РУЧ":"","Противоположный цвет (разминка)":"print(*[255 - i for i in map(int, input().split())])\n","Средний цвет фотографии":"from PIL import Image\n​\nim = Image.open(\"image.jpg\")\npixels = im.load()\nx, y = im.size\nr, g, b = 0, 0, 0\nfor i in range(x):\n    for j in range(y):\n        r += pixels[i, j][0]\n        g += pixels[i, j][1]\n        b += pixels[i, j][2]\n​\nprint(r // (x * y), g // (x * y), b // (x * y))\n","Вертикальное отражение":"from PIL import Image\n​\n​\ndef mirror():\n    im = Image.open(\"image.jpg\")\n    pixels = im.load()\n    x, y = im.size\n    for i in range(x // 2):\n        for j in range(y):\n            pixels[i, j], pixels[x - i - 1, j] = pixels[x - i - 1, j], pixels[i, j]\n    im.save('res.jpg')\n​\n​\nmirror()\n​\n","Диагональное отражение":"from PIL import Image\n​\n​\ndef mirror():\n    im = Image.open(\"image.jpg\")\n    pixels = im.load()\n    x, y = im.size\n    for i in range(x):\n        for j in range(x - i):\n            pixels[j, i], pixels[x - i - 1, x - j - 1] = pixels[x - i - 1, x - j - 1], pixels[j, i]\n    im.save('res.jpg')\n​\n​\nmirror()\n​\n","Рисуем парусник":"from PIL import Image, ImageDraw\n​\n​\ndef picture(file_name, width, height, sky_color='#87CEEB', ocean_color='#017B92',\n            boat_color='#874535', sail_color='#FFFFFF', sun_color='#FFCF40'):\n    im = Image.new('RGB', (width, height))\n    draw = ImageDraw.Draw(im)\n​\n    draw.rectangle(((0, 0), (width, int(height * 0.8))), sky_color)\n    draw.rectangle(((0, int(height * 0.8)), (width, height)), ocean_color)\n    draw.rectangle(((int(width * 0.49), int(height * 0.3)), (int(width * 0.51), int(height * 0.65))), boat_color)\n    draw.polygon(((int(width * 0.25), int(height * 0.65)), (int(width * 0.75), int(height * 0.65)),\n                 (int(width * 0.7), int(height * 0.85)), (int(width * 0.3), int(height * 0.85)),\n                 (int(width * 0.25), int(height * 0.65))), boat_color)\n    draw.polygon(((int(width * 0.51), int(height * 0.3)), (int(width * 0.66), int(height * 0.47)),\n                 (int(width * 0.51), int(height * 0.6)), (int(width * 0.51), int(height * 0.3))), sail_color)\n    draw.ellipse(((int(width * 0.90), -int(height * 0.2)), (int(width * 1.3), int(height * 0.2))), sun_color)\n    im.save(file_name)\n","Градиент":"from PIL import Image, ImageDraw\n​\n​\ndef gradient(color):\n    color = color.upper()\n    new_color = (0, 0, 0)\n    size_x = 512\n    size_y = 200\n    new_image = Image.new(\"RGB\", (size_x, size_y), new_color)\n    Draw = ImageDraw.Draw(new_image)\n    for x in range(0, 512, 2):\n        Draw.line((x, 0, x, 200), fill=new_color, width=2)\n        r, g, b = new_color\n        if color == 'R':\n            r += 1\n        elif color == 'G':\n            g += 1\n        else:\n            b += 1\n        new_color = r, g, b\n    new_image.save('res.png', 'PNG')\n​\n","Шахматная доска":"from PIL import Image, ImageDraw\n​\n​\ndef board(num, size):\n    s_all = num * size\n    new_color = (0, 0, 0)\n    color = (0, 0, 0)\n    newImage = Image.new(\"RGB\", (s_all, s_all), new_color)\n    draw = ImageDraw.Draw(newImage)\n    for y in range(num):\n        for x in range(num):\n            draw.rectangle(((x * size, y * size), (x * size + size, y * size + size)), color)\n            if color == (0, 0, 0):\n                color = (255, 255, 255)\n            else:\n                color = (0, 0, 0)\n        if num % 2 == 0:\n            if color == (0, 0, 0):\n                color = (255, 255, 255)\n            else:\n                color = (0, 0, 0)\n    newImage.save('res.png')\n​\n​\n","Рисуем ёлочку":"from PIL import Image, ImageDraw\n​\n​\ndef picture(file_name, width, height, sky_color='#75BBFD', snow_color='#FFFAFA',\n            trunk_color='#A45A52', needls_color='#01796F', sun_color='#FFDB00'):\n    im = Image.new('RGB', (width, height))\n    draw = ImageDraw.Draw(im)\n​\n    draw.rectangle(((0, 0), (width, int(height * 0.8))), sky_color)\n    draw.rectangle(((0, int(height * 0.8)), (width, height)), snow_color)\n    draw.polygon(((int(width * 0.3), int(height * 0.7)), (int(width * 0.4), int(height * 0.5)),\n                  (int(width * 0.35), int(height * 0.5)), (int(width * 0.45), int(height * 0.3)),\n                  (int(width * 0.4), int(height * 0.3)), (int(width * 0.5), int(height * 0.1)),\n                  (int(width * 0.6), int(height * 0.3)), (int(width * 0.55), int(height * 0.3)),\n                  (int(width * 0.65), int(height * 0.5)), (int(width * 0.60), int(height * 0.5)),\n                  (int(width * 0.7), int(height * 0.7)), (int(width * 0.3), int(height * 0.7))),\n                 needls_color)\n    draw.rectangle(((int(width * 0.45), int(height * 0.7)), (int(width * 0.55), int(height * 0.9))),\n                   trunk_color)\n    draw.ellipse(((int(width * 0.90), -int(height * 0.2)), (int(width * 1.3), int(height * 0.2))),\n                 sun_color)\n    im.save(file_name)\n","СтереопараРУЧ":"from PIL import Image\n​\n​\ndef makeanagliph(filename, delta):\n    im1 = Image.open(filename)\n    x, y = im1.size\n    im2 = im1.copy()\n    im3 = Image.new('RGB', (x, y), (0, 0, 0))\n    pixels1 = im1.load()\n    pixels2 = im2.load()\n    pixels3 = im3.load()\n    for i in range(x):\n        for j in range(y):\n            if i < delta:\n                pixels3[i, j] = 0, pixels2[i, j][1], pixels2[i, j][2]\n            else:\n                pixels3[i, j] = pixels1[i - delta, j][0], pixels2[i, j][1], pixels2[i, j][2]\n    im3.save('res.jpg')\n","Красивое имяРУЧ":"from PIL import Image, ImageDraw\n​\n# Т\nim = Image.new('RGB', (2000, 1000), '#8c4566')\nw = 2000\nh = 1000\ndraw = ImageDraw.Draw(im)\ndraw.line((280, 70, 280, 970), fill='#d68a59', width=20)\ndraw.line((20, 110, 440, 110), fill='#d68a59', width=20)\ndraw.line((20, 60, 440, 60), fill='#efa94a', width=80)\ndraw.line((230, 70, 230, 970), fill='#efa94a', width=80)\n​\n# А\ndraw.line((580, 700, 880, 700), fill='#d68a59', width=90)\ndraw.line((630, 650, 830, 650), fill='#b5a642', width=40)\ndraw.line((730, 60, 530, 970), fill='#b5a642', width=80)\ndraw.line((730, 60, 930, 970), fill='#b5a642', width=80)\ndraw.ellipse(((690, 20), (770, 100)), fill='#b5a642')\n​\n# Н\nx = 1060\ny = 10\nfor i in range(5):\n    draw.ellipse(((x - 10, y - 8), (x + 100 + 8, y + 180 + 8)), fill='#d68a59')\n    draw.ellipse(((x, y), (x + 100, y + 180)), fill='#ff9966')\n    y += 200\nx = 1300\ny = 10\nfor i in range(5):\n    draw.ellipse(((x - 8, y - 8), (x + 100 + 8, y + 180 + 8)), fill='#d68a59')\n    draw.ellipse(((x, y), (x + 100, y + 180)), fill='#ff9966')\n    y += 200\ndraw.ellipse(((1180 - 8, 410 - 8), (1280 + 8, 590 + 8)), fill='#d68a59')\ndraw.ellipse(((1180, 410), (1280, 590)), fill='#ff9966')\n​\n# Я\ndraw.polygon(((1480, 950), (1730, 500), (1600, 250), (1750, 50), (1950, 50),\n              (1950, 950), (1850, 950), (1850, 500), (1600, 950), (1480, 950)),\n             fill='#bab86c')\ndraw.ellipse(((1720, 100), (1910, 450)), fill='#d68a59')\ndraw.ellipse(((1740, 120), (1890, 430)), fill='#8c4566')\n​\nim.save('name.png')\n","Бинго!":"import random\n​\n​\ndef make_bingo():\n    x = tuple(random.sample(range(1, 76), 25))\n    x = tuple([x[i * 5:i * 5 + 5] for i in range(5)])\n    x = tuple(map(lambda i: x[i] if i != 2 else tuple(\n        map(lambda j: x[i][j] if j != 2 else 0, range(0, len(x[i])))), range(0, len(x))))\n    return x\n","Выбор тайного друга":"import sys\nimport random\n​\nmas = list(map(str.strip, sys.stdin))\nmas = random.sample(mas, len(mas))\nfor i in range(len(mas)):\n    print(mas[i - 1], '-', mas[i])\n","Генератор визуально различимых паролей (базовый)":"import random\n​\n​\ndef generate_password(m):\n    symb = 'qqwertyupasdfghjkzxcvbnm' + 'qqwertyupasdfghjkzxcvbnm'.upper() + '23456789Li'\n    return ''.join(random.choices(symb, k=m))\n​\n​\ndef main(n, m):\n    x = []\n    for i in range(n):\n        a = generate_password(m)\n        while a in x:\n            a = generate_password(m)\n        x.append(a)\n    return x\n","Дни рождения друзей":"import datetime\n​\ndays = datetime.timedelta(days=int(input()))\ndate = datetime.datetime.today().date()\nanswer = str(date + days).split('-')\nprint(answer[-1] if answer[-1][0] != '0' else answer[-1][1:],\n      answer[-2] if answer[-2][0] != '0' else answer[-2][1:])\n","Генератор визуально различимых паролей (A)":"import random\n​\n​\ndef generate_password(m):\n    symb = 'qwertyupasdfghjkzxcvbnm' + 'qwertyupasdfghjkzxcvbnm'.upper() + '23456789Li'\n    return ''.join(random.sample(symb, k=m))\n​\n​\ndef main(n, m):\n    x = []\n    for i in range(n):\n        a = generate_password(m)\n        while a in x:\n            a = generate_password(m)\n        x.append(a)\n    return x\n","Генератор визуально различимых паролей (B)":"","Биоритмы":"import datetime\nimport math\n​\ndate1 = datetime.date(*[int(i) for i in input().split('.')[::-1]])\ndate2 = datetime.date(*[int(i) for i in input().split('.')[::-1]])\nT = (date2 - date1).days\nprint(round((math.sin((2 * math.pi * T) / 23) * 100), 2))\nprint(round((math.sin((2 * math.pi * T) / 28) * 100), 2))\nprint(round((math.sin((2 * math.pi * T) / 33) * 100), 2))\n","Найти приближённое значение ПиРУЧ":"import random\n​\n# вероятность попадания точки в 1/4 круга = кол-во точек в 1/4 круга\n# / на общее кол-во точек (кол-во точек в в квадрате (сторона = R))\n# также вероятность попадания точки в круг = S 1/4 круга / на S точек в квадрате (сторона = R)\n# то есть S 1/4 круга = (S общая * N точек в 1/4 круга (кол-во точек в кругу)) / N точек\nN_round = 0\nN_all = 0\nS_all = 1\nfor i in range(100000):\n    a = (random.random(), random.random())\n    if (a[0] ** 2 + a[1] ** 2) ** 0.5 < 1:\n        N_round += 1\n    N_all += 1\nS_round = (S_all * N_round) / N_all\nS = S_round * 4\nPI = S  # S = PI * R ** 2, где R = 1\nprint(PI)\n","Генератор визуально различимых паролей (A + B)":"import random\n​\nc1 = 'abcdefghijkmnpqrstuvwxyz'\nc2 = 'ABCDEFGHJKLMNPQRSTUVWXYZ'\nc3 = '23456789'\nx = []\n​\n​\ndef generate_password(m):\n    symb = 'abcdefghijkmnpqrstuvwxyz' + 'ABCDEFGHJKLMNPQRSTUVWXYZ' + '23456789'\n    a = ''.join(random.sample(symb, k=m))\n    while a in x or set(a) & set(c1) == set() or \\\n            set(a) & set(c2) == set() or set(a) & set(c3) == set():\n        a = ''.join(random.sample(symb, k=m))\n    return a\n​\n​\ndef main(n, m):\n    global x\n    for i in range(n):\n        a = generate_password(m)\n        x.append(a)\n    return x\n","Коровы и быки. Секретный уровеньРУЧ":"import random\n​\ncontrol1 = []  # то, что уже назвал пользователь\ncontrol2 = ''  # все коровы\ncontrol3 = {}  # быки\ncontrol4 = ''  # цифры которые нельзя использовать\n​\n​\ndef bulls_and_cows(mas1, mas2):\n    # функция, которая принимает два массива цифр:\n    # цифры загаданного числа и цифры из попытки отгадать —\n    # и считает по ним число быков и коров\n    #\n    # также ведет счет для control2/3,\n    # где хранятся сведения об уже встретившихся быках и коровах\n    global control2\n    global control3\n    global control4\n    mas1_c = mas1.copy()\n    cows = 0\n    control2_1 = ''\n    for i in mas2:\n        if i in mas1_c:\n            cows += 1\n            control2_1 += i\n            del mas1_c[mas1_c.index(i)]\n        else:\n            control4 += i\n    bulls = 0\n    for i in range(len(mas1)):\n        if mas1[i] == mas2[i]:\n            bulls += 1\n            control3[i] = mas1[i]\n            cows -= 1\n    control2 += ''.join(list(set(control2_1) ^ set(control3.values())))\n    control2 = ''.join(list(set(control2) ^ set(map(str, control3))))\n    control4 = ''.join(list(set(control4) - set(control2) - set(map(str, control3))))\n    return bulls, cows\n​\n​\ndef mas(n):\n    # функция, которая по числу возвращает массив цифр в том порядке, в котором они указаны\n    return list(str(n))\n​\n​\ndef create():\n    # функция создает четырехзначное число с неповторяющимися цифрами,\n    # с учетом того, что в нем должны быть уже найденные быки и коровы\n    count2 = list(control2)\n    count4 = list(set('123467890') - set(control4) - set(control2) - set(map(str, control3)))\n    print('!!!', count4)\n    c = 0\n    n = ''\n    for i in range(4):\n        if control3.get(i):\n            n += control3[i]\n        elif count2:\n            a = random.choice(count2)\n            n += a\n            del count2[count2.index(a)]\n        else:\n            a = random.choice(count4)\n            n += a\n            del count4[count4.index(a)]\n    # меняем число, если число уже встречалась в вариантах пользователя\n    #\n    # чтобы не уйти в бескорнечный цикл, проверяем,\n    # что перепрорбовали все варианты (4 * 3 * 2 * 1)\n    while n in control1 and c <= 24:\n        count2 = list(control2)\n        count4 = list(set('123467890') - set(control4) - set(control2) - set(control3))\n        c += 1\n        n = ''\n        for i in range(4):\n            if control3.get(i):\n                n += control3[i]\n            elif count2:\n                a = random.choice(count2)\n                n += a\n                del count2[count2.index(a)]\n            else:\n                a = random.choice(count4)\n                n += a\n                del count4[count4.index(a)]\n    n = int(n)\n    if n in control1:\n        return 'lose'\n    return n\n​\n​\ndef main():\n    # основная функция для перехода между остальными функциями\n    global control1\n    n = create()\n    print('''Я загадал четырхзначное число c неповторяющимися цифрами. Попытайтесь его угадать.\nДля этого предлагайте вариант числа, а я скажу сколько в нем быков и коров.\n(быки - цифры, поразрядно совпавшие с правильным ответом)\n(коровы - цифры, которые есть в ответе, но не на указанной позиции)''')\n    while True:\n        print(n)\n        print(control1)\n        print(control2)\n        print(control3)\n        print(control4)\n        variant = int(input('Введите ваш вариант\\n'))\n        control1.append(variant)\n        if variant == n:  # меням значение при точном попадании с помощью create\n            n = create()\n            if n == 'lose':\n                print('Вы выиграли!')\n                break\n        answer = bulls_and_cows(mas(n), mas(variant))\n        # выводим количество быков и коров\n        print(f'В вашем варианте быков: {answer[0]} и коров: {answer[1]} .')\n​\n​\nmain()\n​\n","Генерация текстовРУЧ":"from swift import words\nimport random\n​\nd = {}\nwords = list(filter(lambda x: x not in '!?.,:;\"()-', words))\nlength = len(words)\nfor i in range(length - 1):\n    d[words[i]] = d.get(words[i], []) + [words[i + 1]]\nn = int(input())\nanswer = []\na = random.choice(list(d.keys()))\nfor i in range(n):\n    a1 = random.randrange(0, len(d[a]))\n    if answer:\n        while d[a][a1] == answer[-1]:\n            a1 = random.randrange(0, len(d[a]))\n    answer.append(d[a][a1])\n    a = d[a][a1]\nprint(' '.join(answer).capitalize() + '.')\n","Печать в верхнем регистреРУЧ":"def use_uppercased_arguments(old_func):\n    def new_func(*args):\n        args_upcased = [str(arg).upper() for arg in args]\n        old_func(*args_upcased)\n​\n    return new_func\n​\n​\nprint = use_uppercased_arguments(print)\n","Пароль для ФибоначчиРУЧ":"def check_password(func):\n    password = 'password'\n​\n    check = password == input()\n​\n    def new_func(*args, **kwargs):\n        if check:\n            return func(*args, **kwargs)\n        else:\n            print('В доступе отказано.')\n​\n    return new_func\n​\n","Генератор декораторовРУЧ":"def check_password(password):\n    def logged(func):\n        def decorated_func(*args, **kwargs):\n            if password == input():\n                return func(*args, **kwargs)\n            else:\n                print('В доступе отказано')\n​\n        return decorated_func\n​\n    return logged\n​\n","Декоратор для кэшированияРУЧ":"def cached(func):\n    d = {}\n​\n    def decorated_func(*args, **kwargs):\n        if args not in d:\n            result = func(*args, **kwargs)\n            d[args] = result\n            return result\n        else:\n            return d[args]\n​\n    return decorated_func\n","Добрейший калиф":"import sys\n​\nline = []\nfor i in sys.stdin:\n    line.append(i.strip().split(', '))\nprint(' '.join(list(filter(lambda z: int(z) % 2 == 0, max(line, key=lambda x: len(\n    list(filter(lambda y: int(y) % 2 == 0, x))))))))\n","Табакерка":"def parchment(line, divisor=' '):\n    global snuffbox\n    mas = []\n    for x in snuffbox:\n        a = divisor.join(list(filter(lambda y: y not in line, x)))\n        mas.append(a)\n    snuffbox = tuple(mas)\n","Снова люди":"def people_again(*datas, **conditions):\n    global data\n    mas = []\n    count = -1\n    for x in datas:\n        count += 1\n        a = ''\n        if 'remove' in conditions:\n            a = list(map(lambda z: x[z], filter(lambda y: y not in conditions['remove'], range(len(x)))))\n        if 'letter' in conditions:\n            if a[0] != conditions['letter']:\n                a.insert(0, conditions['letter'])\n        a = ''.join(a)\n        if 'to_upper' in conditions and conditions['to_upper'] == 0:\n            a = a.upper()\n        else:\n            a = a.lower()\n        data[count] = a\n    return data\n","Обработка текстаРУЧ":"import sys\n​\nline = []\nfor i in sys.stdin:\n    line.extend(i[:-1].split())\n​\nline = enumerate(map(lambda x: x if x[-1].isalpha() else x[:-1], line))\nline = list(sorted(filter(lambda x: x[1].capitalize() == x[1], line), key=lambda x: x[1]))\nsave = []\nfor i in line:\n    if i[1] not in save:\n        save.append(i[1])\n        print(f'{i[0]} - {i[1]}')\n","Выгодная покупкаРУЧ":"import sys\n​\nmatrix = []\nmatrix.append(input().split('\\t'))\nfor x in sys.stdin:\n    matrix.append(x.strip().split('\\t'))\nn = matrix.index(min(matrix[1:], key=lambda x: sum(list(map(lambda j: int(j), x[1:])))))\nmatrix = list(zip(*matrix))\nfor i in range(len(matrix)):\n    if i == 0:\n        print(matrix[0][n])\n    else:\n        print(matrix[i][0], matrix[i][n], sep='\\t')\n","Полумагический квадратРУЧ":"from sys import stdin\n​\nmatrix = list(map(lambda x: [int(i) for i in x.strip().split()], stdin))\ns = sum(matrix[0])\nprint('YES' if all(sum(i) == s for i in matrix) and all(sum(i) == s for i in zip(*matrix)) else 'NO')\n","Колода картРУЧ":"import itertools\n​\nsuit_wrong = input()\ndenominations = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'валет', 'дама', 'король', 'туз']\nsuits = ['пик', 'треф', 'бубен', 'червей']\ndel suits[suits.index(suit_wrong)]\nfor i in itertools.product(denominations, suits):\n    print(*i)\n","ДислексияРУЧ":"import itertools\n​\ncontrol = [i.lower() for i in input().split()]\n​\nline = [i.lower() for i in input().split()]\nanswer = []\nfor i in line:\n    flag = False\n    for j in itertools.permutations(i):\n        j1 = ''.join(j)\n        if j1 != i and j1 in control:\n            answer.append('#' * len(i))\n            flag = True\n            break\n    if not flag:\n        answer.append(i)\nprint(*answer)\n","Свернуть к минимумуРУЧ":"from functools import reduce\nfrom sys import stdin\n​\nprint(reduce(lambda result, element: element if element < result else result,\n             map(str.strip, stdin), 'я' * 1000))\n​\n","Наибольший общий делительРУЧ":"import sys\nimport functools\nimport math\n​\nline = [int(i.strip()) for i in sys.stdin]\nprint(functools.reduce(lambda result, element: math.gcd(result, element), line))\n","Юбилейные монеты":"from sys import stdin\nimport itertools\n​\nx = list(map(str.strip, stdin))\nx.sort()\nx = [list(group[1]) for group in itertools.groupby(x)]\nresult = 0\nfor element in x:\n    if len(element) > 1:\n        result += int(element[0].split()[0]) * (len(element) - 1)\nprint(result)\n","Крупные города":"import sys\nimport itertools\n​\nline = [i.strip().split()[::2] for i in sys.stdin]\nline.sort(key=lambda x: int(x[1]))\nline = itertools.groupby(line, lambda x: int(x[1]) // 100000)\nfor i in line:\n    print(i[0] * 100, ' - ',\n          (i[0] + 1) * 100, ': ', sep='', end=' ')\n    print(', '.join(sorted([j[0] for j in i[1]])))\n","Карточные раскладыРУЧ":"import itertools\n​\ndenominations = [10, 2, 3, 4, 5, 6, 7, 8, 9, 'валет', 'дама', 'король', 'туз']\ncontrol = ['валет', 'дама', 'король', 'туз']\nsuits = ['бубен', 'пик', 'треф', 'червей']\nanswer = filter(lambda x: (x[0][1] == 'червей' or x[1][1] == 'червей' or x[2][1] == 'червей') and\n                          (x[0][0] in control or x[1][0] in control or x[2][0] in control),\n                itertools.combinations(itertools.product(denominations, suits), 3))\nfor x in answer:\n    print(*[' '.join([str(j) for j in i]) for i in x], sep=', ')\n","Длина списка":"def recursive_len(mas):\n    if mas == []:\n        return 0\n    return recursive_len(mas[:-1]) + 1\n","косипс ьтунревереП":"def recursive_reverse(some_list):\n    if not some_list:\n        return some_list\n    return [some_list[-1]] + recursive_reverse(some_list[:-1])\n","Трибоначчи":"fib_s = [0, 0, 1]\n​\n​\ndef tribonacci(n):\n    if n == 1:\n        return 0\n    if n == 0:\n        return 0\n    if n == 2:\n        return 1\n    if len(fib_s) > n:\n        return fib_s[n]\n    fib_s.append(tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n - 3))\n    res = fib_s[-1]\n    return res\n","Сумма элементов списка":"def rec_linear_sum(some_list):\n    if not some_list:\n        return 0\n    return some_list[-1] + rec_linear_sum(some_list[:-1])\n​\n","Линеаризация списка":"def linear(some_list):\n    if type(some_list) is not list:\n        return [some_list]\n    elif len(some_list) == 0:\n        return []\n    return linear(some_list[0]) + linear(some_list[1:])\n","Мини-судоку":"from copy import deepcopy\nfrom sys import stdin\n​\n​\ndef get_variants(sudoku):\n    variants = []\n    for i, row in enumerate(sudoku):\n        for j, value in enumerate(row):\n            if not int(value):\n                # значения в строке\n                row_values = set(row)\n                # значения в столбце\n                column_values = set([sudoku[k][j] for k in range(4)])\n                # в каком квадрате 3x3 находится клетка?\n                # Координаты этого квадрата\n                sq_y = i // 2\n                sq_x = j // 2\n                square2x2_values = set([\n                    sudoku[m][n]\n                    for m in range(sq_y * 2, sq_y * 2 + 2)\n                    for n in range(sq_x * 2, sq_x * 2 + 2)\n                ])\n                exists = row_values | column_values | square2x2_values\n                # какие значения остались?\n                values = set(range(1, 5)) - exists\n                variants.append((i, j, values))\n    return variants\n​\n​\ndef solve_sudoku(matrix):\n    # Если судоку заполнено, это ответ\n    if all([k for row in matrix for k in row]):\n        return matrix\n​\n    # Иначе посмотрим все варианты\n    variants = get_variants(matrix)\n​\n    # Выберем тот, у которого меньше всего возможностей.\n    x, y, values = min(variants, key=lambda x: len(x[2]))\n​\n    # Попробуем все по очереди\n    for v in values:\n        # deepcopy создает полную копию списка с учетом всех вложенностей\n        new_sudoku = deepcopy(matrix)\n        new_sudoku[x][y] = v\n        # Если оно решилось, возвратим ответ.\n        s = solve_sudoku(new_sudoku)\n        if s:\n            return s\n    return None\n​\n​\nmatrix = []\nfor x in range(4):\n    matrix.append([int(i) for i in input().strip()])\nfor i in solve_sudoku(matrix):\n    print(''.join([str(j) for j in i]))\n","Оптимальный путьРУЧ":"flow = []\nwhile True:\n    a = input().split()\n    flow.append(a)\n    if len(a) == 2:\n        break\nmas_c = []\nfor i in range(len(flow) - 1):\n    mas_c.append(max(flow[i][:2]))\nlength = int(max(mas_c))\nmas = [[1000000000 for i in range(length)] for j in range(length)]\nmas1 = [[1000000000 for i in range(length)] for j in range(length)]\nfor i in flow:\n    if len(i) == 3:\n        n1 = int(i[0])\n        n2 = int(i[1])\n        v = int(i[2])\n        mas[n1 - 1][n2 - 1] = v\n        mas[n2 - 1][n1 - 1] = v\n    else:\n        b = int(i[0])\n        e = int(i[1])\nb1 = b\ne1 = e\nmark = [[True for i in range(length)] for j in range(length)]\nmas1[0][b1 - 1] = 0\nanswer = ''\nl_way = ''\nfor j in range(1, length):\n    for i in range(j, length):\n        if mas1[i][b1 - 1] == 1000000000:\n            mark[i][b1 - 1] = False\n        else:\n            break\n    mn = 1000000\n    mn1 = 0\n    for i in range(length):\n        if mark[j][i]:\n            if mas1[j - 1][i] > mas[b1 - 1][i] + mas1[j - 1][b1 - 1]:\n                mas1[j][i] = mas[b1 - 1][i] + mas1[j - 1][b1 - 1]\n            else:\n                mas1[j][i] = mas1[j - 1][i]\n        if mas1[j][i] < mn:\n            mn = mas1[j][i]\n            mn1 = i\n    b1 = mn1 + 1\n    if b1 == e:\n        l_way = mn\n        break\n​\nanswer = []\n​\n​\ndef way(e1, l_way1):\n    if e1 == b:\n        answer.append(e1)\n        return\n    for i in range(length):\n        if mas1[i][e1 - 1] == l_way1:\n            answer.append(e1)\n            l_way1 = min(mas1[i - 1])\n            way(mas1[i - 1].index(l_way1) + 1, l_way1)\n​\n​\nway(e, l_way)\nanswer = [str(i) for i in answer[::-1]]\nprint(', '.join(answer))\n","Словарный порядок":"print(' '.join(sorted(input().split(), key=lambda x: x.lower())))\n","ОтличникиРУЧ":"print('ДА' if all([any([input()[-1] == '5' for j in range(int(input()))]) for i in\n                   range(int(input()))]) else 'НЕТ')\n","Средний рост":"import sys\n​\nline = list(map(int, sys.stdin))\nprint(sum(line) / len(line) if line else '-1')\n​\n","Ваши комментарииРУЧ":"import sys\n​\nline = list(sys.stdin)\nprint(len(list(filter(lambda x: len(line[x].strip()) != 0 and line[x].strip()[0] == '#',\n                      range(0, len(line))))))\n","Есть ли 0РУЧ":"import sys\n​\nprint('True' if any(filter(lambda x: '0' in x.strip().split(), sys.stdin.readlines()))\n      else 'False')\n​\n","Гематрия по-английски":"import sys\n​\nprint('\\n'.join(sorted([i.strip() for i in sys.stdin.readlines()],\n                       key=lambda x: (sum([ord(j) - ord('A') + 1 for j in x.upper()]), x))))\n","Оформленные комментарии":"import sys\n​\nline = [i.strip() for i in sys.stdin.readlines()]\nanswer = list(filter(lambda x: x[0] == '#', line))\nfor i in answer:\n    print(f'Line {line.index(i) + 1}: {i[1:].strip()}')\n","Ох уж эти анаграммыРУЧ":"","Набор юного арифметика":"def arithmetic_operation(operation):\n    if operation == '+':\n        return lambda x, y: x + y\n    elif operation == '-':\n        return lambda x, y: x - y\n    elif operation == '*':\n        return lambda x, y: x * y\n    elif operation == '/':\n        return lambda x, y: x / y\n","Просто map":"def simple_map(transformation, values):\n    answer = [transformation(i) for i in values]\n    return answer\n","Комбинируй и властвуйРУЧ":"answer = print(sum(map(lambda x: x ** 2, filter(lambda x: x % 9 == 0, range(10, 100)))))\n","Мимикрия":"transformation = lambda x: x\n","Коллбэки":"vowels = 'aeiouy'\nconsonants = 'qwrtpsdfghjklzxcvbnm'\n​\n​\ndef ask_password(login, password, success=lambda x: '', failure=lambda x, y: ''):\n    login, password = login.lower(), password.lower()\n    v = list(filter(lambda x: x in vowels, password))\n    c = list(filter(lambda x: x in consonants, password))\n    c_control = list(filter(lambda x: x in consonants, login))\n    if len(v) != 3 and c != c_control:\n        message = 'Everything is wrong'\n    elif len(v) != 3:\n        message = 'Wrong number of vowels'\n    elif c != c_control:\n        message = 'Wrong consonants'\n    else:\n        message = ''\n    if not message:\n        success(login)\n        return f'Привет, {login}!'\n    else:\n        failure(login, message)\n        return f'Кто-то пытался притвориться пользователем {login}, ' \\\n               f'но в пароле допустил ошибку: {message.upper()}.'\n​\n​\ndef main(login, password):\n    print(ask_password(login, password))\n","Самая далёкая планета":"def find_farthest_orbit(list_of_orbits):\n    list_of_orbits = filter(lambda x: x[0] != x[1], list_of_orbits)\n    return max(list_of_orbits, key=lambda x: x[0] * x[1])\n","Пам-парам парам-пам парамРУЧ":"vowels = 'уеыаоэяиюё'\n​\n​\ndef pam_pam(line):\n    line_control = [len(j) for j in [list(filter(lambda x: x in vowels, i)) for i in line]]\n    answer = list(filter(lambda x: line_control[x] != line_control[x - 1], range(1, len(line))))\n    answer. append(0)\n    if len(answer) == 1:\n        print('Парам пам-пам')\n    else:\n        print('Пам парам')\n​\n​\nline = input().split()\npam_pam(line)\n​\n","АстроидаРУЧ":"import math\n​\n​\ndef coord(t):\n    x = math.cos(t) ** 3\n    y = math.sin(t) ** 3\n    return x, y\n​\n​\ns_min = 1000000\nt = 0\nwhile t <= 0.2 * math.pi:\n    t += 0.0001\n    x, y = coord(t)\n    s = (y ** 2 + (x - 0.75) ** 2) ** 0.5\n    if s < s_min:\n        s_min = s\nprint(str(s_min)[:6])\n","Все равны, как на подбор":"def same_by(characteristic, objects):\n    values_control = list(map(characteristic, objects))\n    answer = list(filter(lambda x: values_control[x] != values_control[x - 1], \n                         range(1, len(values_control))))\n    answer.append(0)\n    if len(answer) == 1:\n        return True\n    return False\n","Таблица операцииРУЧ":"def print_operation_table(operation, num_rows=9, num_columns=9):\n    answer = []\n    for x in range(1, num_rows + 1):\n        answer.append([])\n        for y in range(1, num_columns + 1):\n            answer[x - 1].append(str(operation(x, y)))\n    for i in answer:\n        print('\\t'.join(i))\n​\n","Матрица":"def matrix(n=1, m=-1, a=0):\n    if m < 0:\n        m = n\n    x = []\n    for i in range(n):\n        x.append(m * [a])\n    return x\n","Бариста":"def choose_coffee(*preferences):\n    global ingredients\n    for x in preferences:\n        if x == 'Эспрессо' and ingredients[0] >= 1:\n            ingredients[0] -= 1\n            return 'Эспрессо'\n        elif x == 'Капучино' and ingredients[0] >= 1 and ingredients[1] >= 3:\n            ingredients[0] -= 1\n            ingredients[1] -= 3\n            return 'Капучино'\n        elif x == 'Маккиато' and ingredients[0] >= 2 and ingredients[1] >= 1:\n            ingredients[0] -= 2\n            ingredients[1] -= 1\n            return 'Маккиато'\n        elif x == 'Кофе по-венски' and ingredients[0] >= 1 and ingredients[2] >= 2:\n            ingredients[0] -= 1\n            ingredients[2] -= 2\n            return 'Кофе по-венски'\n        elif x == 'Латте Маккиато' and ingredients[0] >= 1 and ingredients[1] >= 2 and ingredients[2] >= 1:\n            ingredients[0] -= 1\n            ingredients[1] -= 2\n            ingredients[2] -= 1\n            return 'Латте Маккиато'\n        elif x == 'Кон Панна' and ingredients[0] >= 1 and ingredients[2] >= 1:\n            ingredients[0] -= 1\n            ingredients[2] -= 1\n            return 'Кон Панна'\n    return 'К сожалению, не можем предложить Вам напиток'\n","СпамогенераторРУЧ":"def spam(email, name, data, place='Калуга'):\n    print(f'''To: {email}\nЗдравствуйте, {name}!\nБыли бы рады видеть вас на встрече начинающих программистов в {place}, которая пройдет {data}.''')\n​\n​\nspam('djdh@hdnd.mail.com', 'Валера', '26.01.21')\nspam('ndh@mail.com', 'Игорь', '26.01.21')\n​\n","Цезарь":"def encrypt_caesar(msg, shift=3):\n    if shift < 0:\n        return decrypt_caesar(msg, -shift)\n    else:\n        line = ''\n        for i in msg:\n            if 1040 <= ord(i) <= 1071:\n                if ord(i) + shift > 1071:\n                    while ord(i) + shift > 1071:\n                        i = chr(ord(i) - (1071 - 1040) - 1)\n                line += chr(ord(i) + shift)\n            elif 1072 <= ord(i) <= 1103:\n                if ord(i) + shift > 1103:\n                    while ord(i) + shift > 1103:\n                        i = chr(ord(i) - (1103 - 1072) - 1)\n                line += chr(ord(i) + shift)\n            else:\n                line += i\n        return line\n​\n​\ndef decrypt_caesar(msg, shift=3):\n    if shift < 0:\n        return encrypt_caesar(msg, -shift)\n    else:\n        line = ''\n        for i in msg:\n            if 1040 <= ord(i) <= 1071:\n                if ord(i) - shift < 1040:\n                    while ord(i) - shift < 1040:\n                        i = chr(ord(i) + (1071 - 1040) + 1)\n                line += chr(ord(i) - shift)\n            elif 1072 <= ord(i) <= 1103:\n                if ord(i) - shift < 1072:\n                    while ord(i) - shift < 1072:\n                        i = chr(ord(i) + (1103 - 1072) + 1)\n                line += chr(ord(i) - shift)\n            else:\n                line += i\n        return line\n","Частичные суммыРУЧ":"def partial_sums(*a):\n    answer = []\n    for x in range(len(a) + 1):\n        answer.append(sum(a[:x]))\n    return answer\n","Дартс":"def score(a, b=-1):\n    if b == -1:\n        return scoring[a]\n    else:\n        return scoring[a][b]\n","Уравнения степени не выше второй — часть 3":"def solve(cor):\n    answer = []\n    if len(cor) == 3:\n        a, b, c = int(cor[0]), int(cor[1]), int(cor[2])\n        if a == b == c == 0:\n            return ['all']\n        elif a == b == 0:\n            answer.append(0)\n            answer.append(-b / a)\n            return answer\n        elif a == 0:\n            answer.append(-c / b)\n            return answer\n        else:\n            D = b ** 2 - 4 * a * c\n            if D == 0:\n                answer.append((-b - D ** 0.5) / (2 * a))\n            elif D > 0:\n                answer.append((-b - D ** 0.5) / (2 * a))\n                answer.append((-b + D ** 0.5) / (2 * a))\n            return answer\n    elif len(cor) == 2:\n        b, c = int(cor[0]), int(cor[1])\n        if b == 0:\n            if c == 0:\n                return ['all']\n            else:\n                return []\n        else:\n            answer.append(-c / b)\n            return answer\n    elif len(cor) == 1:\n        c = int(cor[0])\n        if c == 0:\n            return ['all']\n        else:\n            return []\n    else:\n        return None\n​\n​\nprint(*solve(input().split()))\n","Электронный попугай":"mas_control = []\n​\n​\ndef parrot(phrase):\n    if phrase in mas_control:\n        print(phrase)\n    else:\n        mas_control.append(phrase)\n","Счёт за обед":"def count_food(days):\n    return sum([daily_food[i - 1] for i in days])\n","Покажите отличиеРУЧ":"x = list('8364955')\nprint(x, id(x))\nx.sort()\nprint(x, id(x))  # объект остался тем же, тк id не изменился\n​\ny = list('8364955')\nprint(y, id(y))\ny = sorted(y)\nprint(y, id(y))  # появился новый объект, тк id изменился\n​\n","ЗеркалоРУЧ":"def mirror(arr):\n    arr.reverse()  # разворачивает arr (тем самым изменяя его)\n    mirrored_part = arr.copy()  # создаем новый объект mirrored_part (с новым id),\n    # который по значениям повторяет arr\n    arr.reverse()  # возвращаем arr в первоначальный вид\n    arr.extend(mirrored_part)  # добавляем к arr перевернутую часть\n    # Нельзя писать \"mirrored_part = arr.reverse()\",\n    # тк функция reverse ничего не возвращает\n    # Строка \"arr = arr + mirrored_part\" создает локальную переменную arr,\n    # чего также делать нельзя\n​\n","Фрактальный список — 1РУЧ":"fractal = [0, 2]\nfractal.insert(1, fractal)\nfractal.insert(1, fractal)\n","От перестановки местРУЧ":"value = [1, 2, 3]\nprint(id(value))\naddition = [4]\nvalue += addition\nprint(id(value))  # id не изменился, тк value тот же новый объект\nprint(value) \n​\nvalue = [1, 2, 3]\nprint(id(value))\naddition = [4]\nvalue = value + addition\nprint(id(value))  # id измнился, тк изменился и сам объект\nprint(value)  # но значения в первом и втором примере будут одинаковые\n","Что ты имела в виду?РУЧ":"numbers = [2, 5, 7, 7, 8, 4, 1, 6]\nodd = []  # нужно создать разные объекты со списками,\neven = []  # чтобы изменение одного не меняло другой\nfor number in numbers:\n    if number % 2 == 0:\n        even.append(number)\n    else:\n        odd.append(number)\n# запись \"odd = even = []\" означает, что odd и even - один и тот же объект,\n# поэтому при изменении одного изменяется и другой\n​\n","Числа в строке":"def from_string_to_list(string, container):\n    string = string.split(' ')\n    if string != ['']:\n        string = [int(i) for i in string]\n        container.extend(string)\n​\n","Транспонирование":"def transpose(matrix):\n    m_control = []\n    for x in range(len(matrix[0])):\n        line = []\n        for y in range(len(matrix)):\n            line.append(matrix[y][x])\n        m_control.append(line.copy())\n    for i in range(len(m_control)):\n        if i > len(matrix) - 1:\n            matrix.append(m_control[i])\n        else:\n            matrix[i] = m_control[i]\n​\n","Обмен личностями":"def swap(first, second):\n    first[:], second[:] = second[:], first[:]\n","Фрактальный список – 2":"def defractalize(fractal):\n    while fractal in fractal:\n        fractal.remove(fractal)\n","Печать фрактала":"def fractal_print(obj):\n    mas = obj.copy()\n    mas[mas.index(obj)] = obj\n    print(mas)\n","Фрактальное деревоРУЧ":"black = []\nwhite = []\nwhite.append(black)\nwhite.append(black)\nblack.append(white)\nblack.append(white)\nblack.append(white)\nwb_tree = black\n","Длина окружности и площадь круга":"def main():\n    r = float(input())\n    print(circle_length(r), circle_area(r))\n​\n​\ndef circle_length(radius):\n    return 2 * PI * radius\n​\n​\ndef circle_area(radius):\n    return PI * radius ** 2\n​\n​\nPI = 3.14159\n","Корни квадратного уравнения":"def discriminant(a, b, c):\n    return b ** 2 - 4 * a * c\n​\n​\ndef larger_root(p, q):\n    return (-p + discriminant(1, p, q) ** 0.5) / 2\n​\n​\ndef smaller_root(p, q):\n    return (-p - discriminant(1, p, q) ** 0.5) / 2\n​\n​\ndef main():\n    p = float(input())\n    q = float(input())\n    print(discriminant(1, p, q))\n    print(smaller_root(p, q), larger_root(p, q))\n","Заикание":"mas = ['']\n​\n​\ndef print_without_duplicates(line):\n    if mas[-1] != line:\n        mas.append(line)\n        print(line)\n","Длинный чек":"items = []\ncount = 0\n​\n​\ndef add_item(item_name, item_cost):\n    global items\n    items.append((item_name, item_cost))\n​\n​\ndef print_receipt():\n    global count\n    global items\n    if items:\n        count += 1\n        print('Чек', str(count) + '.', 'Всего предметов:', len(items))\n        count1 = 0\n        for x in items:\n            print(x[0], '-', x[1])\n            count1 += x[1]\n        print('Итого:', count1)\n        print('-----')\n        items = []\n​\n","Я вас знаюРУЧ":"name = ''\n​\n​\ndef polite_input(question):\n    global name\n    if not name:\n        name = input('Как вас зовут?\\n')\n    print(name + ',', question)\n    x = input()\n    return x\n","Вечеринка":"d = {}\n​\n​\ndef add_friends(name_of_person, list_of_friends):\n    d[name_of_person] = d.get(name_of_person, [])\n    d[name_of_person].extend(list_of_friends)\n​\n​\ndef are_friends(name_of_person1, name_of_person2):\n    if name_of_person2 in d[name_of_person1]:\n        return True\n    return False\n​\n​\ndef print_friends(name_of_person):\n    line = d[name_of_person]\n    line.sort()\n    for x in line:\n        print(x, end=' ')\n    print()\n","НРЗБРЧВ":"","Айболит":"def hello(name):\n    print('Здравствуйте, ' + name + '! Вашу карту ищут...')\n​\n​\ndef search_card(name):\n    if name in base:\n        print('Ваша карта с номером', base.index(name) + 1, 'найдена')\n    else:\n        print('Ваша карта не найдена')\n​\n","Счастливый пассажир":"def lucky(ticket):\n    global lastTicket\n    n = len(str(lastTicket)) // 2\n    lt1, lt2 = list(str(lastTicket)[:n]), list(str(lastTicket)[n:])\n    lt1 = [int(i) for i in lt1]\n    lt2 = [int(i) for i in lt2]\n    if sum(lt1) == sum(lt2):\n        n = len(str(ticket)) // 2\n        t1, t2 = list(str(ticket)[:n]), list(str(ticket)[n:])\n        t1 = [int(i) for i in t1]\n        t2 = [int(i) for i in t2]\n        if sum(t1) == sum(t2):\n            return 'Счастливый'\n    return'Несчастливый'\n","Делайте ваши ставки":"mas = []\n​\n​\ndef do_bet(n, rate):\n    if n not in mas and 1 <= n <= 10 and rate != 0:\n        print('Ваша ставка в размере', rate, 'на лошадь', n, 'принята')\n        mas.append(n)\n    else:\n        print('Что-то пошло не так, попробуйте еще раз')\n","Статистика по клиентамРУЧ":"d = {}\n​\n​\ndef get_transactions(line):\n    if line == 'print_it':\n        for x in d.items():\n            print(x[1][0], x[0], x[1][1])\n    else:\n        line = line.split('-')[1]\n        line = line.split(':')\n        operation, money = line[0], line[1]\n        d[operation] = d.get(operation, [0, 0])\n        d[operation][0] += 1\n        d[operation][1] += int(money)\n","Римские примерыРУЧ":"def roman():\n    global one\n    global two\n    global three\n    three = one + two\n    print(interpretation(one) + ' + ' + interpretation(two) + ' = ' + interpretation(three))\n​\n​\ndef interpretation(n):\n    answer = ''\n    if len(str(n)) == 1:\n        if 1 <= n <= 3:\n            answer = 'I' * n\n        elif n == 4:\n            answer = 'IV'\n        elif n == 5:\n            answer = 'V'\n        elif 6 <= n <= 8:\n            answer = 'V' + (n - 5) * 'I'\n        elif n == 9:\n            answer = 'IX'\n    elif len(str(n)) == 2:\n        n1 = int(str(n)[0])\n        n2 = int(str(n)[1])\n        if 1 <= n1 <= 3:\n            answer = 'X' * n1\n        elif n1 == 4:\n            answer = 'XL'\n        elif n1 == 5:\n            answer = 'L'\n        elif 6 <= n1 <= 8:\n            answer = 'L' + (n1 - 5) * 'X'\n        elif n1 == 9:\n            answer = 'XC'\n        if 1 <= n2 <= 3:\n            answer += 'I' * n2\n        elif n2 == 4:\n            answer += 'IV'\n        elif n2 == 5:\n            answer += 'V'\n        elif 6 <= n2 <= 8:\n            answer += 'V' + (n2 - 5) * 'I'\n        elif n2 == 9:\n            answer += 'IX'\n    elif len(str(n)) == 3:\n        n1 = int(str(n)[0])\n        n2 = int(str(n)[1])\n        n3 = int(str(n)[2])\n        if 1 <= n1 <= 3:\n            answer = 'C' * n1\n        elif n1 == 4:\n            answer = 'CD'\n        elif n1 == 5:\n            answer = 'D'\n        elif 6 <= n1 <= 8:\n            answer = 'D' + (n1 - 5) * 'C'\n        elif n1 == 9:\n            answer = 'CM'\n        if 1 <= n2 <= 3:\n            answer += 'X' * n2\n        elif n2 == 4:\n            answer += 'XL'\n        elif n2 == 5:\n            answer += 'L'\n        elif 6 <= n2 <= 8:\n            answer += 'L' + (n2 - 5) * 'X'\n        elif n2 == 9:\n            answer += 'XC'\n        if 1 <= n3 <= 3:\n            answer += 'I' * n3\n        elif n3 == 4:\n            answer += 'IV'\n        elif n3 == 5:\n            answer += 'V'\n        elif 6 <= n3 <= 8:\n            answer += 'V' + (n3 - 5) * 'I'\n        elif n3 == 9:\n            answer += 'IX'\n    elif len(str(n)) == 4:\n        n1 = int(str(n)[0])\n        n2 = int(str(n)[1])\n        n3 = int(str(n)[2])\n        n4 = int(str(n)[3])\n        if 1 <= n1 <= 3:\n            answer = 'M' * n1\n        elif n1 == 4:\n            answer = 'MV'\n        elif n1 == 5:\n            answer = 'V'\n        elif 6 <= n1 <= 8:\n            answer = 'V' + (n1 - 5) * 'M'\n        elif n1 == 9:\n            answer = 'MX'\n        if 1 <= n2 <= 3:\n            answer += 'C' * n2\n        elif n2 == 4:\n            answer += 'CD'\n        elif n2 == 5:\n            answer += 'D'\n        elif 6 <= n2 <= 8:\n            answer += 'D' + (n2 - 5) * 'C'\n        elif n2 == 9:\n            answer += 'CM'\n        if 1 <= n3 <= 3:\n            answer += 'X' * n3\n        elif n3 == 4:\n            answer += 'XL'\n        elif n3 == 5:\n            answer += 'L'\n        elif 6 <= n3 <= 8:\n            answer += 'L' + (n3 - 5) * 'X'\n        elif n3 == 9:\n            answer += 'XC'\n        if 1 <= n4 <= 3:\n            answer += 'I' * n4\n        elif n4 == 4:\n            answer += 'IV'\n        elif n4 == 5:\n            answer += 'V'\n        elif 6 <= n4 <= 8:\n            answer += 'V' + (n4 - 5) * 'I'\n        elif n4 == 9:\n            answer += 'IX'\n    return answer\n","Здоровое питаниеРУЧ":"def diet(line):\n    line = line.split(', ')\n    count = 0\n    for x in line:\n        if x not in food['диетическое']:\n            count += 1\n    if count > len(line) // 2:\n        return 'Не ешь столько, По!'\n    return 'Так держать, Воин Дракона!'\n","Айболит 2.0":"def hello(name):\n    flag = False\n    n = 0\n    for i in range(len(query)):\n        if query[i] is None:\n            query[i] = name\n            flag = True\n            n = i\n            break\n    if flag:\n        print('Здравствуйте, ' + name + '! Подойдите к окошку номер', n + 1)\n    else:\n        print('Простите, ' + name + '. Все окна заняты')\n​\n​\ndef search_card(name):\n    if name in query:\n        if name in base:\n            print('Ваша карта с номером', base.index(name) + 1, 'найдена')\n        else:\n            print('Ваша карта не найдена')\n    else:\n        print('Простите, ' + name + ', дождитесь своей очереди')\n​\n​\ndef good_bye(name):\n    if name in query:\n        print('До свидания, не болейте, ' + name)\n        query[query.index(name)] = None\n    else:\n        print('Простите, ' + name + ', дождитесь своей очереди')\n","Число словами":"nums = '''0 ноль\n1   один\n2   два\n3   три\n4   четыре\n5   пять\n6   шесть\n7   семь\n8   восемь\n9   девять\n10  десять\n11  одиннадцать\n12  двенадцать\n13  тринадцать\n14  четырнадцать\n15  пятнадцать\n16  шестнадцать\n17  семнадцать\n18  восемнадцать\n19  девятнадцать\n20  двадцать\n30  тридцать\n40  сорок\n50  пятьдесят\n60  шестьдесят\n70  семьдесят\n80  восемьдесят\n90  девяносто'''.split('\\n')\nd = dict()\nfor i in nums:\n    i = i.split()\n    d[int(i[0])] = i[1]\n​\n​\ndef number_to_words(n):\n    if n < 20 or n % 10 == 0:\n        return d[n]\n    else:\n        answer = d[int(str(n)[0] + '0')] + ' ' + d[int(str(n)[1])]\n        return answer\n","Число цифр":"def num_digits(n):\n    return len(str(n))\n","Мелочь оставь себе":"def take_large_banknotes(l):\n    answer = []\n    for x in l:\n        if x > 10:\n            answer.append(x)\n    return answer\n","Среднее значение – 2":"def average(l):\n    if len(l) == 0:\n        return 0\n    answer = sum(l) / len(l)\n    if answer % 1 == 0:\n        answer = int(answer)\n    return answer\n","Скажи словами":"nums = '''0 zero\n1   one\n2   two\n3   three\n4   four\n5   five\n6   six\n7   seven\n8   eight\n9   nine\n10  ten\n11  eleven\n12  twelve\n13  thirteen\n14  fourteen\n15  fifteen\n16  sixteen\n17  seventeen\n18  eighteen\n19  nineteen\n20  twenty\n30  thirty\n40  forty\n50  fifty\n60  sixty\n70  seventy\n80  eighty\n90  ninety\n100 one hundred\n200 two hundred\n300 three hundred\n400 four hundred\n500 five hundred\n600 six hundred\n700 seven hundred\n800 eight hundred\n900 nine hundred'''.split('\\n')\nd = dict()\nfor x in nums:\n    x1 = x.split('\\t')\n    if len(x1) == 2:\n        d[int(x1[0])] = x1[1]\n    else:\n        d[int(x1[0])] = x1[1] + ' ' + x1[2]\n​\n​\ndef number_in_english(n):\n    if n < 20 or n % 10 == 0 and len(str(n)) == 2 or n % 100 == 0 and len(str(n)) == 3:\n        return d[n]\n    elif len(str(n)) == 2:\n        return d[int(str(n)[0] + '0')] + ' ' + d[int(str(n)[1])]\n    elif len(str(n)) == 3:\n        answer = d[int(str(n)[0] + '00')] + ' ' + 'and'\n        n = str(n)[1:]\n        n = int(n)\n        if n < 20 or n % 10 == 0:\n            answer += ' ' + d[n]\n        elif len(str(n)) == 2:\n            answer += ' ' + d[int(str(n)[0] + '0')] + ' ' + d[int(str(n)[1])]\n        return answer\n        return answer\n","Секретные материалы":"def print_document(line):\n    answer = []\n    for x in line:\n        if not x.startswith('Секретно'):\n            answer.append(x)\n        else:\n            print('\\n'.join(answer) + '\\n' + 'Дальнейшие материалы засекречены')\n            return\n    print('\\n'.join(answer) + '\\n' + 'Напечатано без купюр')\n","Поиски возвышенного":"def find_mountain(matrix):\n    mx = -1\n    answer = 0\n    for x in range(len(matrix)):\n        for y in range(len(matrix[x])):\n            if matrix[x][y] > mx:\n                mx = matrix[x][y]\n                answer = (x, y)\n    return answer\n","Месяц/Month":"rm = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь',\n      'Октябрь', 'Ноябрь', 'Декабрь']\nem = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n      'October', 'November', 'December']\n​\n​\ndef month_name(n, language):\n    if language == 'ru':\n        return rm[n - 1].lower()\n    return em[n - 1]\n","Уравнения степени не выше второй":"def roots_of_quadratic_equation(a, b, c):\n    if a == b == c:\n        return ['all']\n    if a == b == 0:\n        return []\n    if a == 0:\n        return [(0 - c) / b]\n    D = b ** 2 - 4 * a * c\n    if D < 0:\n        return []\n    if D == 0:\n        return [int(-b / (2 * a))]\n    x1 = int((-b + D ** 0.5) / (2 * a))\n    x2 = int((-b - D ** 0.5) / (2 * a))\n    return [x1, x2]\n","Палиндромы":"","Числа Каталана":"import math\n​\n​\ndef catalan(n):\n    return math.factorial(2 * n) // (math.factorial(n) * math.factorial(n + 1))\n","Тень, знай своё местоРУЧ":"def make_shades(alley, k):\n    bool_list = []\n    if k >= 0:\n        alley.reverse()\n        for x in alley:\n            bool_list.append(False)\n            if x > 0:\n                for y in range(1, k * x + 2):\n                    if len(bool_list) >= y:\n                        bool_list[-y] = True\n                    else:\n                        break\n        alley.reverse()\n        bool_list.reverse()\n    elif k < 0:\n        for x in alley:\n            bool_list.append(False)\n            if x > 0:\n                for y in range(1, abs(k * x) + 2):\n                    if len(bool_list) >= y:\n                        bool_list[-y] = True\n                    else:\n                        break\n    return bool_list\n​\n​\ndef calculate_sunny_length(shades):\n    return shades.count(False)\n​\n​\ndef main():\n    k = int(input())\n    alley = input().split()\n    alley = [int(i) for i in alley]\n    bool_list = make_shades(alley, k)\n    n = calculate_sunny_length(bool_list)\n    if n >= 10:\n        print('Обгорел')\n    else:\n        print('Тени достаточно')\n","Морской бойРУЧ":"def horizontal(m):\n    m_control = []\n    for x in m:\n        m_control.append(x[::-1])  # добавляем перевернутый ряд\n    return m_control\n​\n​\ndef vertical(m):\n    m_control = []\n    for x in m[::-1]:\n        m_control.append(x)  # добавляем ряды с конца\n    return m_control\n​\n​\ndef transpose(m):\n    m_control = []\n    for x in range(len(matrix[0])):\n        line = []\n        for y in range(len(matrix)):\n            line.append(m[y][x])\n            # x более постоянная переменная, чем y, поэтому y меняется от 1 до n,\n            # а x в этот момент остается постоянный.\n            # Поэтому мы берем из исходной матрицы y-овый эллемент из строки от 1 до n\n            # и формируем из таких элементов линию.\n            # Таким образом, каждая линия - 1 столбец от исходной матрицы.\n            # Добавляем эту линию к матрице (тем самым она становится строкой),\n            # т.е. столбцы становятся строками и наоброт, что и означает транспонирование.\n        m_control.append(line.copy())\n    return m_control\n​\n​\ndef print_matrix(m):\n    for x in m:\n        print(''.join(x))\n    print()\n​\n​\nmatrix = []\nfor x in range(int(input('Введите число строк '))):  # ввести размеры поля\n    line = [i for i in input().rstrip()]\n    matrix.append(line)\nprint('(исходное поле)')\nm1 = matrix  # исходное поле\nprint_matrix(m1)\nprint('(горизонтальное отражение)')\nm2 = horizontal(matrix)  # горизонтальное отражение\nprint_matrix(m2)\nprint('(вертикальное отражение) ')\nm3 = vertical(matrix)  # вертикальное отражение\nprint_matrix(m3)\nprint('(транспонирование)')\nm4 = transpose(matrix)  # транспонирование\nprint_matrix(m4)\nprint('(отражение вдоль горизонтали и вертикали одновременно) ')\nm5 = vertical(horizontal(matrix))  # отражение вдоль горизонтали и вертикали одновременно\nprint_matrix(m5)\nprint('(горизонтальное отражение, затем транспонирование)')\nm6 = transpose(horizontal(matrix))  # горизонтальное отражение, затем транспонирование\nprint_matrix(m6)\nprint('(вертикальное отражение, затем транспонирование)')\nm7 = transpose(vertical(matrix))  # вертикальное отражение, затем транспонирование\nprint_matrix(m7)\nprint('(транспонирование, затем два отражения)')\nm8 = vertical(horizontal(transpose(matrix)))  # транспонирование, затем два отражения\nprint_matrix(m8)\n​\n","ОпозданиеРУЧ":"def late(now, classes, bus):\n    now = now.split(':')\n    classes = classes.split(':')\n    time = (int(classes[0]) * 60 + int(classes[1])) - (int(now[0]) * 60 + int(now[1]))\n    time = time - 15\n    for x in bus[::-1]:\n        if time - x >= 0 and x >= 5:\n            return 'Выйти через ' + str(x - 5) + ' минут'\n    return 'Опоздание'\n","Надёжный парольРУЧ":"def password_level(password):\n    if len(password) < 6:\n        return 'Недопустимый пароль'\n    if password.isdigit() or password.isalpha() and \\\n            (password.lower() == password or password.upper() == password):\n        return 'Ненадежный пароль'\n    if password.isalpha() or password.isalnum() and \\\n            (password.lower() == password or password.upper() == password):\n        return 'Слабый пароль'\n    return 'Надежный пароль'\n","Пробелы":"def space_game(x):\n    if x.count(' ') % 2 == 0:\n        print('Вы выиграли')\n    else:\n        print('Вы проиграли')\n","Какая четверть?":"def quarter(x, y):\n    if x > 0 and y > 0:\n        print('I четверть')\n    elif x < 0 and y > 0:\n        print('II четверть')\n    elif x < 0 and y < 0:\n        print('III четверть')\n    else:\n        print('IV четверть')\n","Среднее значение":"def print_average(x):\n    if x == []:\n        print(0)\n    else:\n        print(sum(x) / len(x))\n","Статистики":"def print_statistics(x):\n    if x == []:\n        print(0, 0, 0, 0, 0, sep='\\n')\n    else:\n        print(len(x))\n        print(sum(x) / len(x))\n        print(float(min(x)))\n        print(float(max(x)))\n        x.sort()\n        if len(x) % 2 != 0:\n            print(float(x[len(x) // 2]))\n        else:\n            print(float((x[len(x) // 2 - 1] + x[len(x) // 2]) / 2))\n","Скажи «пароль» и проходи":"","Золотое сечение":"def golden_ratio(i):\n    mas = [1, 1]\n    for x in range(i - 1):\n        mas.append(mas[-2] + mas[-1])\n    print(mas[-1] / mas[-2])\n","Правильная скобочная последовательность":"def bracket_check(test_string):\n    control = []\n    flag = True\n    for x in test_string:\n        if x == '(':\n            control.append('(')\n        else:\n            if control == []:\n                print('NO')\n                flag = False\n                break\n            else:\n                del control[-1]\n    if flag:\n        if control == []:\n            print('YES')\n        else:\n            print('NO')\n","Уравнение прямой":"def equation(c1, c2):\n    c1 = c1.split(';')\n    c2 = c2.split(';')\n    if c1[0] == c2[0]:\n        print(float(c1[0]))\n    elif c1[1] == c2[1]:\n        print(float(c1[1]))\n    else:\n        k = (float(c2[1]) - float(c1[1])) / (float(c2[0]) - float(c1[0]))\n        b = float(c1[1]) - k * float(c1[0])\n        print(k, b)\n","Таблица квадратовРУЧ":"def squared(first, last, control):\n    first1 = first\n    last1 = last\n    control1 = control\n    mas = []\n    count = 0\n    while first1 <= last1:\n        mas.append([])\n        for x in range(10):\n            if first1 ** 2 % control1 != 0:\n                mas[count].append(str(first1 ** 2))\n            first1 += 1\n            if first1 > last1:\n                break\n        count += 1\n        first1 = first + 10 * count\n    for x in mas:\n        for y in x:\n            print(y.ljust(5), end='')\n        print()\n","Точка на прямой":"def line(s, t):\n    count = s.find('x')\n    s = [s[:count], s[count], s[count + 1], s[count + 2:]]\n    t = t.split(';')\n    if s[2] == '+':\n        if float(s[0]) * float(t[0]) + float(s[3]) == float(t[1]):\n            print('True')\n        else:\n            print('False')\n    elif s[2] == '-':\n        if float(s[0]) * float(t[0]) - float(s[3]) == float(t[1]):\n            print('True')\n        else:\n            print('False')\n","Крестики-нолики":"def tic_tac_toe(mas):\n    flag = False\n    for i in mas:\n        if i == ['0', '0', '0']:\n            print('0 win')\n            flag = True\n            break\n        elif i == ['x', 'x', 'x']:\n            print('x win')\n            flag = True\n            break\n    if not flag:\n        for i in range(3):\n            if mas[0][i] == mas[1][i] == mas[2][i]:\n                if mas[0][i] == 0:\n                    print('0 win')\n                    flag = True\n                    break\n                else:\n                    print('x win')\n                    flag = True\n                    break\n    if not flag:\n        if mas[0][0] == mas[1][1] == mas[2][2]:\n            if mas[0][0] == 'x':\n                print('x win')\n                flag = True\n            else:\n                print('0 win')\n                flag = True\n        elif mas[0][2] == mas[1][1] == mas[2][0]:\n            if mas[0][2] == 'x':\n                print('x win')\n                flag = True\n            else:\n                print('0 win')\n                flag = True\n    if not flag:\n        print('draw')\n","ДлинношеееРУЧ":"control = 'аоэиуыеёюяaeiouy'\nletters = '''qwertyuiopasdfghjklzxcvbnmйцукенгшщзхъфывапролджэячсмитьбю'''\n​\n​\ndef print_long_words(line):\n    flag = True\n    word = ''\n    for x in line.lower():\n        if x not in letters:\n            flag = False\n            count = 0\n            for y in word:\n                if y in control:\n                    count += 1\n            if count >= 4:\n                print(word)\n            word = ''\n        else:\n            flag = True\n        if flag:\n            word += x\n    count = 0\n    for y in word:\n        if y in control:\n            count += 1\n    if count >= 4:\n        print(word)\n","Пятиконечная звездаРУЧ":"import tkinter\n​\nmaster = tkinter.Tk()\ncanvas = tkinter.Canvas(master, bg='white', height=600, width=600)\np1 = (400.0, 300.0),\np2 = (331, 395)\np3 = (219, 359)\np4 = (200, 241)\np5 = (330, 205)\ncanvas.create_line(p1, p3, p5, p2, p4, p1, fill='red')\ncanvas.pack()\nmaster.mainloop()\n","Шахматное полеРУЧ":"import tkinter\n​\nmaster = tkinter.Tk()\ncanvas = tkinter.Canvas(master, bg='white', height=600, width=600)\nx1 = 0\ny1 = 0\nx2 = 0\ny2 = 600\nfor i in range(75, 600, 75):\n    x1 += 75\n    x2 += 75\n    canvas.create_line((x1, y1), (x2, y2), fill='red')\nx1 = 0\ny1 = 0\nx2 = 600\ny2 = 0\nfor i in range(75, 600, 75):\n    y1 += 75\n    y2 += 75\n    canvas.create_line((x1, y1), (x2, y2), fill='red')\ncanvas.pack()\nmaster.mainloop()\n​\n","Доска с шашкамиРУЧ":"import tkinter\n​\nmaster = tkinter.Tk()\ncanvas = tkinter.Canvas(master, bg='white', height=602, width=602)\nfor i in range(75, 600, 75):\n    canvas.create_line((i + 2, 0 + 2), (i + 2, 600 + 2), fill='black')\nfor i in range(75, 600, 75):\n    canvas.create_line((0 + 2, i + 2), (600 + 2, i + 2), fill='black')\nfor j in range(3):\n    for i in range(0, 600, 150):\n        if j % 2 == 0:\n            canvas.create_oval((i + 2, 0 + 75 * j + 2),\n                               (i + 75 + 2, 75 + 75 * j + 2),\n                               fill='red')\n        else:\n            canvas.create_oval((i + 75 + 2, 0 + 75 * j + 2),\n                               (i + 150 + 2, 75 + 75 * j + 2),\n                               fill='red')\nfor j in range(3):\n    for i in range(0, 600, 150):\n        if j % 2 != 0:\n            canvas.create_oval((i + 2, 0 + 75 * j + 375 + 2),\n                               (i + 75 + 2, 75 + 75 * j + 375 + 2), fill='blue')\n        else:\n            canvas.create_oval((i + 75 + 2, 0 + 75 * j + 375 + 2),\n                               (i + 150 + 2, 75 + 75 * j + 375 + 2),\n                               fill='blue')\ncanvas.pack()\nmaster.mainloop()\n","Круг случайного размераРУЧ":"import random\nimport tkinter\n​\n​\ndef draw(event):\n    x = random.randrange(0, 591)\n    y = random.randrange(0, 591)\n    d = random.randrange(10, 599 - max(x, y))\n    canvas.create_oval((x, y), (x + d, y + d), fill='red')\n    return\n​\n​\nmaster = tkinter.Tk()\ncanvas = tkinter.Canvas(master, bg='blue', height=600, width=600)\ncanvas.pack()\nmaster.bind(\"<KeyPress>\", draw)\nmaster.mainloop()\n","Keysym, keycodeРУЧ":"import tkinter\n​\n​\ndef show_key(event):\n    t = str(event.keysym) + '\\n' + str(event.char) + '\\n' + str(\n        event.keysym_num) + '\\n' + str(event.keycode)\n    label.config(text=t)\n​\n​\nmaster = tkinter.Tk()\nlabel = tkinter.Label(master, text=\"Hello world!\")\nlabel.pack()\nmaster.bind(\"<KeyPress>\", show_key)\nmaster.mainloop()\n​\n","Кружок. Реакция на стрелкиРУЧ":"import tkinter\n​\n​\ndef key_pressed(event):\n    if event.keysym == 'Up':\n        canvas.move(oval, 0, -10)\n    elif event.keysym == 'Down':\n        canvas.move(oval, 0, 10)\n    elif event.keysym == 'Right':\n        canvas.move(oval, 10, 0)\n    elif event.keysym == 'Left':\n        canvas.move(oval, -10, 0)\n​\n​\nmaster = tkinter.Tk()\ncanvas = tkinter.Canvas(master, bg='blue', height=600, width=600)\noval = canvas.create_oval((300, 300), (310, 310), fill='red')\ncanvas.pack()\nmaster.bind(\"<KeyPress>\", key_pressed)\nmaster.mainloop()\n​\n","Кружок. Зеленеет в центреРУЧ":"","Кружок. Меняет цветРУЧ":"import tkinter\n​\n​\ndef key_pressed(event):\n    if event.keysym == 'space':\n        canvas.coords(oval, (300, 300, 310, 310))\n    if event.keysym == 'Up':\n        canvas.move(oval, 0, -10)\n    elif event.keysym == 'Down':\n        canvas.move(oval, 0, 10)\n    elif event.keysym == 'Right':\n        canvas.move(oval, 10, 0)\n    elif event.keysym == 'Left':\n        canvas.move(oval, -10, 0)\n    if canvas.coords(oval)[0] <= 200.0 or canvas.coords(oval)[1] <= 200.0 or \\\n            canvas.coords(oval)[2] >= 410.0 or canvas.coords(oval)[3] >= 410.0:\n        canvas.itemconfig(oval, fill='red')\n    else:\n        canvas.itemconfig(oval, fill='green')\n​\n​\nmaster = tkinter.Tk()\ncanvas = tkinter.Canvas(master, bg='blue', height=600, width=600)\noval = canvas.create_oval((300, 300), (310, 310), fill='green')\noval_control = [300.0, 300.0, 310.0, 310.0]\ncanvas.pack()\nmaster.bind(\"<KeyPress>\", key_pressed)\nmaster.mainloop()\n","Кружок. Выход за границыРУЧ":"import tkinter\n​\n​\ndef move_wrap(c, obj, move):\n    canvas.move(obj, move[0], move[1])\n​\n​\ndef key_pressed(event):\n    move1 = 0\n    if event.keysym == 'space':\n        canvas.coords(oval, (302, 302, 312, 312))\n    if event.keysym == 'Up':\n        canvas.move(oval, 0, -10)\n    elif event.keysym == 'Down':\n        canvas.move(oval, 0, 10)\n    elif event.keysym == 'Right':\n        canvas.move(oval, 10, 0)\n    elif event.keysym == 'Left':\n        canvas.move(oval, -10, 0)\n    if canvas.coords(oval)[0] <= 202.0 or canvas.coords(oval)[1] <= 202.0 or \\\n            canvas.coords(oval)[2] >= 412.0 or canvas.coords(oval)[3] >= 412.0:\n        canvas.itemconfig(oval, fill='red')\n    else:\n        canvas.itemconfig(oval, fill='green')\n    if canvas.coords(oval)[0] <= 0:\n        move1 = (600, 0)\n    elif canvas.coords(oval)[2] > 602:\n        move1 = (-600, 0)\n    elif canvas.coords(oval)[1] < 0:\n        move1 = (0, 600)\n    elif canvas.coords(oval)[3] > 602:\n        move1 = (0, -600)\n    if move1:\n        move_wrap(canvas, oval, move1)\n​\n​\nmaster = tkinter.Tk()\ncanvas = tkinter.Canvas(master, bg='blue', height=602, width=602)\noval = canvas.create_oval((302, 302), (312, 312), fill='green')\noval_control = [302.0, 302.0, 312.0, 312.0]\ncanvas.pack()\nmaster.bind(\"<KeyPress>\", key_pressed)\nmaster.mainloop()\n​\n","N-конечная звездаРУЧ":"import math\nimport tkinter\nn = int(input())\nmas = []\nmas_answer = []\nfor x in range(1, n + 1):\n    point1 = math.cos(2 * 3.14 * x / n) * 57.3 + 100\n    point2 = math.sin(2 * 3.14 * x / n) * 57.3 + 100\n    mas.append((point1, point2))\nmas_control = []\nprimes = []\nfor x in range(2, n // 2 + 1):\n    if n % x == 0:\n        flag = True\n        for y in range(2, int(x ** 0.5)):\n            if x % y == 0:\n                flag = False\n                break\n        if flag:\n            primes.append(x)\nfor x in range(1, n // 2 + 1):\n    flag = True\n    for y in primes:\n        if x % y == 0:\n            flag = False\n            break\n    if flag:\n        mas_control.append(x)\ncount = mas_control[-1]\ncount1 = count\nmas_answer = []\nwhile True:\n    if mas[count % n - 1] not in mas_answer:\n        mas_answer.append(mas[count % n - 1])\n        count += count1\n    else:\n        break\nmaster = tkinter.Tk()\ncanvas = tkinter.Canvas(master, bg='white', width=300, height=300)\nfor x in range(len(mas_answer) - 1):\n    canvas.create_line(mas_answer[x], mas_answer[x + 1], fill='red')\ncanvas.create_line(mas_answer[-1], mas_answer[0], fill='red')\ncanvas.pack()\nmaster.mainloop()\n","ИграРУЧ":"","Игра. Доработка 2РУЧ":"","Игра. Доработка 3РУЧ":"","Час темных сил":"n = int(input())\na = int(input())\nwhile a > 0:\n    print('Великан', str(a * n)[-1] + '.')\n    a = int(input())\n​\n","Галопом по миру":"a = int(input())\nb = int(input())\nstep = int(input())\ndop = int(input())\nif a > b:\n    n = -1\n    count = -1\nelse:\n    n = 1\n    count = 1\n​\nfor x in range(a, b + count, n * step // dop):\n    if x % (dop - 1) == 0:\n        continue\n    else:\n        print(x, end=' ')\n​\n​\n","Чувствительный великан":"a = input().split()\nb = input().split('/\\\\')\nc = input().split('***')\nfor x in a:\n    print(x + ':')\n    answer = []\n    for y in b:\n        if y.lower() < x.lower() and y.lower()[-1] in x.lower():\n            answer.append(y.capitalize())\n    print(' ! '.join(answer))\n    answer = []\n    for z in c:\n        if len(z) < len(x):\n            count = 0\n            mas_count = []\n            for word in z.lower():\n                if word in x.lower() and word not in mas_count:\n                    count += 1\n                    mas_count.append(word)\n            if count <= 2:\n                answer.append(z)\n    print((' ' + x.lower()[0] + ' ').join(answer))\n","Мерзовкусная диета":"n = int(input())\nmas = []\nfor x in range(n):\n    mas.append(input().split())\nd = dict()\nfor x in mas:\n    key = int(x[1])\n    mas_count = x\n    del mas_count[1]\n    mas_count1 = []\n    for y in mas_count:\n        for z in y:\n            mas_count1.extend(z)\n    mas_count = mas_count1\n    mas_count = list(set(mas_count))\n    mas_count.sort(reverse=True)\n    mas_count = [str(i) for i in mas_count]\n    answer = ''.join(mas_count)\n    answer = int(answer)\n    a = d.get(key, 0)\n    if a != 0:\n        d[key].append(answer)\n    else:\n        d[key] = []\n        d[key].append(answer)\nfor x in d:\n    d[x].sort()\nprint(d)\n​\n","Симметризовать таблицу":"n = int(input()) - 1\nx = []\nfor i in range(n):\n    x.append(input().split())\n    x[i].append('0')\nx = [['0']] + x\nfor i in range(n):\n    for j in range(i + 1, n + 1):\n        x[i].append(x[j][i])\n    print(' '.join(x[i]))\nprint(' '.join(x[n]))\n​\n","Нобелевские лауреаты по литературе":"x = '''Луиза Глюк   2020г.  Нью-Йорк\nПетер Хандке    2019г.  Гриффен, Австрия\nОльга Токарчук  2018г.  Сулехув, Польша\nКадзуо Исигуро  2017г.  Нагасаки, Япония\nБоб Дилан   2016г.  Дулут, Миннесота США\nСветлана Алексиевич 2015г.  Станислав, СССР\nПатрик Модиано  2014г.  Булонь-Бийанкур, Франция\nЭлис Энн Манро  2013г.  Вингем, Канада\nМо Янь  2012г.  Шаньдун, КНР\nТумас Транстремер   2011г.  Стокгольм, Швеция\nМарио Варгас Льоса  2010г.  Арекипа, Перу\nГерта Мюллер    2009г.  Ницкидорф, Румыния\nЖан-Мари Гюстав Леклезио    2008г.  Ницца, Франция\nДорис Лессинг   2007г.  Керманшах, Персия\nОрхан Памук 2006г.  Стамбул, Турция\nГарольд Пинтер  2005г.  Лондон, Великобритани\nЭльфрида Елинек 2004г.  Мюрццушлаг, Австрия\nДжон Максвелл Кутзее    2003г.  Кейптаун, ЮАР\nИмре Кертес 2002г.  Будапешт, Венгрия\nВидиадхар Сураджпрасад Найпол   2001г.  Тринидад, Тринидад и Тобаго\nГао Синцзянь    2000г.  Ганьчжоу, КНР\nГюнтер Грасс    1999г.  Вольный город Данциг, Германия\nЖозе Сарамаго   1998г.  Азиньяга, Португалия\nДарио Фо    1997г.  Санджано, Италия\nВислава Шимборска   1996г.  Бнин, Польша\nШеймус Хини 1995г.  Кастлдоусон, Ирландия\nКэнзабуро Оэ    1994г.  Осэ, Япония\nТони Моррисон   1993г.  Лорейн, США\nДерек Уолкотт   1992г.  Кастри, Сент-Люсия\nНадин Гордимер  1991г.  Гаутенг, ЮАР\nОктавио Пас 1990г.  Мехико, Мексика\nКамило Хосе Села    1989г.  Ирия, Испания\nНагиб Махфуз    1988г.  Каир, Египет\nИосиф Бродский  1987г.  Ленинград, СССР\nВоле Шойинка    1986г.  Абеокута, Нигерия\nКлод Симон  1985г.  Антананариву, Мадагаскар\nЯрослав Сейферт 1984г.  Прага, Чехия\nУильям Голдинг  1983г.  Сент-Коламб Майнор, Великобритания\nГабриэль Гарсия Маркес  1982г.  Аракатака, Колумбия\nЭлиас Канетти   1981г.  Русе, Болгария\nЧеслав Милош    1980г.  Шетени, Россия\nОдисеас Элитис  1979г.  Ираклион, Греция\nИсаак Башевис Зингер    1978г.  Леончин, Россия\nВисенте Алейксандре 1977г.  Севилья, Испания\nСол Беллоу  1976г.  Лашин, Канада\nЭудженио Монтале    1975г.  Генуя, Италия\nЭйвинд Йонсон   1974г.  Салтшобаден, Швеци\nХарри Мартинсон 1974г.  Йемсхёг, Швеция\nПатрик Виктор Мартиндейл Уайт   1973г.  Лондон, Великобритани\nГенрих Белль    1972г.  Кёльн, Германия\nПабло Неруда    1971г.  Парраль, Чили\nАлександр Исаевич Солженицын    1970г.  Кисловодск, СССР\nСэмюэл Беккет   1969г.  Дублин, Ирландия\nЯсунари Кавабата    1968г.  Осака, Япония\nМигель Астуриас 1967г.  Гватемала, Гватемала\nШмуэль Йозеф Агнон  1966г.  Бучач, Австро-Венгрия\nНелли Закс  1966г.  Шёнеберг, Германия\nМихаил Александрович Шолохов    1965г.  Кружилин, СССР\nЖан-Поль Сартр  1964г.  Париж, Франция\nГеоргос Сеферис 1963г.  Урла, Турция\nДжон Стейнбек   1962г.  Салинас, США\nИво Андрич  1961г.  Долац, Австро-Венгрия\nСен-Жон Перс    1960г.  Пуэнт-а-Питр, Гваделупа\nСальваторе Квазимодо    1959г.  Модик, Итали\nБорис Леонидович Пастернак  1958г.  Москва, Россия\nАльбер Камю 1957г.  Мондови, Алжир\nХуан Рамон Хименес  1956г.  Андалусия, Испания\nХальдоур Кильян Лакснесс    1955г.  Рейкявик, Исландия\nЭрнест Миллер Хемингуэй 1954г.  Оук-Парк, США\nУинстон Леонард Спенсер Черчилль    1953г.  Бланим-Пэлис, Великобритания\nФрансуа Мориак  1952г.  Бордо, Франция\nПер Фабиан Лагерквист   1951г.  Вексьё, Швеция\nБертран Рассел  1950г.  Рейвенскрофт, Великобритания\nУильям Фолкнер  1949г.  Нью-Олбани, США\nТомас Стернз Элиот  1948г.  Сент-Луис, США\nАндре Жид   1947г.  Париж, Франция\nГерман Гессе    1946г.  Кальв, Германия\nГабриела Мистраль   1945г.  Викуньа, Чили\nЙоханнес Йенсен 1944г.  Химмерланд, Дания\nФранс Эмиль Силланпя    1939г.  Хямеэнкюрё, Великое княжество Финляндское (Российская империя)\nПерл Бак    1938г.  Хилсборо, США\nРоже Мартен Дю Гар  1937г.  Нейи-сюр-Сен, Франция\nЮджин ОНил  1936г.  Нью-Йорк, США\nЛуиджи Пиранделло   1934г.  Джирдженти, Италия\nИван Алексеевич Бунин   1933г.  Воронеж, Россия\nДжон Голсуорси  1932г.  Кингстон-Хилл, Великобриания\nЭрик Карлфельдт 1931г.  Фолькерна, Швеция\nСинклер Льюис   1930г.  Соук-Сентер, США\nТомас Манн  1929г.  Любек, Германи\nСигрид Унсет    1928г.  Калуннборг, Дания\nАнри Бергсон    1927г.  Париж, Франция\nГрация Деледда  1926г.  Нуоро, Италия\nДжордж Бернард Шоу  1925г.  Дублин, Ирландия\nВладислав Станислав Реймонт 1924г.  Кобеле-Вельке, Российская империя\nУильям Батлер Йитс  1923г.  Дублин, Ирландия\nХасинто Бенавенте - И - Мартинес    1922г.  Мадрид, Испания\nАнатоль Франс   1921г.  Париж, Франция\nКнут Гамсун 1920г.  Лом, Норвегия\nКарл Фридрих Георг Шпиттелер    1919г.  Листал, Швецария\nКарл Адольф Гьеллеруп   1917г.  Рохольт, Дания\nХенрик Понтоппидан  1917г.  Фредерисии, Дания\nКарл Густав Вернер фон Хейденстам   1916г.  Эльсхаммар, Швеция\nРомен Роллан    1915г.  Кламси, Франция\nРабиндранат Тагор   1913г.  Калькутта, Индия\nГерхардт Гауптман   1912г.  Оберзальцбрунн, Германия\nМорис Метерлинк 1911г.  Гент, Бельгия\nПауль Йоханн Людвиг фон Хейзе   1910г.  Берлин, Германия\nСельма Лагерлеф 1909г.  Вермланд, Швеция\nРудольф Кристоф Эйкен   1908г.  Аурих, Германия\nДжозеф Редьярд Киплинг  1907г.  Бомбей, Индия\nДжозуэ Кардуччи 1906г.  Валь-ди-Кастелло, Итали\nГенрик Сенкевич 1905г.  Окжейска, Российская империя\nФредерик Мистраль   1904г.  Мейан, Франция\nХосе Мария Вальдо Эчегарай - И - Эйсагирре  1904г.  Мадрид, Испания\nБьернстерне Мартиниус Бьернсон  1903г.  Квикне, Норвегия\nТеодор Моммзен  1902г.  Гардинг, Дания\nРене Сюлли-Прюдом   1901г.  Париж, Франция'''\ny = x.split('\\n')\nd = dict()\nfor i in range(len(y)):\n    y[i] = y[i].split('г.')[0].split('\\t')\n    key, value = y[i][0], y[i][1]\n    d[key] = value\nprint(d[input()])\n​\n","Толковый словарь":"d = {}\nfor x in range(int(input())):\n    line = input().split()\n    key = line[0]\n    val = ' '.join(line[1:])\n    d[key] = val\nfor y in range(int(input())):\n    answer = d.get(input(), 'Нет в словаре')\n    print(answer)\n","Карта сокровищ":"n = int(input())\nd = dict()\nfor i in range(n):\n    x = input().split()\n    x = (x[0][:-1], x[1][:-1])\n    d[x] = d.get(x, 0) + 1\nmx = 0\nfor i in d.values():\n    if i > mx:\n        mx = i\nprint(mx)\n​\n","Транслитерация":"line = '''А - A\nБ - B\nВ - V\nГ - G\nД - D\nЕ - E\nЁ - E\nЖ - ZH\nЗ - Z\nИ - I\nЙ - I\nК - K\nЛ - L\nМ - M\nН - N\nО - O\nП - P\nР - R\nС - S\nТ - T\nУ - U\nФ - F\nХ - KH\nЦ - TC\nЧ - CH\nШ - SH\nЩ - SHCH\nЫ - Y\nЭ - E\nЮ - IU\nЯ - IA'''\nline = line.split('\\n')\nd = {}\nfor i in range(len(line)):\n    line[i] = line[i].split()\n    key = line[i][0].lower()\n    val = line[i][2].lower()\n    d[key] = val\n    key1 = line[i][0]\n    val1 = line[i][2].lower().capitalize()\n    d[key1] = val1\ntext = input()\nanswer = ''\nfor x in range(len(text)):\n    answer += d.get(text[x], text[x])\nprint(answer.replace('ь', '').replace('Ь', '').replace('ъ', '').replace('Ъ', ''))\n","Телефонная книга":"d = dict()\nfor x in range(int(input())):\n    val, key = input().split()\n    if d.get(key):\n        d[key] += ' ' + val\n    else:\n        d[key] = val\nfor x in range(int(input())):\n    print(d.get(input(), 'Нет в телефонной книге'))\n","Дни рождения – 2":"d = dict()\nfor x in range(int(input())):\n    line = input().split()\n    key, val = line[2], [line[0], line[1]]\n    count = 0\n    count = d.get(key, 0)\n    if not count:\n        d[key] = [val]\n    else:\n        d[key].append(val)\n        for i in range(len(d[key]) - 1, 0, -1):\n            if int(d[key][i][1]) < int(d[key][i - 1][1]):\n                d[key][i], d[key][i - 1] = d[key][i - 1], d[key][i]\n            elif int(d[key][i][1]) == int(d[key][i - 1][1]):\n                if d[key][i][0] < d[key][i - 1][0]:\n                    d[key][i], d[key][i - 1] = d[key][i - 1], d[key][i]\n            else:\n                break\nanswer = []\nfor y in range(int(input())):\n    k = input()\n    if d.get(k):\n        for i in d[k]:\n            answer.append(' '.join(i))\n        print(' '.join(answer))\n        answer = []\n    else:\n        print('')\n","Характеристики двоичных чисел":"line = input().split()\nmas = []\nfor x in range(len(line)):\n    number = int(line[x])\n    n = ''\n    while number // 2 != 0:\n        n += str(number % 2)\n        number = number // 2\n    n += str(number % 2)\n    d = dict()\n    d['digits'] = len(n)\n    d['units'] = n.count('1')\n    d['zeros'] = n.count('0')\n    mas.append(d)\nprint(mas)\n","Радиоактивная порода":"line = input().split()\nperiods = dict()\nfor i in range(0, len(line), 2):\n    periods[line[i]] = int(line[i + 1])\nlayers = input().split()\nactivity = input().split()\nactivity = [float(i) for i in activity]\nnormal = float(input())\nmn = 1000000000\nfor x in periods.values():\n    v = 0\n    activity_now = activity\n    while sum(activity_now) > normal:\n        v += x\n        activity_now = []\n        for i in range(len(layers)):\n            control = int(v // periods[layers[i]])\n            if control != 0:\n                activity_now.append(activity[i] / 2 ** control)\n            else:\n                activity_now.append(activity[i])\n    if v < mn:\n        mn = v\nprint(mn)\nfor i in range(len(layers)):\n    print(activity[i] / 2 ** int(mn // periods[layers[i]]), end=' ')\n","Предсказание погоды с памятью":"weather = input()\nc_weather = weather\np = float(input())\nq = float(input())\nc = 1\ndays = int(input())\nmas = [(c, c_weather)]\nfor x in range(days):\n    mas1 = []\n    for y in mas:\n        if y[1] == 'ясно':\n            if p > q:\n                clear = y[0] * p\n                mas1.append((clear, 'ясно'))\n            else:\n                clear = y[0] * p\n                dull = y[0] * (1 - p)\n                mas1.append((clear, 'ясно'))\n                mas1.append((dull, 'пасмурно'))\n        elif y[1] == 'пасмурно':\n            if q > p:\n                dull = y[0] * q\n                mas1.append((dull, 'пасмурно'))\n            else:\n                clear = y[0] * (1 - q)\n                dull = y[0] * q\n                mas1.append((clear, 'ясно'))\n                mas1.append((dull, 'пасмурно'))\n    mas = mas1.copy()\nfor i in range(1, len(mas)):\n    x = i\n    key = mas[i][0]\n    key1 = mas[i]\n    while x > 0 and key > mas[x - 1][0]:\n        mas[x] = mas[x - 1]\n        x -= 1\n    mas[x] = key1\nif len(mas) > 1:\n    if mas[0][0] == mas[1][0] and mas[0][1] != mas[1][1]:\n        print('равновероятно')\n        print(mas[0][0])\n    else:\n        print(mas[0][1])\n        print(mas[0][0])\nelse:\n    print(mas[0][1])\n    print(mas[0][0])\n​\n","Репосты":"mas = list()\nfor x in range(int(input())):\n    mas.append(input().replace(',', ' '))\nd = dict()\nfor x in mas:\n    line = x.split()\n    d[line[0]] = d.get(line[0], 0) + int(line[-1])\n    if 'отрепостил' in line:\n        d[line[0] + '1'] = line[4]\n        count = d.get(line[0] + '1')\n        while count:\n            d[count] = d.get(count, 0) + int(line[-1])\n            count = d.get(count + '1', 0)\nanswer = []\nfor x in d.values():\n    if str(x).isdigit():\n        answer.append(x)\nfor x in answer:\n    print(x)\n","Права доступа":"mas1 = []\nfor x in range(int(input())):\n    mas1.append(input().split('/')[1:])\nmas2 = []\nfor x in range(int(input())):\n    line = input().split('/')[1:]\n    flag = False\n    for y in mas1:\n        count = len(y)\n        if len(line) >= count and line[0:count] == y[0:count]:\n            flag = True\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')\n​\n","Частотный анализ – 1":"d = dict()\nfor x in range(int(input())):\n    line = input()\n    line = line.replace(',', '').replace('.', '').replace('!', '').replace(';', '')\n    line = line.replace('?', '').replace(':', '').replace(';', '')\n    line = line.lower()\n    line = line.split()\n    for y in line:\n        d[y] = d.get(y, 0) + 1\nmas = []\nfor x in d.items():\n    s = tuple(x)\n    mas.append(s)\nfor i in range(1, len(mas)):\n    key = mas[i]\n    key1 = mas[i][1]\n    key2 = mas[i][0]\n    x = i\n    while x > 0 and key1 > mas[x - 1][1] or key1 == mas[x - 1][1] and key2 < mas[x - 1][0]:\n        mas[x] = mas[x - 1]\n        x -= 1\n    mas[x] = key\nfor x in mas:\n    print(x[0].capitalize())\n​\n","Считать и вывести таблицу":"n1 = int(input())\nn2 = int(input())\nmas = []\nfor x in range(n1):\n    mas.append([])\n    for y in range(n2):\n        mas[x].append(input())\nfor x in mas:\n    print('\\t'.join(x), end='\\t')\n    print()\n","Считать и вывести таблицу — 2":"n1 = int(input())\nn2 = int(input())\nmas = []\nfor x in range(n1):\n    mas.append([])\n    for y in range(n2):\n        mas[x].append(input())\nfor x in mas:\n    print('\\t'.join(x), end='\\t')\n    print()\nprint()\nfor g in range(n2):\n    for j in range(n1):\n        print(mas[j][g], end='\\t')\n    print()\n​\n","Бином Ньютона, или Треугольник Паскаля":"N = int(input())\nmas = [1]\nprint(1)\nfor x in range(N - 1):\n    mas1 = []\n    for i in range(len(mas) - 1):\n        mas1.append(mas[i] + mas[i + 1])\n    mas = []\n    mas.append(1)\n    mas.extend(mas1)\n    mas.append(1)\n    mas_answer = [str(h) for h in mas]\n    print(' '.join(mas_answer))\n​\n","Нолики-крестики":"mas = []\nN = int(input())\nfor _ in range(N):\n    mas.append(input())\nflag = False\nfor x in range(N):\n    if 'ooo' in mas[x]:\n        print('o')\n        flag = True\n        break\n    elif 'xxx' in mas[x]:\n        print('x')\n        flag = True\n        break\nmas = list(mas)\nflag1 = False\nif not flag:\n    line = ''\n    for x in range(N):\n        for y in range(N):\n            line += mas[y][x]\n        if 'ooo' in line:\n            flag1 = True\n            print('o')\n            break\n        elif 'xxx' in line:\n            flag1 = True\n            print('x')\n            break\n        else:\n            line = ''\nif not flag1 and not flag:\n    print('-')\n​\n​\n​\n","Окно":"x = []\nfor j in range(int(input())):\n    x.append(int(input()))\nnormal_min = int(input())\nnormal_max = int(input())\nprint('\\n'.join([str(f) for f in x if normal_min <= f <= normal_max]))\n​\n","bf--":"mas = [0]\ncount = 0\nline = input()\nmas = [0] * 30000\nfor y in line:\n    if y == '+':\n        if mas[count] == 255:\n            mas[count] = 0\n        else:\n            mas[count] += 1\n    elif y == '-':\n        if mas[count] == 0:\n            mas[count] = 256\n        mas[count] -= 1\n    elif y == '>':\n        mas.append(0)\n        count += 1\n    elif y == '<':\n        count -= 1\n    elif y == '.':\n        print(mas[count])\n","CSV":"mas = []\nfor x in range(int(input())):\n    mas.append(input().split(','))\nfor y in range(int(input())):\n    n1, n2 = input().split(',')\n    if int(n2) > len(mas[int(n1)]):\n        print()\n    else:\n        print(mas[int(n1)][int(n2)])\n​\n","Сборка текста":"numbers = input().split()\nline = input().split()\nfor x in range(len(numbers)):\n    if x == 0:\n        print(line[int(numbers[x]) - 1].capitalize(), end=' ')\n    else:\n        print(line[int(numbers[x]) - 1].lower(), end=' ')\n","bf":"mas = [0] * 30000\ncount = 0\nline = input()\nstek = []\ni = 0\nwhile True:\n    if not stek or stek and stek[-1] != 'false':\n        if line[i] == '+':\n            if mas[count] == 255:\n                mas[count] = 0\n            else:\n                mas[count] += 1\n        elif line[i] == '-':\n            if mas[count] == 0:\n                mas[count] = 255\n            else:\n                mas[count] -= 1\n        elif line[i] == '>':\n            count += 1\n        elif line[i] == '<':\n            count -= 1\n        elif line[i] == '.':\n            print(mas[count])\n    if line[i] == '[':\n        if mas[count] == 0 or stek and stek[-1] == 'false':\n            stek.append('false')\n        else:\n            stek.append(i)\n    elif line[i] == ']':\n        if stek[-1] != 'false':\n            i = stek[-1] - 1\n            del stek[-1]\n        else:\n            del stek[-1]\n    i += 1\n    if i >= len(line):\n        break\n​\n​\n","CSV 2.0РУЧ":"R = int(input())\nmas = list()\nfor x in range(R):\n    mas.append(input().split(','))  # строку разбиваем по запятым\nfor y in range(int(input())):\n    n1, n2 = input().split(',')\n    line = mas[int(n1)][int(n2)]\n    if '@@' in line:  # двойная собака означает просто собаку\n        line = line.replace('@@', '*')\n    line = line.replace('@', ',')  # собака означает запятую\n    line = line.replace('*', '@')\n    if '&&' in line:\n        line = line.replace('&&', '*')  # '&&' означает '&'\n    line = line.replace('&', '\\n')  # '&' означает переход на новую строку \n    line = line.replace('*', '&')\n    print(line)\n​\n","Сумма в виде Н":"n = int(input())\nmas = []\nfor x in range(n):\n    line = input().split()\n    line = [int(i) for i in line]\n    mas.append(line)\nsum_max = 0\nfor x in range(n - 2):\n    for y in range(n - 2):\n        sm = mas[x][y] + mas[x][y + 2] + sum(mas[x + 1][y:y + 3]) + mas[x + 2][y] + mas[x + 2][y + 2]\n        if sm > sum_max:\n            sum_max = sm\nprint(sum_max)\n​\n","Электрическая кошка":"x = int(input())\ny = int(input())\nx_cat = int(input())\ny_cat = int(input())\na = int(input())\ntable = []\nfor i in range(y):\n    table.append([0] * x)\nk = 0\nwhile True:\n    for j in range(x_cat - k, x_cat + k + 1):\n        if 0 <= j < x:\n            if y_cat - k >= 0:\n                table[y_cat - k][j] = a\n            if y_cat + k < y:\n                table[y_cat + k][j] = a\n    for i in range(y_cat - k, y_cat + k + 1):\n        if 0 <= i < y:\n            if x_cat - k >= 0:\n                table[i][x_cat - k] = a\n            if x_cat + k < x:\n                table[i][x_cat + k] = a\n    k += 1\n    if a == 1:\n        break                \n    elif a ** 0.5 == int(a ** 0.5):\n        a = int(a ** 0.5)\n    else:\n        break\nfor h in table:\n    h = [str(f) for f in h]\n    print('\\t'.join(h))\n​\n","Считать и вывести таблицу — 3РУЧ":"n1 = int(input())\nn2 = int(input())\nmas = []\nmas_answer = []\nfor x in range(n1):\n    for y in range(n2):\n        mas.append(input())\n    mas_answer.append(mas)\n    mas = []\nfor h in mas_answer:\n    print('\\t'.join(h))\n​\n","Считать и отсортировать таблицу":"n1 = int(input())\nn2 = int(input())\nmas = []\nfor x in range(n1):\n    line = []\n    for y in range(n2):\n        line.append(input())\n    if x != 0 and x != n1 - 1:\n        line.sort()\n    mas.append(line.copy())\nfor h in mas:\n    print('\\t'.join(h))\n​\n","Экономия":"N = int(input())\nmas = []\nfor x in range(N - 1):\n    mas.append(input().split())\nfor i in range(N - 1):\n    mas[i].append('0')\nmas = [['0']] + mas\nfor i in range(N - 1):\n    for j in range(i + 1, N):\n        mas[i].append(mas[j][i])\nstation1, station2 = input().split()\nstation1, station2 = int(station1), int(station2)\nlength_min = int(mas[station1][station2])\nanswer = station1\nfor x in range(N):\n    length = int(mas[station2][x]) + int(mas[x][station1])\n    if length < length_min:\n        length_min = length\n        answer = x\nprint(answer)\n​\n","Где экономия?":"N = int(input())\nmas = []\nfor x in range(N - 1):\n    mas.append(input().split())\nfor i in range(N - 1):\n    mas[i].append('0')\nmas = [['0']] + mas\nfor i in range(N - 1):\n    for j in range(i + 1, N):\n        mas[i].append(mas[j][i])\nmas_answer = []\nfor i in range(N):\n    for j in range(N):\n        station1, station2 = i, j\n        length_min = int(mas[station1][station2])\n        answer = station1\n        for x in range(N):\n            length = int(mas[station2][x]) + int(mas[x][station1])\n            if length < length_min:\n                length_min = length\n                answer = x\n        if answer != station1:\n            if [str(j), str(i)] not in mas_answer:\n                mas_answer.append([str(i), str(j)])\nfor x in mas_answer:\n    print(' '.join(x))\n​\n","Муза дальних странствий":"mas_control = []\nmas_control.extend(input())\nmas = input().split('; ')\nmas_answer = []\nfor x in mas:\n    count = 0\n    answer_control = []\n    for y in mas_control:\n        if y in x and y not in answer_control:\n            count += 1\n            answer_control.append(y)\n    if count > 7:\n        mas_answer.append(x)\nprint(' @ '.join(mas_answer))\n​\n","Стрижка и бритьё":"line = input().split()\nline = [int(i) for i in line]\nmn = min(line)\nanswer = []\nif mn % 2 == 0:\n    for x in line:\n        if x % 2 == 0:\n            answer.append(x)\nelif mn % 2 != 0:\n    for x in line:\n        if x % 2 != 0:\n            answer.append(x)\nanswer = set(answer)\nanswer = list(answer)\nanswer.sort()\nfor x in answer:\n    print(x, end=' ')\n","Стул №...":"n = int(input())\nfor x in range(n):\n    a1 = input().split()\n    a2 = input().split()\n    answer = set()\n    for y in a1:\n        if y not in a2:\n            answer.add(y)\n    for z in a2:\n        if z not in a1:\n            answer.add(z)\n    answer = list(answer)\n    for r in answer:\n        print(r, end=' ')\n    print()\n","Конек-Горбунок и испытание":"p1 = float(input())\np2 = float(input())\np3 = float(input())\nhours = int(input())\ndestroyed = float(input())\nflag = True\nif p1 * hours >= destroyed:\n    print('Конек-Горбунок', end=' ')\n    flag = False\nif p2 * hours >= destroyed:\n    print('Лошадиный брат - 1', end=' ')\n    flag = False\nif p3 * hours >= destroyed:\n    print('Лошадиный брат - 2', end=' ')\n    flag = False\nif flag:\n    print('Не они!')\n","Найди кота — 6":"N = int(input())\nfor i in range(1, N + 1):\n    a = input()\n    if 'кот' in a.lower():\n        print(i, end=' ')\n        print(a.find('кот') + 1)\n​\n","Слово для Гиннесса":"print(max([len(i) for i in input().split()]))\n​\n","От и до — 2":"x = [int(i) for i in input().split()]\na, b = [int(i) for i in input().split()]\nprint(sum(x[a:b + 1]))\n","От и до — 3":"x = [int(i) ** 2 for i in input().split()]\na, b = [int(i) for i in input().split()]\nprint(sum(x[a:b + 1]))\n​\n","Комментарии в программе":"n = input().split('#')\nfor i in range(int(n[1])):\n    a = input()\n    if '#' in a:\n        a = a[:a.find('#')]\n    a = a.rstrip()\n    print(a)\n​\n","М-И-Р Б-У-Д-Е-Т Н-А-Ш":"","Польский калькулятор":"x = []\nfor i in input().split():\n    if i.isdigit() or i[0] == '-' and i[1:].isdigit():\n        x.append(int(i))\n    else:\n        if i == '+':\n            x[-2] = x[-2] + x[-1]\n            del x[-1]\n        elif i == '-':\n            x[-2] = x[-2] - x[-1]\n            del x[-1]\n        elif i == '*':\n            x[-2] = x[-2] * x[-1]\n            del x[-1]\nprint(x[0])\n​\n","Маленький частотный анализ":"line = ''.join(input().lower().split(' '))\nanswer = max([line.count(i) for i in line])\nanswer1 = []\nfor i in line:\n    if line.count(i) == answer:\n        answer1.append(i)\nprint(min(answer1))\n","Знаков без пробелов":"print(len(input().replace(' ', '').replace('\\t', '')))\n","Пирамида из кубиков":"n = int(input())\nanswer = ''\nfor x in range(n):\n    line = input().split()\n    line = [int(x) for x in line]\n    line_control = line.copy()\n    line_control.sort(reverse=True)\n    flag = True\n    for y in line_control:\n        if y == line[0]:\n            del line[0]\n        elif y == line[-1]:\n            del line[-1]\n        else:\n            flag = False\n            break\n    if flag:\n        for g in line_control:\n            print(g, end=' ')\n        print()\n    else:\n        print('НЕТ')\n​\n","Длинношеееед":"line = input().lower()\ncount_max = 0\nfor x in line:\n    if line.count(x) > count_max:\n        count_max = line.count(x)\nprint(count_max)\n","Средние в статистике":"line = input().split()\nline = [float(x) for x in line]\nprint(sum(line) / len(line), end=' ')\nline.sort()\nif len(line) % 2 != 0:\n    print(line[len(line) // 2])\nelse:\n    print(((line[len(line) // 2] - line[len(line) // 2 - 1]) / 2 + line[len(line) // 2 - 1]))\n","Модные средние в статистике":"line = input().split()\nline = [int(x) for x in line]\nline.sort()\nif len(line) % 2 != 0:\n    print(line[len(line) // 2], end=' ')\nelse:\n    print((line[len(line) // 2] - line[len(line) // 2 - 1]) / 2 + line[len(line) // 2 - 1], end=' ')\ncount_max = 0\nfor x in line:\n    if line.count(x) > count_max:\n        count_max = line.count(x)\n        answer = x\nprint(answer)\n","Парадоксы статистики":"n = int(input())\nmediana = []\nmoda = []\neverything = []\nfor i in range(n):\n    line = input().split()\n    line = [int(x) for x in line]\n    line.sort()\n    everything.extend(line)\n    mediana.append(line[len(line) // 2])\n    count_max = 0\n    answer = ''\n    for x in line:\n        if line.count(x) > count_max:\n            count_max = line.count(x)\n            answer = x\n    moda.append(answer)\nfor a in mediana:\n    print(a, end=' ')\nprint()\nfor a in moda:\n    print(a, end=' ')\nprint()\nmediana.sort()\nif len(mediana) % 2 != 0:\n    print(mediana[len(mediana) // 2])\nelse:\n    print(((mediana[len(mediana) // 2] - mediana[len(mediana) // 2 - 1]) / 2 +\n           mediana[len(mediana) // 2 - 1]))\ncount_max = 0\nanswer = ''\nfor x in moda:\n    if moda.count(x) > count_max:\n        count_max = moda.count(x)\n        answer = x\nprint(answer)\neverything.sort()\nif len(everything) % 2 != 0:\n    print(everything[len(everything) // 2])\nelse:\n    print(((everything[len(everything) // 2] - everything[\n        len(everything) // 2 - 1]) / 2 + everything[len(everything) // 2 - 1]))\ncount_max = 0\nfor x in everything:\n    if everything.count(x) > count_max:\n        count_max = everything.count(x)\n        answer = x\nprint(answer)\n​\n​\n","Кто последний?":"names = []\nfor x in range(int(input())):\n    phrase = input()\n    if 'Кто последний?' in phrase:\n        names.append(phrase[19:-1])\n    elif 'Я только спросить!' in phrase:\n        names.insert(0, phrase[23:-1])\n    else:\n        if names:\n            print('Заходит ', names.pop(0), '!', sep='')\n        else:\n            print('В очереди никого нет.')\n​\n","Пристраиваемся в очередь":"names = []\nfor x in range(int(input())):\n    phrase = input()\n    if 'встала в очередь.' in phrase or 'встал в очередь.' in phrase:\n        names.append(phrase[:phrase.find('встал') - 1])\n    elif 'Привет,' in phrase:\n        names.insert(\n            names.index(phrase[phrase.find(',') + 2:phrase.find('!')]) + 1,\n            phrase[phrase.find('!') + 2: phrase.find('будет') - 1])\n    else:\n        del names[names.index(phrase[:phrase.find(', хватит тут стоять,')])]\nprint('\\n'.join(names))\n​\n","Некорректные логины":"line = input().split(',')\nwrong = []\nfor x in line:\n    y = ''.join(x.split('_'))\n    if not y.isalnum():\n        wrong.append(x)\nmx = 0\nfor x in wrong:\n    if len(x) > mx:\n        mx = len(x)\nwrong.sort()\nfor x in wrong:\n    print(x.rjust(mx, ' '))\n​\n","Польский калькулятор — 2":"","Глория Скотт":"print(' '.join(input().split()[2::3]))\n","Горизонтальная диаграмма":"print('\\n'.join(int(i) * '*' for i in input().split()))\n","Списочная квадратура":"x = [i ** 2 for i in range(int(input()))]\nfor i in x:\n    print(i)\n​\n","Списочная квадратура — 3РУЧ":"x = [int(i) for i in input().split()]\nprint(' '.join([str(i ** 2) for i in x]))\n","Списочная квадратура — 4РУЧ":"x = [int(i) for i in input().split()]\nprint(' '.join([str(i ** 2) for i in x if str(i ** 2)[-1] != '9' and i % 2 != 0]))\n","Созвездия":"mas = ['* * * * *', '*        ', '*   * * *', '*       *', '* * * * *']\n​\nn = int(input())\nif n == 1:\n    print('*')\nelif n == 3:\n    print('''* * *\n*    \n* * *''')\nelse:\n    for i in range((n - 5) // 2):\n        mas[0] += ' * *'\n        for j in range(1, len(mas)):\n            mas[j] += '   *'\n        mas.append(' ' + mas[1][1:])\n        mas.append(mas[0])\n        mas1 = []\n        for k in mas:\n            mas1.append(k[::-1])\n        mas = []\n        mas.extend(mas1)\n        mas1 = []\n        for k in mas[::-1]:\n            mas1.append(k)\n        mas = []\n        mas.extend(mas1)\n    for i in mas:\n        print(i)\n​\n","/etc/passwd":"mas_information = []\na = '1'\nwhile a != '':\n    a = input()\n    if a != '':\n        mas_information.append(a)\nmas_simple_passwords = input().split(';')\nfor i in mas_information:\n    mas_i = i.split(':')\n    for j in mas_simple_passwords:\n        if mas_i[1] == str(j):\n            print('To:', mas_i[0])\n            answer = ''\n            for k in mas_i[4]:\n                if k != ',':\n                    answer += k\n                else:\n                    break\n            print(answer, ', ваш пароль слишком простой, смените его.', sep='')\n            break\n","Маяковский":"print('\\n'.join(input().split()))\n","Вертикальная диаграмма":"line_mas = input().split()\nmx = 0\nfor i in line_mas:\n    if int(i) > mx:\n        mx = int(i)\nmas_for_answer = []\nfor i in line_mas:\n    mas_for_answer.append((mx - int(i)) * ' ' + int(i) * '*')\nprint('*' * (len(line_mas) + 2))\nprint('*' + ' ' * len(line_mas) + '*')\nfor i in range(mx):\n    print('*', end='')\n    for j in mas_for_answer:\n        print(j[i], end='')\n    print('*')\n​\n","GET":"line = input()\nflag = False\nline_right = ''\nfor i in line:\n    if i == '?':\n        flag = True\n    if flag and i != '?':\n        line_right += i\nmas_couples = line_right.split('&')\nkey = input()\nfor i in mas_couples:\n    mas_key_sign = i.split('=')\n    if mas_key_sign[0] == key:\n        print(mas_key_sign[1])\n        break\n​\n","Джек-Победитель-Великанов":"count = int(input())\nn = 0\nline = ''\nletters = 'ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁ'\nanswer = ''\nmas_a = []\nwhile n != count:\n    mas_a.extend(input())\n    if mas_a[0] == '*':\n        n += 1\n    elif mas_a[0] == ' ':\n        while mas_a[0] == ' ':\n            del mas_a[0]\n    for i in range(len(mas_a) - 1):\n        if mas_a[i + 1] != ' ' or mas_a[i] != ' ':\n            answer += mas_a[i]\n    answer += mas_a[-1] + ' '\n    mas_a = []\nmas_answer = answer.split(' * ')\ndel mas_answer[-1]\nfor i in range(len(mas_answer)):\n    mas_answer[i] = '-'.join(mas_answer[i].split())\nfor i in range(len(mas_answer) - 1, 0, -1):\n    print(mas_answer[i], end=', ')\nprint(mas_answer[0])\n​\n","Только миллиардеры":"mas = input().split(';')\nfor i in mas:\n    print(','.join([j for j in i.split(',') if int(j) >= 1_000_000_000]))\n","Произведение":"N = int(input())\nx = list()\nfor i in range(N):\n    x.append(int(input()))\nnumber = int(input())\nflag = False\nfor i in range(N - 1):\n    if flag:\n        break\n    for j in range(i + 1, N):\n        if x[i] * x[j] == number:\n            print('ДА')\n            flag = True\n            break\nif not flag:\n    print('НЕТ')\n​\n​\n​\n","Числа Трибоначчи":"x = [1, 1, 1]\nN = int(input())\nfor i in range(N - 3):\n    x.append(x[-3] + x[-2] + x[-1])\nfor i in range(N):\n    print(x[i], end=' ')\n​\n","Отбор":"x = []\nfor i in range(int(input())):\n    x.append(input())\nfor i in x:\n    print(i)\nprint()\nfor i in x:\n    if i[-1] == '4' or i[-1] == '5':\n        print(i)\n​\n","Сортировка по алфавиту":"N = int(input())\nx = []\nfor i in range(N):\n    x.append(input())\nfor i in range(N - 1):\n    for j in range(N - 1):\n        if x[j] > x[j + 1]:\n            x[j], x[j + 1] = x[j + 1], x[j]\nfor i in x:\n    print(i)\n","Сортировка по длине":"N = int(input())\nx = []\nfor i in range(N):\n    x.append(input())\nfor i in range(N - 1):\n    for j in range(N - 1):\n        if len(x[j]) > len(x[j + 1]):\n            x[j], x[j + 1] = x[j + 1], x[j]\n        elif len(x[j]) == len(x[j + 1]):\n            if x[j] > x[j + 1]:\n                x[j], x[j + 1] = x[j + 1], x[j]\nfor i in x:\n    print(i)\n​\n","Децимация":"N = int(input())\nx = []\nfor i in range(N):\n    x.append(input())\nn1 = int(input())\nn2 = int(input())\nanswer = []\nfor i in range(n2):\n    for j in range(len(x)):\n        if (j + 1) % n1 != 0:\n            answer.append(x[j])\n    x = answer\n    answer = []\nfor g in x:\n    print(g)\n​\n","Напёрстки":"N = int(input())\ns = []\nfor i in range(N):\n    s.append(input())\nN1 = int(input())\nfor i in range(N1):\n    n = int(input())\n    s1 = []\n    for j in range(n):\n        count = int(input())\n        s1.append(s[count - 1])\n    s = s1\nfor i in s:\n    print(i)\n​\n","Сортировка в обратном порядке":"N = int(input())\nmas = []\nfor i in range(N):\n    mas.append(int(input()))\nfor j in range(N - 1):\n    for i in range(N - 1 - j):\n        if mas[i] < mas[i + 1]:\n            mas[i], mas[i + 1] = mas[i + 1], mas[i]\nfor i in mas:\n    print(i)\n","Наборщик":"line = input()\nenglish = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\nrussian = 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя'\nword = ''\nfor i in line:\n    if i not in word and (i in english or i in russian):\n        if i in english:\n            for j in range(len(english)):\n                if i == english[j]:\n                    count = j + 1\n        else:\n            for j in range(len(russian)):\n                if i == russian[j]:\n                    count = j + 1\n        word += i\n        print((i, count))\n","Колобок и кочки":"N = int(input())\nmas_n = list()\nmas_a = list()\nflag = True\nfor i in range(N):\n    mas_n.append(int(input()))\nfor i in range(N):\n    mas_a.append(input())\ncount = 0\nanswer = ''\nfor i in range(len(mas_a)):\n    answer_letter = ''\n    for j in mas_a[i]:\n        count = 0\n        flag = True\n        for k in mas_a[i]:\n            if k == j:\n                count += 1\n        if count == mas_n[i] and answer_letter != j:\n            answer += j\n            answer_letter = j\nif len(answer) != N:\n    print('нечленораздельно')\nelse:\n    flag = False\nif not flag:\n    print(answer)\n​\n","A272727":"n = int(input())\nmas = [0]\ncount = 0\nfor i in range(n - 1):\n    for j in range(len(mas)):\n        if mas[j] == mas[-j - 1]:\n            count += 1\n    mas.append(count)\n    count = 0\nfor i in mas:\n    print(i)\n​\n","Два Пути":"N = int(input())\nindexes1 = []\nindexes2 = []\nfor i in range(N):\n    indexes1.append(int(input()))\nindexes2 = indexes1[:]\ntrainings = int(input())\nfor i in range(trainings):\n    number = int(input())\n    if number == 1:\n        index = int(input())\n        indexes1[index] = indexes1[index] + int(input())\n    else:\n        index = int(input())\n        indexes2[index] = indexes2[index] + int(input())\nfor i in indexes1:\n    print(i, end=' ')\nprint()\nfor i in indexes2:\n    print(i, end=' ')\nprint()\ncount = 0\nfor i in range(len(indexes1)):\n    if indexes1[i] == indexes2[i]:\n        count += 1\nprint(count)\n","Финал и не финал":"N = int(input())\nmas_names = list()\nmas_results = list()\nlosers = list()\nwinners = list()\nfor i in range(N):\n    mas_names.append(input())\n    mas_results.append(int(input()))\nsm = 0\nfor i in mas_results:\n    sm += i\nresult_for_final = sm / len(mas_results)\nfor i in range(len(mas_results)):\n    if mas_results[i] < result_for_final:\n        losers.append(mas_names[i])\n    else:\n        winners.append(mas_names[i])\nfor j in range(len(winners) - 1):\n    for i in range(len(winners) - 1 - j):\n        if winners[i] > winners[i + 1]:\n            winners[i], winners[i + 1] = winners[i + 1], winners[i]\nfor i in winners:\n    print(i)\nfor j in range(len(losers) - 1):\n    for i in range(len(losers) - 1 - j):\n        if losers[i] > losers[i + 1]:\n            losers[i], losers[i + 1] = losers[i + 1], losers[i]\nfor i in losers:\n    print(i)\n​\n","Тотальная децимация":"","Список покупок":"n = int(input())\ns = []\nfor i in range(n):\n    a = input()\n    s += [a]\nfor j in s:\n    print(j)\n​\n","Пра-пра-пра-Яндекс":"n = int(input())\ns = []\nfor i in range(n):\n    a = input()\n    s += [a]\ncheck = input()\nfor j in s:\n    if check in j:\n        print(j)\n​\n","Буква каждого слова":"n = int(input())\ns = []\nfor i in range(n):\n    a = input()\n    s += [a]\nnumber = int(input())\nfor j in s:\n    if len(j) >= number:\n        print(j[number - 1], end='')\n​\n","Автоматическое объявление":"n = int(input())\ns = []\nfor i in range(n):\n    a = input()\n    s += [a]\nn1 = int(input())\nfor j in range(n1):\n    number = int(input())\n    print(s[number - 1])\n​\n","Пра-пра-пра-Яндекс — 2":"n = int(input())\ns = []\nfor i in range(n):\n    a = input()\n    s += [a]\nn1 = int(input())\ncheck = []\nfor i in range(n1):\n    check += [input()]\nfor j in s:\n    for g in range(len(check)):\n        if check[g] in j:\n            flag = True\n        else:\n            flag = False\n            break\n    if flag:\n        print(j)\n","Супы":"s = ['щи', 'борщ', 'щавелевый суп', 'овсяный суп', 'суп по-чабански']\nn = int(input())\nwhile n > len(s):\n    s += s\nfor i in range(n):\n    print(s[i])\n","Инвестиционный фонд":"N = int(input())\ns = []\nfor i in range(N):\n    s += [int(input())]\nfor j in range(N):\n    print(s[j])\nprint()\nfor j in range(N):\n    print(s[j] * 3)\n","От и до":"N = int(input())\ns = []\nfor i in range(N):\n    n = int(input())\n    s += [n]\nbeginning = int(input())\nend = int(input())\nsumma = 0\nfor i in s[beginning - 1:end]:\n    summa += i\nprint(summa)\n​\n","Не бином Ньютона":"N = int(input())\ns = []\nfor i in range(N):\n    a = int(input())\n    s.append(a)\nfor i in range(len(s) - 1):\n    print(s[i] + s[i + 1])\n​\n","Белый список":"N1 = int(input())\nwhite_line = list()\nfor i in range(N1):\n    a = input()\n    white_line. append(a)\nN2 = int(input())\nline = list()\nfor j in range(N2):\n    b = input()\n    for g in white_line:\n        if b == g:\n            print(b)\n​\n","Проверка чека":"line = input()\nN = ''\ns_sm_real = []\ns_sm_unreal = []\nfor i in range(len(line)):\n    if line[i] == ' ':\n        i1 = i\n        break\n    N += line[i]\nN = int(N)\nsm_general = ''\nfor g in line[i1:]:\n    if g != ' ':\n        sm_general += g\nsm_general = int(sm_general)\nfor i in range(N):\n    a = input()\n    price = ''\n    for j in range(len(a)):\n        if a[j] == ' ':\n            j1 = j\n            break\n        price += a[j]\n    price = int(price)\n    number = ''\n    for g in range(j1, len(a)):\n        if a[g] == '=':\n            g1 = g + 1\n            break\n        if a[g] != ' ' and a[g] != '*':\n            number += a[g]\n    number = int(number)\n    sm_real = price * number\n    sm_unreal = ''\n    for k in a[g1:]:\n        sm_unreal += k\n    sm_unreal = int(sm_unreal)\n    s_sm_real.append(sm_real)\n    s_sm_unreal.append(sm_unreal)\nsm_unreal_check = 0\nsm_real_check = 0\nfor h in s_sm_real:\n    sm_real_check += h\nsm_real_check = int(sm_real_check)\nif sm_real_check != sm_general:\n    print(sm_general - sm_real_check)\n    for p in range(len(s_sm_real)):\n        if s_sm_real[p] != s_sm_unreal[p]:\n            print(p + 1, end=' ')\nelse:\n    print(0)\n","Подробный список покупок":"N = int(input())\ns = []\nfor i in range(N):\n    a = input()\n    b = int(input())\n    s.append(a)\n    s.append(b)\nfor j in range(len(s) - 2, - 1, -2):\n    print(s[j], s[j + 1])\n","RLE":"a = input()\nsymbol = a[0]\nn = 1\nfor i in a[1:]:\n    if i == symbol:\n        n += 1\n    else:\n        print(n, symbol)\n        symbol = i\n        n = 1\nprint(n, symbol)\n","Периодическая десятичная дробь":"n = int(input())\nmas_part_of_number = []\nmas_remainder = []\nremainder = 1\nwhile True:\n    mas_part_of_number.append(remainder // n)\n    remainder = remainder % n\n    remainder *= 10\n    if remainder in mas_remainder:\n        break\n    mas_remainder.append(remainder)\ni = mas_remainder.index(remainder)\nanswer = mas_part_of_number[i + 1:]\nfor x in answer:\n    print(x, end='')\n​\n​\n","Крупные буквы":"line = input()\nsa = [' *   ', '* *  ', '***  ', '* *  ', '* *  ']\nsb = ['**   ', '* *  ', '**   ', '* *  ', '**   ']\nsc = [' *   ', '* *  ', '*    ', '* *  ', ' *   ']\nfor j in range(5):\n    for i in line:\n        if i == 'A':\n            print(sa[j], end='')\n        elif i == 'B':\n            print(sb[j], end='')\n        else:\n            print(sc[j], end='')\n    print()\n​\n","Масштабирование":"height = int(input())\nwidth = int(input())\ns = []\nfor i in range(height):\n    a = input()\n    if i % 2 == 0:\n        s.append(a[::2])\nfor j in s:\n    print(j)\n​\n","Слова и буквы":"a = input()\nlength_max = 0\nlength_min = 1000000000\nwhile a != 'стоп':\n    if len(a) > length_max:\n        mx = a\n        length_max = len(a)\n    if len(a) < length_min:\n        mn = a\n        length_min = len(a)\n    a = input()\nfor i in mn:\n    if i in mx:\n        flag = True\n    else:\n        flag = False\n        break\nif flag:\n    print('ДА')\nelse:\n    print('НЕТ')\n​\n","Быки и коровы":"a = input()\nb = input()\nbulls = 0\ncows = 0\nn = -1\nfor i in a:\n    n += 1\n    if i == b[n]:\n        bulls += 1\n    elif i in b:\n        cows += 1\nprint(bulls, cows)\n","Вредные советы":"N = int(input())\nfor i in range(N):\n    a = input()\n    if (a[0] == 'Н' or a[0] == 'н') and a[1] == 'е' and a[2] == ' ':\n        print(a[3:])\n    else:\n        print(a)\n​\n","Анонс новости":"n = int(input())\nN = int(input())\nfor i in range(N):\n    a = input()\n    if len(a) > n:\n        print(a[: n - 3], '...', sep='')\n    else:\n        print(a)\n​\n","Найди кота — 5":"N = int(input())\nn = 0\nfor i in range(N):\n    n += 1\n    a = input()\n    if 'кот' in a:\n        flag = False\n        count = 0\n        while not flag:\n            if a[count:count + 3] == 'кот':\n                print(n, count + 1)\n                flag = True\n            else:\n                count += 1\n​\n","Розенкранц и Гильденстерн меняют профессию":"a = input()\ncount = 0\ncount_max = 0\nfor i in range(1, len(a)):\n    if a[i] == a[i - 1]:\n        if a[i] == 'о':\n            count += 1\n    else:\n        if count > count_max:\n            count_max = count\n        count = 0\nif count > count_max:\n    count_max = count\nif count_max > 0:\n    print(count_max + 1)\nelse:\n    print(count_max)\n","Фильтр":"N = int(input())\nfor i in range(N):\n    a = input()\n    if a[:2] == '%%':\n        print(a[2:])\n    elif not a[:4] == '####':\n        print(a)\n","Слова для кадавра":"model = input()\na = 1\ns1 = 'йцкнгшщзхъфвпрлджчсмтбь'\ns2 = 'уеёыаоэяию'\nsl = 'ййцукенгшщзхъфывапролджэячсмитьбюё'\ncount1 = 0\nwhile a != '':\n    a = input()\n    flag = True\n    if '*' in model:\n        for j in range(0, len(model)):\n            if model[j] == '*':\n                n = j\n                break\n        count = len(a) - len(model)\n        if count >= 1:\n            model1 = model[:n] + ' ' * (count + 1) + model[n + 1:]\n        else:\n            if count == -1:\n                model1 = model[:n] + model[n + 1:]\n            else:\n                model1 = model\n    else:\n        model1 = model\n    if len(a) != len(model1):\n        flag = False\n    if flag:\n        for i in range(0, len(model1)):\n            if model1[i] == '1':\n                if a[i] not in s1:\n                    flag = False\n                    break\n            elif model1[i] == '0':\n                if a[i] not in s2:\n                    flag = False\n                    break\n    if flag:\n        print(a)\n        count1 += 1\nif not count1:\n    print('Есть нечего, значить!')\n​\n​\n","Резиновые слова":"a = input()\ncount_2 = 2\ncount_not_2 = 1\nif len(a) % 2 == 0:\n    n2 = len(a) // 2\n    n1 = n2 - 1\n    print(' ' * n1, a[n1], a[n2], ' ' * n1, sep='')\n    while n1 != 0:\n        n1 -= 1\n        n2 += 1\n        print(' ' * n1, a[n1], count_2 * ' ', a[n2], ' ' * n1, sep='')\n        count_2 += 2\nelif len(a) % 2 != 0:\n    n1 = len(a) // 2\n    print(' ' * n1, a[n1], ' ' * n1, sep='')\n    n2 = n1\n    while n1 != 0:\n        n1 -= 1\n        n2 += 1\n        print(' ' * n1, a[n1], count_not_2 * ' ', a[n2], ' ' * n1, sep='')\n        count_not_2 = count_not_2 + 2\n​\n","Ползём вниз":"line = input()\nsymbol = line[0]\ncount = 0\nprint(symbol, end='')\nfor i in range(1, len(line)):\n    if line[i] == '>':\n        print(symbol, end='')\n        count += 1\n    elif line[i] == 'V':\n        print()\n        if i == len(line) - 1:\n            print(count * ' ' + symbol)\n        else:\n            if line[i + 1] == '>':\n                print(count * ' ' + symbol, end='')\n            elif line[i + 1] == '<':\n                n = 0\n                for j in line[i + 1:]:\n                    if j != '<':\n                        break\n                    n += 1\n                    count -= 1\n                print(count * ' ' + (n + 1) * symbol, end='')\n            else:\n                print(count * ' ' + symbol, end='')\n","Именно та буква":"line = input()\nn = int(input())\nletter = input()\nif len(letter) != 1 or n > len(line) or n <= 0:\n    print('ОШИБКА')\nelif line[n - 1] == letter:\n    print('ДА')\nelse:\n    print('НЕТ')\n​\n","Минификатор":"N = int(input())\nfor j in range(N):\n    a = input()\n    flag = False\n    for i in range(0, len(a)):\n        if a[i] == \"'\":\n            if flag:\n                if a[i - 1] != '\\\\':\n                    flag = False\n                elif a[i - 1] == '\\\\' and a[i - 2] == '\\\\':\n                    flag = False\n            else:\n                flag = True\n        if not flag:\n            if a[i] == ' ':\n                if a[:i] == ' ' * i:\n                    print(a[i], end='')\n                elif a[i - 1] != ' ':\n                    print(a[i], end='')\n            elif a[i] == '#':\n                break\n            else:\n                print(a[i], end='')\n        else:\n            print(a[i], end='')\n    print()\n","Буквоедство":"a = input()\nlast = len(a) - 1\nfirst = 0\nwhile first != last and first != last - 1:\n    print(a[first:last + 1])\n    last -= 1\n    first += 1\nif first == last:\n    print(a[first])\nelse:\n    print(a[first:last + 1])\n​\n","Пятая буква":"word = input()\nif len(word) >= 5:\n    print(word[4])\nelse:\n    print('НЕТ')\n","Скажите а":"if input()[0] == 'а':\n    print('ДА')\nelse:\n    print('НЕТ')\n","Последняя буква":"word = input()\nprint(word[-1])\n","Игра в города: один раунд":"a = input()\nb = input()\nif a[-1] == b[0]:\n    print('ВЕРНО')\nelse:\n    print('НЕВЕРНО')\n","Игра в города":"a = input()\nb = input()\nwhile a[-1] == b[0]:\n    a = b\n    b = input()\nprint(b)\n","Сколько-то букв по вертикали":"word = input()\nfor i in range(len(word)):\n    print(word[i])\n​\n","Начинающий шифровальщик":"word = input()\nfor i in range(len(word) - 1):\n    print(ord(word[i]), end=', ')\nprint(ord(word[-1]))\n​\n","Бурсацкое развлечение":"number = input()\nwhile number[0] != '1' and int(number) <= 1_000_000_000:\n    x = int(number[0])\n    number = int(number)\n    number = str(number * x)\nprint(number)\n​\n","Какая-то там буква":"line = input()\nn = int(input())\nif n > len(line) or n <= 0:\n    print('ОШИБКА')\nelse:\n    print(line[n - 1])\n","Цезарь его знает":"step = int(input())\nline = input()\nline1 = ''\nfor i in line:\n    if 65 <= ord(i) <= 1071:\n        if ord(i) + step > 1071:\n            line1 += chr(65 + (ord(i) + step - 1071 - 1))\n        else:\n            line1 += chr(ord(i) + step)\n    elif 1072 <= ord(i) <= 1103:\n        if ord(i) + step > 1103:\n            line1 += chr(1072 + (ord(i) + step - 1103 - 1))\n        else:\n            line1 += chr(ord(i) + step)\n    else:\n        line1 += i\nprint(line1)\n","Скажите а (заглавное)":"word = input()\nif word[0] == 'а' or word[0] == 'А':\n    print('ДА')\nelse:\n    print('НЕТ')\n​\n","Последняя буква 2":"word = input()\nprint(word[-1])\n","Продолжайте говорить «А»":"word = input()\nwhile word[0] == 'а' or word[0] == 'А':\n    print(word)\n    word = input()\n​\n","Игра в города: мягкий знак":"town1 = input()\ntown2 = input()\nif town1[-1] == 'ь':\n    if town1[-2] == town2[0]:\n        print('ВЕРНО')\n    else:\n        print('НЕВЕРНО')\nelse:\n    if town1[-1] == town2[0]:\n        print('ВЕРНО')\n    else:\n        print('НЕВЕРНО')\n","Ххооллоодд":"word = input()\nfor i in word:\n    print(i, i, sep='', end='')\n​\n","Поездка на автобусе":"s = set()\ns1 = set()\na = input()\nwhile a:\n    s.add(a)\n    a = input()\nb = input()\nwhile b:\n    s1.add(b)\n    b = input()\ns2 = s & s1\nif s2 == set():\n    print('EMPTY')\nelse:\n    for i in s2:\n        print(i)\n​\n","Города":"s = set()\nN = int(input())\nfor i in range(N):\n    s.add(input())\nelem = input()\nif elem not in s:\n    print('OK')\nelse:\n    print('TRY ANOTHER')\n","Языки – 0":"M = int(input())\nN = int(input())\ns1 = set()\ns2 = set()\nfor i in range(M):\n    s1.add(input())\nfor i in range(N):\n    s2.add(input())\ns3 = s1 ^ s2\nn = len(s3)\nif n == 0:\n    print('NO')\nelse:\n    print(n)\n​\n","Языки – 1":"","Книги на лето":"M = int(input())\nN = int(input())\ns_library = set()\nfor i in range(M):\n    s_library.add(input())\nfor j in range(N):\n    if input() in s_library:\n        print('YES')\n    else:\n        print('NO')\n​\n","Посещаемость":"M = int(input())\ns = set()\ns_pupils = set()\nfor i in range(M):\n    N = int(input())\n    s = set()\n    for j in range(N):\n        s.add(input())\n    if not s_pupils:\n        s_pupils = s\n    else:\n        s_pupils = s & s_pupils\nfor g in s_pupils:\n    print(g)\n","Однофамильцы":"N = int(input())\ns = set()\ns_count = set()\nfor i in range(N):\n    a = input()\n    if a in s:\n        s_count.add(a)\n    s.add(a)\nprint(N - (len(s) - len(s_count)))\n​\n","Лекарственные травы":"n = int(input())\ns = set()\nfor i in range(n):\n    m = int(input())\n    for j in range(m):\n        s.add(input())\nfor g in s:\n    print(g)\n​\n","Рецепты":"M = int(input())\ns_fridge = set()\nfor i in range(M):\n    s_fridge.add(input())\nN = int(input())\ns_recipes = set()\nfor i in range(N):\n    name = input()\n    number_of_ingredients = int(input())\n    for j in range(number_of_ingredients):\n        s_recipes.add(input())\n    if s_recipes == s_fridge & s_recipes:\n        print(name)\n    s_recipes = set()\n​\n","Новые блюда":"M = int(input())\ns_possible = set()\ns_dishes = set()\nfor i in range(M):\n    s_possible.add(input())\nN = int(input())\nfor j in range(N):\n    dishes_per_day = int(input())\n    for g in range(dishes_per_day):\n        s_dishes.add(input())\ns = s_possible ^ s_dishes\nfor h in s:\n    print(h)\n​\n","Таблица умножения":"n = int(input())\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        print(i * j, end='\\t')\n    print()\n","Таблица не в виде таблицы":"n = int(input())\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        print(i, '*', j, '=', i * j)\n","Ёлочный счёт":"j = 1\nk = 1\nn = int(input())\nwhile True:\n    for i in range(k, k + j):\n        print(i, end=' ')\n        if i == n:\n            break\n    if i == n:\n        break\n    print()\n    k += j\n    j += 1\n","Логистический максимин":"n = int(input())\nhigh1 = 0\ncount = 0\nfor i in range(n):\n    highmin = 1000\n    number = int(input())\n    count += 1\n    for j in range(1, number + 1):\n        high = int(input())\n        if high < highmin:\n            highmin = high\n    if high1 < highmin:\n        high1 = highmin\n        count_max = count\nprint(count_max, high1)\n","Таблица деления":"a = int(input())\nb = int(input())\na1 = 1\nb1 = 1\nfor j in range(b):\n    for i in range(a):\n        print(a1 / b1, end=' ')\n        a1 += 1\n    print()\n    a1 = 1\n    b1 += 1\n","Рисуем прямоугольник":"height = int(input())\nwidth = int(input())\nsymbol = input()\nprint(width * symbol)\nfor i in range(height - 2):\n    print(symbol + (width - 2) * ' ' + symbol)\nprint(width * symbol)\n","Дальние командировки":"N = int(input())\nkm = 0\ns = 0\ndegree = 0\nfor i in range(N):\n    s += 10 ** i * 9 * (i + 1)\n    if s > N:\n        s = s - 10 ** i * 9 * (i + 1)\n        degree = i + 1\n        break\n    km += 9 * 10 ** i\nrest = N - s\nkm = km + rest // degree\nprint(km)\n","Обратный отсчёт: серия пусков":"number_of_machines = int(input())\nseconds = 0\nnumber = 1\nfor i in range(number_of_machines):\n    for j in range(seconds, -1, -1):\n        print('Осталось секунд:', j)\n        if j == 0:\n            print('Пуск', number)\n    number += 1\n    seconds += 1\n","Простые числа на миллион долларов":"a = int(input())\nfor i in range(1, a):\n    s = 0\n    for j in range(1, int(i ** 0.5) + 1):\n        if i % j == 0:\n            s += 1\n        if s > 1:\n            continue\n    if s == 1 and i != 1:\n        print(i)\n​\n","Начинающий фермер":"","Числовая дружбаРУЧ":"for i in range(1, 10000):\n    s = 0\n    for j in range(1, i):\n        if i % j == 0:\n            s += j\n    if s < 10000:\n        s1 = 0\n        for g in range(1, s):\n            if s % g == 0:\n                s1 += g\n        if i == s1 and i < s:\n            print(i, s)\n","FizzBuzz":"a = int(input())\nb = int(input())\nfor i in range(a, b + 1):\n    if i % 3 == 0 and i % 5 == 0:\n        print('FizzBuzz')\n    elif i % 3 == 0:\n        print('Fizz')\n    elif i % 5 == 0:\n        print('Buzz')\n    else:\n        print(i)\n​\n","Найди кота":"n = int(input())\ns = 0\nfor i in range(n):\n    a = input()\n    if 'Кот' in a or 'кот' in a:\n        s += 1\nif s > 0:\n    print('МЯУ')\nelse:\n    print('НЕТ')\n","Найди кота (break)":"n = int(input())\ns = 0\nfor i in range(n):\n    a = input()\n    if 'кот' in a or 'Кот' in a:\n        s = 1\n        break\nif s == 0:\n    print('НЕТ')\nelse:\n    print('МЯУ')\n","Найди кота — 2 (break)":"a = 0\ns = 0\nn = 0\nwhile a != 'СТОП':\n    a = input()\n    n += 1\n    if not s and ('кот' in a or 'Кот' in a):\n        s = n\n        break\nif s == 0:\n    print(s - 1)\nelse:\n    print(s)\n","Сложиться до 10":"s = 0\nn = 0\na = 1\nwhile a:\n    a = int(input())\n    s += a\n    n += 1\n    if s == 10:\n        break\nprint(n)\n​\n","Найди кота — 3":"a = 0\nsm = 0\nfirst_string = 0\nstring = 0\nwhile a != 'СТОП':\n    a = input()\n    string += 1\n    if 'Кот' in a or 'кот' in a:\n        if not first_string:\n            first_string = string\n        sm += 1\nif not sm:\n    print(sm, -1)\nelse:\n    print(sm, first_string)\n","Ищем клад — 2":"x = int(input())\ny = int(input())\nx1 = 0\ny1 = 0\nN = 0  # сколько уже пройдено указаний\ndirection = 0\nwhile x != x1 or y != y1:\n    direction = input()\n    n = int(input())\n    if direction == 'запад':\n        x1 -= n\n        N += 1\n    elif direction == 'север':\n        y1 += n\n        N += 1\n    elif direction == 'юг':\n        y1 -= n\n        N += 1\n    elif direction == 'восток':\n        x1 += n\n        N += 1\nwhile direction != 'стоп':\n    direction = input()\nprint(N)\n","Найди кота — 4":"n = int(input())\nflag = False\nfor i in range(n):\n    string = input()\n    if 'Кот' in string or 'кот' in string:\n        flag = True\n    if 'Пёс' in string or 'пёс' in string:\n        flag = False\nif flag:\n    print('МЯУ')\nelse:\n    print('НЕТ')\n","Школа танцев":"n = int(input())\nn1 = 0\ncount = 0\ntrully = 'раз'\nwhile n1 != n:\n    a = input()\n    if a != trully:\n        print('Правильных отсчётов было ' + str(count) + ', но теперь '\n                                                         'вы ошиблись.')\n        n1 += 1\n        count = 0\n        trully = 'четыре'\n    else:\n        count += 1\n    if trully == 'раз':\n        trully = 'два'\n    elif trully == 'два':\n        trully = 'три'\n    elif trully == 'три':\n        trully = 'четыре'\n    else:\n        trully = 'раз'\nprint('На сегодня хватит.')\n​\n","Многоразовый калькулятор":"b = 1\ns = 1\nwhile s != 'x':\n    a = int(input())\n    s = input()\n    if s == '!':\n        if a < 0:\n            continue\n        sm = 1\n        for i in range(1, a + 1):\n            sm *= i\n        print(sm)\n        continue\n    if s == 'x':\n        print(a)\n        break\n    b = int(input())\n    if s == '+':\n        print(a + b)\n    elif s == '-':\n        print(a - b)\n    elif s == '*':\n        print(a * b)\n    elif s == '/':\n        if b == 0:\n            continue\n        else:\n            print(a // b)\n    elif s == '%':\n        if b == 0:\n            continue\n        print(a % b)\n","Биржевой роботРУЧ":"price = 1\nprice1 = 1000000000000000\nbuy = 0\nsell = 0\nwhile price:\n    price = int(input())\n    if price > price1:\n        buy = price\n        break\n    else:\n        price1 = price\nwhile price:\n    price = int(input())\n    if price < price1:\n        sell = price\n        break\n    else:\n        price1 = price\nwhile price:\n    price = int(input())\nprint(buy, sell, sell - buy)\n","Проверка блокчейнаРУЧ":"N = int(input())\nstring = -1\nh = 0\nfor i in range(N):\n    b = int(input())\n    m = b // 256 ** 2\n    hr = b - m * 256 ** 2\n    r = hr // 256\n    h1 = hr - r * 256\n    h = (37 * (m + r + h)) % 256\n    if (h1 != h or h >= 100) and string == -1:\n        string = i\nprint(string)\n","Ждём потепления":"t = float(input())\nd = 0\nwhile t < 22:\n    d += 1\n    t = float(input())\nprint(d // 7)\n","Повторение - мать учения: ultimate edition":"text = input()\nn = int(input())\nfor i in range(n):\n    print(text)\n","Кубизм":"n = int(input())\nn += 1\nfor i in range(n):\n    print('Куб числа', i, 'равен', i ** 3)\n","Факториал":"n = int(input())\nS = 1\nfor i in range(n):\n    i += 1\n    S *= i\nprint(S)\n​\n","Перемножить без трюков":"S = 1\nfor i in range(6):\n    a = int(input())\n    if a == 0:\n        a = 1\n    S *= a\nprint(S)\n","Вышел зайчик погулять":"n = int(input())\nn += 1\nfor i in range(n):\n    print(i, end=' ')\n","Делите ли":"a = int(input())\nn = 1  # количество делителей\nfor i in range(1, a):\n    if a % i == 0:\n        n += 1\n        print(i, end=' ')\nprint(a)\nif n > 2 or a == 1:\n    print('НЕТ')\nelse:\n    print('ПРОСТОЕ')\n​\n","Обратный отсчёт":"n = int(input())\nif n < 0:\n    print('Пуск')\nelse:\n    for i in range(n, -1, -1):\n        print('Осталось секунд:', i)\n    print('Пуск')\n​\n","Пирамида":"a = int(input())\nprobel = a - 1\nfor i in range(1, a + 1):\n    print(probel * ' ' + (i + i - 1) * '*' + probel * ' ')\n    probel -= 1\n","Конфетное изобилие":"S = int(input())\nn_max = int((1 + 3 * S ** 0.5) / 2)\nfor i in range(n_max, 0, -1):\n    a = S / i - (i - 1) / 2\n    if a == int(a) and a > 0:\n        break\nprint(int(a))\n","Тест на делимость":"for i in range(17):\n    a = int(input())\n    if i % a == 0:\n        print('ДА')\n    else:\n        print('НЕТ')\n","Умнее среднего":"n = int(input())\nS = 0\nfor i in range(1, n + 1):\n    IQ = int(input())\n    S += IQ\n    middle = S / i\n    if IQ > middle:\n        print('>')\n    elif IQ < middle:\n        print('<')\n    else:\n        print(0)\n","Шварценеггер против Годзиллы":"n = int(input())\nS1 = 0\nS2 = 1\nfor i in range(n):\n    a1 = int(input())\n    a2 = int(input())\n    S1 = S1 * a2 + S2 * a1\n    S2 = S2 * a2\n    t1 = S1\n    t2 = S2\n    while t1 != t2:\n        if t1 > t2:\n            t1 = t1 - t2\n        elif t2 > t1:\n            t2 = t2 - t1\n    S1 /= t1\n    S2 /= t2\nprint(int(S1), int(S2), sep='/')\n","Сумма ряда":"n = int(input())\nS = 0\na = 0\nc = 1\nfor i in range(n):\n    a = int(input())\n    S += a * c\n    c = -c\nprint(S)\n","Псевдоним v2.0":"n = int(input())\nwhile n > 0:\n    if (n - 1) % 4 == 0:\n        a1 = 1\n    elif (n - 2) % 4 == 0:\n        a1 = 2\n    elif (n - 3) % 4 == 0:\n        a1 = 3\n    else:\n        a1 = 1\n    n -= a1\n    print(a1, n, ' ')\n    if n == 0:\n        print('ИИ выиграл!')\n    else:\n        a2 = int(input())\n        while a2 > n or a2 <= 0 or a2 > 3:\n            print('Некорректный ход:', a2, ' ')\n            a2 = int(input())\n        n -= a2\n        print(a2, n, ' ')\n        if n == 0:\n            print('Вы выиграли!')\n","Фибоначчи":"a = int(input())\na1 = 1\na2 = 1\na3 = 1\nif a > 0:\n    print(a1)\n    print(a2)\n    while a3 <= a:\n        a3 = a1 + a2\n        a1 = a2\n        a2 = a3\n        if a3 <= a:\n            print(a3)\n","Ним-пасьянс":"n = int(input())\nwhile n > 0:\n    a = int(input())\n    n -= a\n    if n >= 0:\n        print(n)\n","Псевдоним-пасьянс":"n = int(input())\nwhile n > 0:\n    a = int(input())\n    if a <= n and 0 < a <= 3:\n        n -= a\n        if n >= 0:\n            print(n)\n    else:\n        print(n)\n​\n","Остров невезения":"d = int(input())\nm = int(input())\ncy = int(input())\nif 3 <= m <= 12:\n    m -= 2\nelif 1 <= m <= 2:\n    m += 10\n    cy -= 1\nc = cy // 100\ny = cy - c * 100\nk = d + ((13 * m - 1) // 5) + y + (y // 4 + c // 4 - 2 * c + 777)\nday_of_week = k % 7\nprint(day_of_week)\n","Цирк, цирк, цирк!":"n = int(input())  # необходимое количество камней в куче\nstep = 0  # необходимое количество шагов\nwhile n != 0:\n    while n % 2 == 0:\n        n = n / 2\n        step += 1\n    while n % 2 != 0:\n        n -= 1\n        step += 1\nprint(step - 1)\n","Ним-3 v2.0РУЧ":"n1 = int(input())\nn2 = int(input())\nn3 = int(input())\nwhile n1 != 0 or n2 != 0 or n3 != 0:\n    xor = n1 ^ n2 ^ n3\n    if n1 ^ xor < n1:\n        step = n1 - (n1 ^ xor)\n        n1 -= step\n        print(1, step, n1, n2, n3)\n    elif n2 ^ xor < n2:\n        step = n2 - (n2 ^ xor)\n        n2 -= step\n        print(2, step, n1, n2, n3)\n    elif n3 ^ xor < n3:\n        step = n3 - (n3 ^ xor)\n        n3 -= step\n        print(3, step, n1, n2, n3)\n    else:\n        step = 1\n        if n1 > 0:\n            n1 -= step\n            print(1, step, n1, n2, n3)\n        elif n2 > 0:\n            n2 -= step\n            print(2, step, n1, n2, n3)\n        elif n3 > 0:\n            n3 -= step\n            print(2, step, n1, n2, n3)\n    if n1 == 0 and n2 == 0 and n3 == 0:\n        print('ИИ выиграл!')\n    else:\n        flag = True\n        number = int(input())\n        step = int(input())\n        if number != 1 and number != 2 and number != 3:\n            print('Некорректный ход:', number, step)\n            flag = False\n        elif number == 1 and (step > n1 or step <= 0):\n            print('Некорректный ход:', number, step)\n            flag = False\n        elif number == 2 and (step > n2 or step <= 0):\n            print('Некорректный ход:', number, step)\n            flag = False\n        elif number == 3 and (step > n3 or step <= 0):\n            print('Некорректный ход:', number, step)\n            flag = False\n        while not flag:\n            number = int(input())\n            step = int(input())\n            if number != 1 and number != 2 and number != 3:\n                print('Некорректный ход:', number, step)\n                flag = False\n            elif number == 1 and (step > n1 or step <= 0):\n                print('Некорректный ход:', number, step)\n                flag = False\n            elif number == 2 and (step > n2 or step <= 0):\n                print('Некорректный ход:', number, step)\n                flag = False\n            elif number == 3 and (step > n3 or step <= 0):\n                print('Некорректный ход:', number, step)\n                flag = False\n            else:\n                flag = True\n        if number == 1:\n            n1 -= step\n            print(1, step, n1, n2, n3)\n        elif number == 2:\n            n2 -= step\n            print(2, step, n1, n2, n3)\n        elif number == 3:\n            n3 -= step\n            print(3, step, n1, n2, n3)\n        if n1 == 0 and n2 == 0 and n3 == 0:\n            print('Вы выиграли!')\n","Ним-2 v2.0РУЧ":"n1 = int(input())\nn2 = int(input())\nif n1 == 0 and n2 == 0:\n    print('Вы выиграли!')\nwhile n1 > 0 or n2 > 0:\n    if n1 > n2:\n        a1 = n1 - n2\n        n1 -= a1\n        print('1', a1, n1, n2)\n    elif n2 > n1:\n        a2 = n2 - n1\n        n2 -= a2\n        print('2', a2, n1, n2)\n    else:\n        a2 = 1\n        n2 -= a2\n        print('2', a2, n1, n2)\n    if n1 == 0 and n2 == 0:\n        print('ИИ выиграл!')\n    else:\n        flag = True\n        number = int(input())\n        if number == 2:\n            a2 = int(input())\n        else:\n            a1 = int(input())\n        if number == 2 and (a2 > n2 or a2 <= 0):\n            print('Некорректный ход:', number, a2)\n            flag = False\n        elif number == 1 and (a1 > n1 or a1 <= 0):\n            print('Некорректный ход:', number, a1)\n            flag = False\n        while not flag:\n            number = int(input())\n            if number == 2:\n                a2 = int(input())\n            else:\n                a1 = int(input())\n            if number == 2 and (a2 > n2 or a2 <= 0):\n                print('Некорректный ход:', number, a2)\n                flag = False\n            elif number == 1 and (a1 > n1 or a1 <= 0):\n                print('Некорректный ход:', number, a1)\n                flag = False\n            else:\n                flag = True\n        if number == 2:\n            n2 -= a2\n            print(number, a2, n1, n2)\n        else:\n            n1 -= a1\n            print(number, a1, n1, n2)\n        if n1 == 0 and n2 == 0:\n            print('Вы выиграли!')\n","Ним2-пасьянс":"n1 = int(input())  # количество камней в первой куче\nn2 = int(input())  # количество камней во второй куче\nwhile n1 != 0 or n2 != 0:\n    number = input()\n    if number == '1':\n        step = int(input())\n        n1 -= step\n    else:\n        step = int(input())\n        n2 -= step\n    print(n1, n2)\n","Бот-говорилкаРУЧ":"","Лабиринт 2РУЧ":"print('''Вы очнулись также внезапно, как и потеряли сознание. Ноги были ватные,\\\n голова гудела.\nВы пытались впомнить, что с вами прозошло, но все попытки были \\\nнапрасными. Став на ноги, вы все-таки решили оглядеться.\nВы оказались в темной комнате, в которой воняло лекарствами и спертым воздухом.\nУже почти полностью придя в себя, вы осознали, что попали в заброшенное здание\\\n психиатрической больнице.\nНадо как-то отсюда выбираться.''')\na = '*'\nwhile a != 0:\n    a = input('Вы заметили, что в комнате есть три двери. '\n              'В какую пойдем: 1, 2 или 3?\\n')\n    while a != '1' and a != '2' and a != '3':\n        a = input('Кажется, вы ввели недопустимое значение. Введите номер'\n                  'двери: 1, 2 или 3\\n')\n    if a == '1':\n        print('''Вы зашли в маленькую комнатушку, а дверь позади резко\\\n захлопнулась. Когда вы попытались открыть ее вновь, осознали, что вернуться назад уже не \\\nполучится.\nМысли путались в голове, вас постепенно начала охватывать жуткая\\\n паника. Но вдруг за дверью в которую вы вошли послышались шаги и недовольное\\\n  сопение.\nЕдинственное, что заставляло вас стоять на ногах и принимать решения был просто\\\nй страх. Что же делать?\nВ этой комнате вы заметили небольшую дверь и проход в подвал. Времени мало!\nКуда идем: подвал или дверь?''')\n        a = 0\n        a1 = input()\n        while a1 != 'подвал' and a1 != 'дверь':\n            a1 = input('Кажется, вы ввели недопустимое значение: '\n                       'Введите, куда идете: подвал или дверь\\n')\n        if a1 == 'подвал':\n            print('''АААААААА \nПронзительный крик - это все, что вам удалось услышать.\nКакой-то псих стукнул вас по голове, а потом съел. Беда, что сказать...''')\n        elif a1 == 'дверь':\n            print('''Несколько секунд вы не могли ничего разглядеть, так странн\\\nо повлиял на вас обычный солнечный свет. \nВам удалось выбраться из этого\\\n страшного места почти без потерь. Скорее убегайте домой.\nА там ложитесь спать, и, может быть, вам удасться поверить, что все эт\\\nо был просто сон...''')\n    elif a == '2':\n        print('''Теперь вы очутились в более просторной комнате. Здесь даже\\\n было небольшое окошко, но что-то эта обстановка не сильно вас радовала.\nНужно быстрее искать выход. В этой комнате всего одна дверь.\nВы можете пойти: назад или дальше.''')\n        a = 0\n        a2 = input()\n        while a2 != 'назад' and a2 != 'дальше':\n            a2 = input('Кажется, вы ввели недопустимое значение: '\n                       'Введите, куда идете: назад или дальше.\\n')\n        if a2 == 'назад':\n            a = a2\n        elif a2 == 'дальше':\n            print('''Вы оказались в корридоре. И, о счастье, в конце корридора\\\n виднелась дверь. \nВы, что было мочи побежали, но почувтвовали сильный удар\\\n, а очнулись уже в первой комнате...''')\n            a = a2\n    elif a == '3':\n        print('''Вы очутились в новой комнате. К сожалению, в ней не было други\\\nх дверей, но на полу сидел странный человек и спал.\nЧто делать: будим его или назад?''')\n        a = 0\n        a3 = input()\n        while a3 != 'будим его' and a3 != 'назад':\n            a3 = input('Кажется, вы ввели недопустимое значение: '\n                       'Введите: будим его или назад.\\n')\n        if a3 == 'назад':\n            a = a3\n        elif a3 == 'будим его':\n            print('''Было очень страшно, но вы все же решились разбудить этого\\\n странного жителя. Он очень удивился увидев вас, но вскоре совладал с собой.\nОн рассказал, что в этой психушке живет много жителей, которые здесь очутились \\\nтак же как и вы. \nСмотритель больнице просто ненавидит людей и часто их похичает\\\n и ставит на них опыты. Ему же его, его сыну приакзано за вами смотреть. Но\\\n эта проклятая больница так нодоела ему, что он все же решит вам помочь.\nЭтот человек дал вам снотворное, чтобы он мог спокойно вас вывезти, но вы не\\\n не запомнили путь, чтобы вернуться сюда.\nОчнулись вы уже на оживленной улице города...''')\n","Псевдоним-мизерРУЧ":"n = int(input())\nwhile n > 0:\n    if (n - 1 - 1) % 4 == 0:\n        a1 = 1\n    elif (n - 1 - 2) % 4 == 0:\n        a1 = 2\n    elif (n - 1 - 3) % 4 == 0:\n        a1 = 3\n    else:\n        a1 = 1\n    n -= a1\n    print(a1, n, ' ')\n    if n == 0:\n        print('Вы выиграли!')\n    else:\n        a2 = int(input())\n        while a2 > n or a2 <= 0 or a2 > 3:\n            print('Некорректный ход:', a2, ' ')\n            a2 = int(input())\n        n -= a2\n        print(a2, n, ' ')\n        if n == 0:\n            print('ИИ выиграл!')\n","Ним3-пасьянсРУЧ":"n1 = int(input())  # количество камней в первой куче\nn2 = int(input())  # количество камней во второй куче\nn3 = int(input())  # количество камней в третьей куче\nwhile n1 != 0 or n2 != 0 or n3 != 0:\n    number = input()\n    if number == '1':\n        step = int(input())\n        n1 -= step\n    elif number == '2':\n        step = int(input())\n        n2 -= step\n    else:\n        step = int(input())\n        n3 -= step\n    print(n1, n2, n3)\n","Вспомнить всё: if":"t = float(input())\nif t < 15.5:\n    print('ХОЛОДНО')\nelif t > 28:\n    print('ЖАРКО')\nelse:\n    print('НОРМАЛЬНО')\n","password123":"a = input()\na1 = input()\nif len(a) < 8:\n    print('Короткий!')\nelif a != a1:\n    print('Различаются.')\nelse:\n    print('OK')\n","Числа до нуля":"a = int(input())\nwhile a != 0:\n    print(a)\n    a = int(input())\n","Строки до пустой":"a = input()\nwhile a != '':\n    print(a)\n    a = input()\n","Таких берут в космонавты":"a = int(input())\nnumber = 0\nmn = 2000\nmx = 0\nwhile a != '!':\n    a = int(a)\n    if 150 <= a <= 190:\n        number += 1\n        if a < mn:\n            mn = a\n        if a > mx:\n            mx = a\n    a = input()\nprint(number)\nprint(mn, mx)\n","Сколько строк?":"a = input()\nnumber = 1\nwhile a != 'Спасибо.':\n    number += 1\n    a = input()\nprint(number)\n","Среднее":"t = float(input())\ncount = 0\nsm_t = 0\nwhile t > - 300:\n    count += 1\n    sm_t += t\n    t = float(input())\nprint(sm_t / count)\n","1024 и все-все-все":"a = int(input())\nn = 0\nwhile 2 ** n < a:\n    n += 1\nif 2 ** n == a:\n    print(n)\nelse:\n    print('НЕТ')\n","password123456":"a = input()\nb = input()\nif len(a) < 8:\n    print('Короткий!')\nelif '123' in a:\n    print('Простой!')\nelif a != b:\n    print('Различаются.')\nelse:\n    print('OK')\n","Лабиринт с правом на ошибкуРУЧ":"print('''За вами гонится огромный дракон, но внезапно \\\nвы оказались у входа в замок и видите  три двери.\nХодят слухи, что замок заколдован злой ведьмой.\nЕще мало кому удавалось пройти через все его испытания и остаться живым. \nНапишите в какую из дверей вы пойдете (1, 2 или 3?)''')\na = input()\nwhile a != '1' and a != '2' and a != '3':\n    a = input('Кажется, вы ввели недопустимое значение. Введите номер двери: 1, 2 или 3\\n')\nif a == '1':\n    print('Теперь перед вами 2 коридора. Куда идем: налево или направо?')\n    a1 = input()\n    while a1 != 'направо' and a1 != 'налево':\n        a1 = input('Кажется, вы ввели недопустимое значение: '\n                   'Введите в какой коридорвы идете: налево или направо\\n')\n    if a1 == 'налево':\n        print('''Вы смело шагаете по корридору\nНо вруг в темноте послышались шаги. К вам на втречу вышел тролль и... \\\nподарил вам шоколадку! Приятного аппетита)''')\n    elif a1 == 'направо':\n        print('''Теперь вы идете по широкому корридору.\nЕго пространство постепенно расширяется, все вокруг наполняется приятным \\\nсолнечным светом...\nНо взгляните, кажется, огромный дракон хочет отправиться с вами в \\\nпутешествие в Нарнию! \nНе теряйте ни минуты и отправляйтесь навстречу приключениям!''')\nelif a == '2':\n    print('''Из корридора вы волшебным образом очутились в дремучем лесу. \nПеред вами две тропинки. Куда пойдем: налево или направо?''')\n    a2 = input()\n    while a2 != 'направо' and a2 != 'налево':\n        a2 = input('Кажется, вы ввели недопустимое значение: '\n                   'Введите по какой тропинке идете: налево или направо\\n')\n    if a2 == 'налево':\n        print('''Заросли начали сгущаться. Эта прогулка может завершиться не \\\nочень хорошо...\nНу вот, опасения были не напрасны. Вас схватила Баба Яга и свярила из \\\nвас суп(((''')\n    elif a2 == 'направо':\n        print('''Постепенно ветвистая тропинка стала ровной, а лес вокруг \\\nощутимо поредел.\nКак вам повезло! Вы попали в стран фей! Поторапливайтесь, они зовут вас \\\nпить чай)''')\nelif a == '3':\n    print('''Замок оказался волшебным, и его корридор привел вас в пустыню.\nНа севере вы заметили льва и решили, что туда идти не стоит.\nВ направлении юга солнце палило так сильно, что вы не можете разглядеть дорогу.\nТак куда идем: запад или восток?''')\n    a3 = input()\n    while a3 != 'запад' and a3 != 'восток':\n        a3 = input('Кажется, вы ввели недопустимое значение: '\n                   'Введите в каком направлении идете: запад или восток\\n')\n    if a3 == 'запад':\n        print('''Вы очень долго бродили по изнуряющей жаре. \nКазалось, ничто больше не сможет вас от нее спасти...\nНо вдруг вы видите оазис. Счастье вас переполняло. Вы прыгнули купать, но...\nКоварное озеро вас поглотило(((''')\n    elif a3 == 'восток':\n        print('''Вы долго бродили по пустыне, даже стали отчаиваться.\nНо о счастье вы увидели пилота,который уже заканчивает починку своего самолета.\nСкорее бегите к нему! Кажется, вы познакомились с американцем и \\\nсейчас полетите в Нью Йорк!!!''')\n","Сиракузская последовательность":"a = int(input())\nn = 0\nwhile a != 1:\n    if a % 2 == 0:\n        a = a / 2\n        n += 1\n    else:\n        a = 3 * a + 1\n        n += 1\nprint(n)\n","Круглые":"a = int(input())\nwhile a % 10 == 0:\n    print(a)\n    a = int(input())\n","password":"a = input()\nb = input()\nwhile len(a) < 8 or '123' in a or a != b:\n    if len(a) < 8:\n        print('Короткий!')\n    elif '123' in a:\n        print('Простой!')\n    elif a != b:\n        print('Различаются.')\n    a = input()\n    b = input()\nprint('OK')\n","Ищем клад — 1":"x = int(input())\ny = int(input())\nx1 = 0\ny1 = 0\nn = 0  # сколько уже пройдено указаний\npart_of_the_world = 1  # часть света\ndirection = 0  # напраление\nwhile x != x1 or y != y1:\n    direction = input()\n    while direction != 'вперёд':\n        if direction == 'налево':\n            if part_of_the_world == 1:\n                part_of_the_world = 4\n            else:\n                part_of_the_world -= 1\n            direction = input()\n            n += 1\n        elif direction == 'направо':\n            if part_of_the_world == 4:\n                part_of_the_world = 1\n            else:\n                part_of_the_world += 1\n            direction = input()\n            n += 1\n        elif direction == 'разворот':\n            if part_of_the_world == 1:\n                part_of_the_world = 3\n            else:\n                part_of_the_world -= 2\n            direction = input()\n            n += 1\n    a = int(input())\n    if part_of_the_world == 1:\n        y1 += a\n    elif part_of_the_world == 3:\n        y1 -= a\n    elif part_of_the_world == 4:\n        x1 -= a\n    elif part_of_the_world == 2:\n        x1 += a\n    n += 1\nif part_of_the_world == 1:\n    part_of_the_world = 'север'\nelif part_of_the_world == 2:\n    part_of_the_world = 'восток'\nelif part_of_the_world == 3:\n    part_of_the_world = 'юг'\nelif part_of_the_world == 4:\n    part_of_the_world = 'запад'\nprint(n)\nprint(part_of_the_world)\n","Бинарная угадайкаРУЧ":"a = 0\nn = 512\nb = 512\nprint(n, '?')\nwhile a != '=':\n    a = input()\n    b //= 2\n    if a == '>':\n        n += b\n        print(n, '?')\n    elif a == '<':\n        n -= b\n        print(n, '?')\nprint('Хех, вот я и угадал!')\n","Каникулы капризного ребёнка":"a = input()\nb = input()\nif a == 'Тула' and b != 'Пенза' and b != 'Тула':\n    print('ДА')\nelif a != 'Тула' and b == 'Пенза' and a != 'Пенза':\n    print('ДА')\nelse:\n    print('НЕТ')\n","Факториал: первое знакомство":"print(1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9)\n","Полтора землекопа":"print(1400 // 6 + 1)\n","Количество минут в году":"days_per_year = 365 \nhours_per_day = 24 \nminutes_per_hour = 60\nminutes = (days_per_year * hours_per_day * minutes_per_hour)\nprint(minutes)\n","Сложить два числа":"a = int(input())\nb = int(input())\nprint(a + b)\n","Сложить ещё два числа":"a = float(input())\nb = float(input())\nprint(a + b)\n","Одно число":"x = float(input())\nif abs(x) < 1e-6:\n    print(1_000_000)\nelse:\n    print(1 / x)\n    \n","Длина":"a = str(input())\nlength = len(a)\nprint('Слово', a, 'имеет длину', length)\n","На раз-два-три, рассчитайсь!":"a = int(input())\nb = int(input())\nc = int(input())\nif a > b:\n    max = a\nelse:\n    max = b\nif max < c:\n    max = c\nif max == a:\n    if b > c:\n        middle = b\n        min = c\n    else:\n        middle = c\n        min = b\nelif max == b:\n    if a > c:\n        middle = a\n        min = c\n    else:\n        middle = c\n        min = a\nelif max == c:\n    if a > b:\n        middle = a\n        min = b\n    else:\n        middle = b\n        min = a\nprint(max)\nprint(middle)\nprint(min)\n","Плюс-минус":"a = float(input())\nif a > 0:\n    print('+')\nelif a < 0:\n    print('-')\nelse:\n    print(0)\n","Калькулятор":"a = float(input())\nb = float(input())\nc = input()\nif c == '+':\n    print(a + b)\nelif c == '-':\n    print(a - b)\nelif c == '/':\n    if b != 0:\n        print(a / b)\n    else:\n        print(888888)\nelif c == '*':\n    print(a * b)\nelse:\n    print(888888)\n","Високосность":"a = int(input())\nif a % 4 == 0 and a % 100 != 0 or a % 400 == 0:\n    print('Високосный')\nelse:\n    print('Не високосный')\n","Четырехзначный минимум":"number = int(input())\na = number // 1000\nb = (number - a * 1000) // 100\nc = (number - a * 1000 - b * 100) // 10\nd = (number - a * 1000 - b * 100 - c * 10)\nif a <= b and a <= c and a <= d:\n    if b <= c and b <= d:\n        if c <= d:\n            p = str(a) + str(b) + str(c) + str(d)\n        else:\n            p = str(a) + str(b) + str(d) + str(c)\n    elif c <= b and c <= d:\n        if b <= d:\n            p = str(a) + str(c) + str(b) + str(d)\n        else:\n            p = str(a) + str(c) + str(d) + str(b)\n    else:\n        if c <= b:\n            p = str(a) + str(d) + str(c) + str(b)\n        else:\n            p = str(a) + str(d) + str(b) + str(c)\nelif b <= a and b <= c and b <= d:\n    if a <= c and a <= d:\n        if c <= d:\n            p = str(b) + str(a) + str(c) + str(d)\n        else:\n            p = str(b) + str(a) + str(d) + str(c)\n    elif c <= a and c <= d:\n        if a <= d:\n            p = str(b) + str(c) + str(a) + str(d)\n        else:\n            p = str(b) + str(c) + str(d) + str(a)\n    else:\n        if c <= a:\n            p = str(b) + str(d) + str(c) + str(a)\n        else:\n            p = str(b) + str(d) + str(a) + str(c)\nelif c <= a and c <= b and c <= d:\n    if a <= b and a <= d:\n        if b <= d:\n            p = str(c) + str(a) + str(d) + str(b)\n        else:\n            p = str(c) + str(a) + str(b) + str(d)\n    elif b <= a and b <= d:\n        if a <= d:\n            p = str(c) + str(b) + str(a) + str(d)\n        else:\n            p = str(c) + str(b) + str(d) + str(a)\n    else:\n        if b <= a:\n            p = str(c) + str(d) + str(b) + str(a)\n        else:\n            p = str(c) + str(d) + str(a) + str(b)\nelif d <= a and d <= b and d <= c:\n    if a <= b and a <= c:\n        if b <= c:\n            p = str(d) + str(a) + str(b) + str(c)\n        else:\n            p = str(d) + str(a) + str(c) + str(b)\n    elif b <= a and b <= c:\n        if a <= c:\n            p = str(d) + str(b) + str(a) + str(c)\n        else:\n            p = str(d) + str(b) + str(c) + str(a)\n    else:\n        if b <= a:\n            p = str(d) + str(c) + str(b) + str(a)\n        else:\n            p = str(d) + str(c) + str(a) + str(b)\np = int(p)\na = p // 1000\nb = (p - a * 1000) // 100\nc = (p - a * 1000 - b * 100) // 10\nd = (p - a * 1000 - b * 100 - c * 10)\nif a == 0 and b != 0:\n    a, b = b, a\nelif a == 0 and c != 0:\n    a, c = c, a\nelif a == 0 and d != 0:\n    a, d = d, a\nprint(str(a) + str(b) + str(c) + str(d))\n","Уравнение":"a = 999999\nb = 142857\nx = a - b\nprint(x)\n","Пополам":"a = int(input())\nif a % 2 == 0:\n    print('чётное')\nelse:\n    print('нечётное')\n","Верстаем визитную карточку":"a = input()\nlength_of_a = len(a)\nprint(length_of_a * 2 + 3)\n","Красивое число":"number = int(input())\na = number // 100\nb = (number - a * 100) // 10\nc = (number - a * 100 - b * 10)\nif a > b:\n    maximum = a\nelse:\n    maximum = b\nif c > maximum:\n    maximum = c\nif a < b:\n    minimum = a\nelse:\n    minimum = b\nif c < minimum:\n    minimum = c\nif (a == minimum or a == maximum) and (b == minimum or b == maximum):\n    if (a + b) / 2 == c:\n        print('Вы ввели красивое число')\n    else:\n        print('Жаль, вы ввели обычное число')\nelif (a == minimum or a == maximum) and (c == minimum or c == maximum):\n    if (a + c) / 2 == b:\n        print('Вы ввели красивое число')\n    else:\n        print('Жаль, вы ввели обычное число')\nelse:\n    if (b + c) / 2 == a:\n        print('Вы ввели красивое число')\n    else:\n        print('Жаль, вы ввели обычное число')\n","Собери число":"number = int(input())\na = number // 100\nb = (number - a * 100) // 10\nc = (number - a * 100 - b * 10)\nsum1 = a + b\nsum2 = b + c\nif sum1 >= sum2:\n    print(str(sum1) + str(sum2))\nelif sum1 <= sum2:\n    print(str(sum2) + str(sum1))\n","Вспомнить всё":"x = input()\nprint(x, '? Конечно, помню, ведь мы проходили это на прошлом занятии!')\n","Только Питон!":"x = input()\nif x == 'Python':\n    print('ДА')\nelse:\n    print('НЕТ')\n​\n","Ёлочка, гори!":"a = input()\nb = input()\nc = input()\nif a == 'раз' and b == 'два' and c == 'три':\n    print('ГОРИ')\nelse:\n    print('НЕ ГОРИ')\n","Ёлочка-2":"a = input()\nb = input()\nc = input()\nif (a == ('раз') and b == ('два') and c == ('три')) or (a == '1' and b == '2' and c == '3'):\n    print('ГОРИ')\nelse:\n    print('НЕ ГОРИ')\n​\n","Ёлочка-3":"","Личностный тестРУЧ":"a = input('Вы любите путешествовать?') \nif a == ('да') or a == ('нет'):\n    b = input('Вы любите чай?')\n    if b == (' да') or b == (' нет'):\n        if a == ('да') and b == ('да'):\n            print('Вам срочно нужно отправиться в путешествие и купить себе кружку горячего чая!') \n        if a == ('да') and b == ('нет'):\n            print('Ого! Вам стоит отправиться в путешествие, но чай лучше не заказывать!') \n        if a == ('нет') and b == ('да'):\n            print('Кажется вам стоит остаться дома и заварить себе ароматного чая!')\n        if a == ('нет') and b == ('нет'):\n            print('Вам следует оставаться дома, но не лучше заварите себе кофе!')\n    else:\n        print('Вы ввели недопустимое значение')\nelse:\n    print('Вы ввели недопустимое значение')\n              \n              \n              \n       \n        \n         \n                  \n​\n​\n","Эхо-2":"word = input()\nprint(word + word + word + word)\n","Мяу":"a = input()\nif 'кот' in a:\n    print('МЯУ')\nelse:\n    print('ГАВ')\n","ЛабиринтРУЧ":"a = input('''За вами гонится огромный дракон, но внезапно \\\nвы оказались у входа в замок и видите  три двери.\nХодят слухи, что замок заколдован злой ведьмой.\nЕще мало кому удавалось пройти через все его испытания и остаться живым. \nНапишите в какую из дверей вы пойдете (1, 2 или 3?)\\n''')\nif a == '1':\n    a1 = input('Теперь перед вами 2 коридора. Куда идем: налево или направо?\\n')\n    if a1 == 'налево':\n        print('''Вы смело шагаете по корридору.\nНо вруг в темноте послышались шаги. К вам на втречу вышел тролль и... \\\nподарил вам шоколадку! Приятного аппетита)''')\n    elif a1 == 'направо':\n        print('''Теперь вы идете по широкому корридору.\nЕго пространство постепенно расширяется, все вокруг наполняется приятным \\\nсолнечным светом...\nНо взгляните, кажется, огромный дракон хочет отправиться с вами в \\\nпутешествие в Нарнию! \nНе теряйте ни минуты и отправляйтесь навстречу приключениям!''')\n    else:\n        print('Ошибка выполнения программы. Вы что-то ввели неверно.')\nelif a == '2':\n    a2 = input('''Из корридора вы волшебным образом очутились в дремучем лесу. \nПеред вами две тропинки. Куда пойдем: налево или направо?\\n''')\n    if a2 == 'налево':\n        print('''Заросли начали сгущаться. Эта прогулка может завершиться не \\\nочень хорошо...\nНу вот, опасения были не напрасны. Вас схватила Баба Яга и свярила из \\\nвас суп(((''')\n    elif a2 == 'направо':\n        print('''Постепенно ветвистая тропинка стала ровной, а лес вокруг \\\nощутимо поредел.\nКак вам повезло! Вы попали в стран фей! Поторапливайтесь, они зовут вас \\\nпить чай)''')\n    else:\n        print('Ошибка выполнения программы. Вы что-то ввели неверно.')\nelif a == '3':\n    a3 = input('''Замок оказался волшебным, и его корридор привел вас в пустыню.\nНа севере вы заметили льва и решили, что туда идти не стоит.\nВ направлении юга солнце палило так сильно, что вы не можете разглядеть дорогу.\nТак куда идем: запад или восток?\\n''')\n    if a3 == 'запад':\n        print('''Вы очень долго бродили по изнуряющей жаре. \nКазалось, ничто больше не сможет вас от нее спасти...\nНо вдруг вы видите оазис. Счастье вас переполняло. Вы прыгнули купать, но...\nКоварное озеро вас поглотило(((''')\n    elif a3 == 'восток':\n        print('''Вы долго бродили по пустыне, даже стали отчаиваться.\nНо о счастье вы увидели пилота,который уже заканчивает починку своего самолета.\nСкорее бегите к нему! Кажется, вы познакомились с американцем и \\\nсейчас полетите в Нью Йорк!!!''')\n    else:\n        print('Ошибка выполнения программы. Вы что-то ввели неверно.')\nelse:\n    print('Ошибка выполнения программы. Вы что-то ввели неверно.')\n","Короткая светская беседаРУЧ":"a = input('Какое у Вас настроение?\\n')\nif 'не' in a or '?' in a:\n    print('Прошу прощения, но я вас плохо понимаю.')\nelif 'хорош' in a or 'прекрасн' in a:\n    print('Отлично, у меня тоже всё хорошо :)')\nelif 'плох' in a:\n    print('Ничего, скоро всё наладится')\nelse:\n    print('Прошу прощения, но я вас плохо понимаю.')\n","Эхо-0":"print(input())\n","Дзен":"a = input()\nif a == '':\n    print('ДА')\nelse:\n    print('НЕТ')\n","Личностный тест 2РУЧ":"a = input('Напишите ввшу любимую социальную сеть (VK, Instagram, Facebook).\\n')\nif a == 'Instagram':\n    a1 = input('Напишите ваше любимое занятие: люблю рисовать,'\n               ' фотографирую, читаю книги.\\n')\n    if a1 == 'люблю рисовать':\n        print('Кажется, мы вас раскусили. У вас есть профиль в инстаграмм,'\n              ' куда вы выкладываете свои рисунки.'\n              'Творческих успехов!')\n    elif a1 == 'фотографирую':\n        print('Мы все поняли! Вы ведете очень красивый профиль в Instagram,'\n              ' а может быть даже обучаете других.'\n              'Угадалт?)')\n    elif a1 == 'читаю книги':\n        print('Вы типичный пользователь Instagram, который выкладывает мало'\n              ' фотографий, но подписан на множество интересных аккаунтов.'\n              ' Преисполняйтесь в своем познании! Удачи!')\n    else:\n        print('Некорректный ответ на вопрос.')\nelif a == 'VK':\n    a1 = input('Вы из России? (Напишите: да или нет)\\n')\n    if a1 == 'да':\n        print('Скоре всего вы консервативный человек, цените во всем простоту и'\n              ' универсальность.')\n    elif a1 == 'нет':\n        print('У вас необычный склад ума, и явно присутствует стремлении'\n              'осследовать что-то новое. Так держать!')\n    else:\n        print('Некорректный ответ на вопрос.')\nelif a == 'Facebook':\n    a1 = input('Вы любите писать статьи? (Напишите: да или нет)\\n')\n    if a1 == 'да':\n        print('Скорее всего вы гуманитарий. Любите писать,'\n              ' возмоджно, даже собираетесь стать журналистом.')\n    elif a1 == 'нет':\n        print('Вы довольно странный или, по крайней мере, необычный человек!')\n    else:\n        print('Некорректный ответ на вопрос.')\nelse:\n    print('Некорректный ответ на вопрос.')\n","Приветствие":"# программа приветствие \nprint('Привет, Яндекс!')\n","Знакомство":"print('Привет, Яндекс!')\nprint('Приятно познакомиться.')\n","Эхо-1":"text = 'Ауууу!'\nprint(text)\nprint(text)\n","Эхо-1.1":"text = 'Ауууууу!'\nprint(text)\nprint(text)\n","Взлом «планетной» угадайкиРУЧ":"print(planet)\n","Попугай":"a = input()\nb = input()\nc = input()\nprint(a)\nprint(b)\nprint(c)\n","Билетная касса":"name_of_the_film = input()\nname_of_the_cinema = input()\ntime = input()\nprint('Билет на \"', name_of_the_film, '\" в \"', name_of_the_cinema, '\" на', time, 'забронирован.')\n","Гороскоп":"a = input()\nb = input()\nc = input()\nd = input()\nprint('Индивидуальный гороскоп для пользователя', a, b)\nprint('Кем вы были в прошлой жизни:', c)\nprint('Ваш знак зодиака -', d, ', поэтому вы - тонко чувствующая натура.')\n","Бит или не бит?":"xxxx = 1024 * 8\nprint('''1 бит - минимальная единица количества информации.\n1 байт = 8 бит.\n1 Килобит = 1024 бита.\n1 Килобайт = 1024 байта.\n1 Килобайт =''', xxxx, 'бит.')\n","Обратный попугай":"a = input()\nb = input()\nc = input()\nprint(c)\nprint(b)\nprint(a)\n","Отчет о приветствии":"print('Моя первая программа напечатала \"Привет, Яндекс!\" :)')\n","Эхо-1.2":"text = 'Ауууу!'\nprint('Человек:', text)\nprint('Эхо:', text)\n","Взлом планетной угадайки — 2РУЧ":"warning = planet\n","Взлом планетной угадайки — 3РУЧ":"planet = answer\n"}